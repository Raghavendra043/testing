{"ast":null,"code":"import { ComponentParameters } from 'src/app/types/nodes.type';\nimport { RepresentationType } from 'src/app/types/parser.type';\nimport * as i0 from \"@angular/core\";\nexport let AssignmentNodeComponent = /*#__PURE__*/(() => {\n  class AssignmentNodeComponent {\n    constructor() {}\n    getRepresentation() {\n      const assignmentVariable = this.node.variable;\n      this.scope.outputModel[assignmentVariable.name] = {\n        name: assignmentVariable.name,\n        type: assignmentVariable.type,\n        value: this.node.expression.value\n      };\n      const nextNodeId = this.node.next;\n      return {\n        kind: RepresentationType.SKIP,\n        nodeModel: {\n          nodeId: this.node.nodeName\n        },\n        nextNodeId: nextNodeId\n      };\n    }\n  }\n  AssignmentNodeComponent.ɵfac = function AssignmentNodeComponent_Factory(t) {\n    return new (t || AssignmentNodeComponent)();\n  };\n  AssignmentNodeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AssignmentNodeComponent,\n    selectors: [[\"app-assignment-node\"]],\n    inputs: {\n      node: \"node\",\n      nodeMap: \"nodeMap\",\n      scope: \"scope\",\n      parameters: \"parameters\"\n    },\n    decls: 0,\n    vars: 0,\n    template: function AssignmentNodeComponent_Template(rf, ctx) {}\n  });\n  return AssignmentNodeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}