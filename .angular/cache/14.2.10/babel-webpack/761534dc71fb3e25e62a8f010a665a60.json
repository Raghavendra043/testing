{"ast":null,"code":"import _asyncToGenerator from \"D:/Users/raghavendra/Desktop/ODE/OPTH/New folder/testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { addWeeks } from 'date-fns';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@services/state-services/state-passing.service\";\nimport * as i2 from \"@services/state-services/config.service\";\nimport * as i3 from \"@services/util-services/util.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@ngx-translate/core\";\nimport * as i6 from \"@services/rest-api-services/message-threads.service\";\nimport * as i7 from \"@services/native-services/native.service\";\nimport * as i8 from \"@services/rest-api-services/questionnaire-schedules.service\";\nimport * as i9 from \"@services/video-services/video.service\";\nimport * as i10 from \"@ng-idle/core\";\nimport * as i11 from \"@services/rest-api-services/notifications.service\";\nimport * as i12 from \"@services/rest-api-services/clinician.service\";\nimport * as i13 from \"@services/rest-api-services/authentication.service\";\nimport * as i14 from \"@angular/common\";\nimport * as i15 from \"../../header/header/header.component\";\nfunction MenuComponent_h1_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h1\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate3(\" \", i0.ɵɵpipeBind1(2, 3, \"WELCOME\"), \", \", ctx_r0.user.firstName, \" \", ctx_r0.user.lastName, \" \");\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    important_list_item: a0,\n    normal_list_item: a1\n  };\n};\nfunction MenuComponent_a_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 6)(1, \"span\", 7);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"i\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const menuItem_r2 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"routerLink\", menuItem_r2.url);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(6, _c0, menuItem_r2.important, !menuItem_r2.important));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(menuItem_r2.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMapInterpolate1(\"icon \", menuItem_r2.icon, \"\");\n  }\n}\nexport let MenuComponent = /*#__PURE__*/(() => {\n  class MenuComponent {\n    constructor(appContext, config, util, router, translateService, messageThreads, native, questionnaireSchedules, videoService, idle, notifications, clinicianService, authentication) {\n      this.appContext = appContext;\n      this.config = config;\n      this.util = util;\n      this.router = router;\n      this.translateService = translateService;\n      this.messageThreads = messageThreads;\n      this.native = native;\n      this.questionnaireSchedules = questionnaireSchedules;\n      this.videoService = videoService;\n      this.idle = idle;\n      this.notifications = notifications;\n      this.clinicianService = clinicianService;\n      this.authentication = authentication;\n      this.model = {\n        canChangePassword: false,\n        menuItems: []\n      };\n      this.isClinician = false;\n      this.user = this.appContext.getUser();\n      this.isClinician = this.clinicianService.isClinician();\n      this.appContext.requestParams.clearParam('useDefaultAuth'); // If clinician --> Use patient credentials from now on\n    }\n\n    ngOnInit() {\n      const menuItems = this.model.menuItems;\n      if (this.user.links.questionnaires) {\n        menuItems.push({\n          important: false,\n          icon: 'fal fa-stethoscope',\n          url: '../questionnaires',\n          name: this.translateService.instant('MENU_PERFORM_MEASUREMENTS')\n        });\n      }\n      if (this.user.links.threads) {\n        menuItems.push({\n          important: false,\n          icon: 'fal fa-comments',\n          url: '../messages',\n          name: this.translateService.instant('MENU_MESSAGES')\n        });\n      }\n      if (this.user.links.acknowledgements) {\n        menuItems.push({\n          important: false,\n          icon: 'fal fa-check-circle',\n          url: '../acknowledgements',\n          name: this.translateService.instant('MENU_ACKNOWLEDGEMENTS')\n        });\n      }\n      if (this.user.links.measurements) {\n        menuItems.push({\n          important: false,\n          icon: 'fal fa-chart-line',\n          url: '../my_measurements',\n          name: this.translateService.instant('MENU_MY_MEASUREMENTS')\n        });\n      }\n      if (this.config.getAppConfig().showReplies == true) {\n        menuItems.push({\n          important: false,\n          icon: 'fal fa-tasks',\n          url: '../questionnaire_results',\n          name: this.translateService.instant('MENU_QUESTIONNAIRE_RESULTS')\n        });\n      }\n      if (this.user.links.linksCategories) {\n        menuItems.push({\n          important: false,\n          icon: 'fal fa-book-medical',\n          url: '../links_categories',\n          name: this.translateService.instant('MENU_LINKS_CATEGORIES')\n        });\n      }\n      if (this.user.links.calendar) {\n        menuItems.push({\n          important: false,\n          icon: 'fal fa-calendar-alt',\n          url: '../calendar',\n          name: this.translateService.instant('MENU_CALENDAR')\n        });\n      }\n      this.model.canChangePassword = this.user.canChangePassword && this.user.links.changePassword !== undefined && !this.isClinician;\n      if (this.model.canChangePassword) {\n        const info = {\n          username: this.user.username,\n          changePasswordUrl: this.user.links.changePassword\n        };\n        this.appContext.requestParams.set('userInfo', info);\n      }\n      if (!this.isClinician) {\n        this.startIdleWatcher();\n      }\n      this.setupUnreadCounters(menuItems);\n      const videoEnabledRequestDelivered = this.native.clientIsVideoEnabled(response => {\n        if (response.enabled === true) {\n          // App might have been opened from an incoming call notification, so check\n          this.checkAndJoin();\n          this.native.subscribeToMultipleMessages('appResumedEvent', () => this.checkAndJoin());\n        }\n      });\n      if (!videoEnabledRequestDelivered) {\n        console.debug(\"Couldn't deliver videoEnabledRequest -> Video not enabled\");\n      }\n      if (!this.isClinician) {\n        // Avoid clinicians getting push notifications from multiple patients\n        void this.notifications.ensureDeviceRegisteredForPushNotifications(this.user);\n      }\n    }\n    checkAndJoin() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        var _a;\n        const sessionUrl = (_a = _this.user) === null || _a === void 0 ? void 0 : _a.links.individualSessions;\n        if (sessionUrl != null) {\n          try {\n            yield _this.videoService.checkForSessionAndJoin(sessionUrl);\n          } catch (response) {\n            if (response instanceof HttpErrorResponse && response.status == 401) {\n              localStorage.removeItem('authToken');\n              _this.sendToLoginPage();\n              _this.appContext.requestParams.set('authenticationError', 'LOGGED_OUT');\n              throw undefined;\n            } else {\n              console.error(`Error checking for session: ${JSON.stringify(response)}`);\n              return;\n            }\n          }\n        }\n      })();\n    }\n    sendToLoginPage() {\n      // Similar to the function in interceptors.ts but that is unreachable from this module.\n      const customUrl = sessionStorage.getItem('loginUrl');\n      if (customUrl !== null) {\n        void this.router.navigateByUrl(customUrl);\n      } else {\n        if (this.router.url === '/login') {\n          void this.router.navigateByUrl('/', {\n            skipLocationChange: true\n          });\n        }\n        void this.router.navigate(['login'], {});\n      }\n    }\n    startIdleWatcher() {\n      if (this.idle.isRunning()) {\n        return;\n      }\n      this.idle.watch();\n    }\n    updateUnreadMessages(menuItem) {\n      const onSuccess = data => {\n        const unreadMessages = data.results.map(m => m.unreadFromOrganization).reduce((a, b) => a + b, 0);\n        if (unreadMessages > 0) {\n          menuItem.important = true;\n        }\n        menuItem.name = this.translateService.instant('MENU_MESSAGES') + ` (${unreadMessages})`;\n      };\n      const onError = response => {\n        console.warn(`Failed to fetch message threads with error: ${response}`);\n      };\n      this.messageThreads.list(this.user, true).then(onSuccess).catch(onError);\n    }\n    updateQuestionnaireSchedules(menuItem) {\n      this.questionnaireSchedules.list(this.user, true).pipe(map(this.unansweredQuestionnaires), tap(schedules => {\n        if (schedules.length > 0) menuItem.important = true;\n        menuItem.name = `${this.translateService.instant('MENU_PERFORM_MEASUREMENTS')} (${schedules.length})`;\n      })).subscribe({\n        next: scheduledQuestionnaires => {\n          const updateSchedulesRequestDelivered = this.native.updateScheduledQuestionnaires(scheduledQuestionnaires);\n          if (!updateSchedulesRequestDelivered) {\n            console.debug(\"Couldn't deliver update schedules request due to missing native layer\");\n          }\n        },\n        error: error => {\n          console.warn(`Failed to fetch questionnaires schedules with error: ${error}`);\n        }\n      });\n    }\n    unansweredQuestionnaires(schedules) {\n      const now = new Date();\n      const nextWeek = addWeeks(now, 1);\n      return schedules.filter(schedule => {\n        return schedule.scheduleWindowStart && schedule.scheduleWindowStart <= now && schedule.nextDeadline && schedule.nextDeadline <= nextWeek;\n      });\n    }\n    setupUnreadCounters(menuItems) {\n      const messagesItem = menuItems.find(item => item.url === '../messages');\n      const questionnairesItem = menuItems.find(item => item.url === '../questionnaires');\n      const updateCounters = () => {\n        if (this.util.exists(messagesItem)) {\n          console.debug('Updating unread messages...');\n          this.updateUnreadMessages(messagesItem);\n        }\n        if (this.util.exists(questionnairesItem)) {\n          console.debug('Updating unanswered questionnaires...');\n          this.updateQuestionnaireSchedules(questionnairesItem);\n        }\n      };\n      updateCounters();\n      this.native.subscribeToMultipleMessages('appResumedEvent', updateCounters);\n    }\n    goBack() {\n      if (this.isClinician) {\n        console.debug('Going back as a clinician and clearing patient authentication');\n        this.appContext.requestParams.getAndClear('selectedPatient');\n        this.authentication.deletePatientAuthHeader();\n        this.router.navigate(['clinician_menu'], {\n          replaceUrl: true\n        });\n      } else {\n        globalThis.history.back();\n      }\n    }\n  }\n  MenuComponent.ɵfac = function MenuComponent_Factory(t) {\n    return new (t || MenuComponent)(i0.ɵɵdirectiveInject(i1.StatePassingService), i0.ɵɵdirectiveInject(i2.ConfigService), i0.ɵɵdirectiveInject(i3.Utils), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i5.TranslateService), i0.ɵɵdirectiveInject(i6.MessageThreadsService), i0.ɵɵdirectiveInject(i7.NativeService), i0.ɵɵdirectiveInject(i8.QuestionnaireSchedulesService), i0.ɵɵdirectiveInject(i9.VideoService), i0.ɵɵdirectiveInject(i10.Idle), i0.ɵɵdirectiveInject(i11.NotificationsService), i0.ɵɵdirectiveInject(i12.ClinicianService), i0.ɵɵdirectiveInject(i13.AuthenticationService));\n  };\n  MenuComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MenuComponent,\n    selectors: [[\"app-menu\"]],\n    decls: 5,\n    vars: 8,\n    consts: [[1, \"container\"], [3, \"title\", \"showBackBtn\", \"isClinician\", \"onBackFun\", \"showChangePasswordBtn\", \"showLogoutBtn\"], [1, \"content\"], [\"class\", \"page-title\", 4, \"ngIf\"], [\"class\", \"list_item\", 3, \"routerLink\", \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"page-title\"], [1, \"list_item\", 3, \"routerLink\", \"ngClass\"], [1, \"before-icon\"], [\"aria-hidden\", \"true\"]],\n    template: function MenuComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"header-menu\", 1);\n        i0.ɵɵelementStart(2, \"nav\", 2);\n        i0.ɵɵtemplate(3, MenuComponent_h1_3_Template, 3, 5, \"h1\", 3);\n        i0.ɵɵtemplate(4, MenuComponent_a_4_Template, 4, 9, \"a\", 4);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"title\", \"MENU\")(\"showBackBtn\", ctx.isClinician)(\"isClinician\", ctx.isClinician)(\"onBackFun\", ctx.goBack)(\"showChangePasswordBtn\", ctx.model.canChangePassword)(\"showLogoutBtn\", ctx.isClinician ? false : true);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.isClinician);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.model.menuItems);\n      }\n    },\n    dependencies: [i14.NgClass, i14.NgForOf, i14.NgIf, i4.RouterLinkWithHref, i15.HeaderComponent, i5.TranslatePipe]\n  });\n  return MenuComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}