{"ast":null,"code":"import { ChangeDetectorRef } from \"@angular/core\";\nimport { DEFAULT_INTERRUPTSOURCES } from \"@ng-idle/core\";\nimport { translationOverrides } from \"src/app/product-flavor/translationOverrides\";\nimport { mergeMap, take, tap } from \"rxjs/operators\";\nimport { Languages, supportedLanguages } from \"./types/product-flavor.type\";\nimport moment from \"moment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nimport * as i2 from \"@services/state-services/config.service\";\nimport * as i3 from \"@ng-idle/core\";\nimport * as i4 from \"@services/native-services/native.service\";\nimport * as i5 from \"@services/rest-api-services/authentication.service\";\nimport * as i6 from \"@angular/router\";\nimport * as i7 from \"@services/rest-api-services/http-notifications.service\";\nimport * as i8 from \"@angular/platform-browser\";\nimport * as i9 from \"@services/oidc-services/oidc-utils.service\";\nimport * as i10 from \"@services/native-services/fake-native-layer.service\";\nimport * as i11 from \"@angular/common\";\nimport * as i12 from \"./components/loading/loading-widget/loading-widget.component\";\nconst _c0 = function (a0) {\n  return {\n    time: a0\n  };\n};\nfunction AppComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"div\", 3)(2, \"p\");\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(4, 1, \"LOGOUT_TIMEOUT\", i0.ɵɵpureFunction1(4, _c0, ctx_r0.countdown)));\n  }\n}\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(translate, config, idle, native, cdr, authentication, router, _router, httpNotifications, title, oidcService, fakeNativeLayer // fakeNative is not unused. Is toggled in app.config.json\n    ) {\n      this.translate = translate;\n      this.config = config;\n      this.idle = idle;\n      this.native = native;\n      this.cdr = cdr;\n      this.authentication = authentication;\n      this.router = router;\n      this._router = _router;\n      this.httpNotifications = httpNotifications;\n      this.title = title;\n      this.oidcService = oidcService;\n      this.fakeNativeLayer = fakeNativeLayer;\n      this.idleState = \"NOT_STARTED\";\n      this.showSpinner = false;\n      this.prefix = lang => lang.slice(0, 2);\n      this.setupNativeInteroperability = () => {\n        this.native.enableMessagesFromNative();\n        console.info(\"Integration with native layer enabled\");\n      };\n      this.initializeUserIdleEvents = () => {\n        this.idle.setIdle(this.config.getAppConfig().idleTimeoutInSeconds);\n        this.idle.setTimeout(this.config.getAppConfig().idleWarningCountdownInSeconds);\n        this.idle.setKeepaliveEnabled(false);\n        this.idle.setInterrupts(DEFAULT_INTERRUPTSOURCES);\n        this.idle.onIdleStart.subscribe(() => {\n          this.idleState = \"IDLE\";\n        });\n        this.idle.onIdleEnd.subscribe(() => {\n          this.idleState = \"NOT_IDLE\";\n          delete this.countdown;\n          console.debug(`${this.idleState} ${new Date()}`);\n          this.cdr.detectChanges();\n        });\n        this.idle.onTimeoutWarning.subscribe(seconds => {\n          this.idleState = \"IDLE_WARNING\";\n          this.countdown = seconds;\n          console.debug(\"Idle countdown: \", this.countdown);\n        });\n        this.idle.onTimeout.subscribe(() => {\n          this.idleState = \"TIMED_OUT\";\n          delete this.countdown;\n          console.info(\"User idle and logged out\");\n          this.authentication.authTimedOut();\n          this.router.navigate([\"/login\"]);\n        });\n      };\n      this.initializeAppLifeCycleEvents = () => {\n        const appCreated = () => console.info(\"App created\");\n        const appResumed = () => {\n          console.info(\"App resumed\");\n          this.idle.interrupt();\n        };\n        this.native.subscribeToMultipleMessages(\"appCreatedEvent\", appCreated);\n        this.native.subscribeToMultipleMessages(\"appResumedEvent\", appResumed);\n      };\n    }\n    ngOnChanges() {\n      this.runLanguageController();\n      console.debug(\"Config loaded!\");\n    }\n    ngOnInit() {\n      this.title.setTitle(\"opentele-client-html-angular\");\n      this.setupNativeInteroperability();\n      if (this.config.getOIDCConfig().enabled) {\n        console.debug(\"OIDC enabled\");\n        this.oidcService.runOIDC();\n      } else {\n        console.debug(\"OIDC disabled\");\n      }\n      this.runLanguageController();\n      this.initializeUserIdleEvents();\n      this.initializeAppLifeCycleEvents();\n    }\n    ngAfterViewInit() {\n      this.httpNotifications.httpProgress().subscribe(status => {\n        this.showSpinner = status;\n        this.cdr.detectChanges();\n      });\n    }\n    determineLocale(language) {\n      const locale = language.slice(0, 2);\n      if (locale === \"en\") {\n        return language;\n      } else if (locale === \"no\") {\n        return \"nb\";\n      } else {\n        return locale;\n      }\n    }\n    runLanguageController() {\n      this.translate.setDefaultLang(Languages.EN_US);\n      const languages = supportedLanguages;\n      const applyTranslationOverrides = language => {\n        if (language in translationOverrides) {\n          this.translate.getTranslation(language).pipe(mergeMap(() => {\n            this.translate.setTranslation(language, translationOverrides[language], true);\n            return this.translate.get(\"OPENTELE\");\n          }), take(1), tap(title => console.debug(\"Title: %s\", title))).subscribe(title => this.title.setTitle(title));\n        }\n      };\n      const [language] = navigator.languages || [navigator.language || \"en\"];\n      console.debug(`Browser language: ${language}`);\n      const setLocale = language => {\n        console.debug(`Setting language to: ${language}`);\n        this.translate.use(language);\n        const languagesToOverride = Object.keys(translationOverrides);\n        if (languagesToOverride.length) {\n          languagesToOverride.forEach(applyTranslationOverrides);\n        }\n        this.translate.get(\"OPENTELE\").subscribe(title => this.title.setTitle(title));\n        const locale = this.determineLocale(language);\n        console.debug(`Setting locale for moment: ${locale}`);\n        moment.locale(locale);\n      };\n      const sharesPrefix = (lang1, lang2) => {\n        return lang1.slice(0, 2) === lang2.slice(0, 2);\n      };\n      const overrideLanguage = language => {\n        const overrides = {\n          nb: \"no-NO\",\n          \"nb-no\": \"no-NO\"\n        };\n        if (language.toLowerCase() in overrides) {\n          console.info(`Language overridden from ${language} to ${overrides[language.toLowerCase()]}`);\n          return overrides[language.toLowerCase()];\n        }\n        return language;\n      };\n      const changeLocale = browserLanguage => {\n        const language = overrideLanguage(browserLanguage);\n        // exact match\n        if (languages.includes(language)) {\n          console.info(\"Setting language from exact match of: \" + language);\n          setLocale(language);\n          return;\n        }\n        // prefix match\n        for (const knownLanguage of languages) {\n          if (sharesPrefix(knownLanguage, language)) {\n            console.info(\"Setting language from shared prefix match of: \" + language + \" which matches: \" + knownLanguage);\n            setLocale(knownLanguage);\n            return;\n          }\n        }\n        // default\n        console.info(\"Setting language to default en-US. Unable to match language: \" + language);\n        setLocale(\"en-US\");\n      };\n      changeLocale(language);\n    }\n    reset() {\n      // we'll call this method when we want to start/reset the idle process\n      // reset any component state and be sure to call idle.watch()\n      this.idle.watch();\n      this.idleState = \"NOT_IDLE\";\n      delete this.countdown;\n    }\n  }\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.TranslateService), i0.ɵɵdirectiveInject(i2.ConfigService), i0.ɵɵdirectiveInject(i3.Idle), i0.ɵɵdirectiveInject(i4.NativeService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i5.AuthenticationService), i0.ɵɵdirectiveInject(i6.Router), i0.ɵɵdirectiveInject(i6.Router), i0.ɵɵdirectiveInject(i7.HttpNotificationsService), i0.ɵɵdirectiveInject(i8.Title), i0.ɵɵdirectiveInject(i9.OidcUtilsService), i0.ɵɵdirectiveInject(i10.FakeNativeLayerService));\n  };\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 3,\n    vars: 2,\n    consts: [[\"class\", \"light-box-dimmer\", 4, \"ngIf\"], [3, \"showSpinner\"], [1, \"light-box-dimmer\"], [\"id\", \"light-box\", 1, \"light-box\", \"pre-wrap\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, AppComponent_div_0_Template, 5, 6, \"div\", 0);\n        i0.ɵɵelement(1, \"loading-widget\", 1)(2, \"router-outlet\");\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.countdown);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"showSpinner\", ctx.showSpinner);\n      }\n    },\n    dependencies: [i11.NgIf, i6.RouterOutlet, i12.LoadingWidgetComponent, i1.TranslatePipe]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}