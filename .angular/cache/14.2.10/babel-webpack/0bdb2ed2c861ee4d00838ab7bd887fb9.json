{"ast":null,"code":"import { NativeEvent } from 'src/app/types/listener.type';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../native-services/native.service\";\nimport * as i2 from \"./individual-sessions-api.service\";\nimport * as i3 from \"@angular/router\";\nexport let VideoListenerService = /*#__PURE__*/(() => {\n  class VideoListenerService {\n    constructor(native, individualSessionsApi, router) {\n      this.native = native;\n      this.individualSessionsApi = individualSessionsApi;\n      this.router = router;\n      /**\r\n       * Listens for 'videoConferenceResponse' events received from the native layer.\r\n       */\n      this.texts = Object.freeze({\n        conferenceStarted: 'CONFERENCE_STARTED',\n        conferenceEnded: 'CONFERENCE_ENDED',\n        conferenceError: 'CONFERENCE_ERROR'\n      });\n      this.constants = Object.freeze({\n        status: 'status',\n        info: 'info',\n        error: 'error',\n        timeoutInMillis: 3000,\n        menuPath: '/menu',\n        videoConferenceResponse: 'videoConferenceResponse',\n        incomingVideoCall: 'incomingVideoCall'\n      });\n      this.states = Object.freeze({\n        prompted: 'prompted',\n        joining: 'joining',\n        joined: 'joined',\n        disconnected: 'disconnected'\n      });\n      this.listenForNativeEvent = (individualSessionUrl, model) => {\n        const nativeVideoEventCallback = message => {\n          this.handleEvent(individualSessionUrl, model, message.event);\n        };\n        this.native.subscribeToMultipleMessages(this.constants.videoConferenceResponse, nativeVideoEventCallback);\n      };\n      this.listenForIncomingCall = individualSessionsUrl => {\n        this.native.unsubscribeAll(this.constants.incomingVideoCall);\n        this.native.subscribeToMultipleMessages(this.constants.incomingVideoCall, () => {\n          console.debug(\"received 'incomingVideoCall' message\");\n          this.individualSessionsApi.checkForSessionAndJoin(individualSessionsUrl);\n        });\n      };\n      this.handleEvent = (individualSessionUrl, model, event) => {\n        console.debug(`Event: ${JSON.stringify(event)}`);\n        const eventType = event.type;\n        switch (eventType) {\n          case this.constants.status:\n            this.handleStatusEvent(individualSessionUrl, model, event);\n            break;\n          default:\n            console.warn(`Unknown event type: ${eventType}`);\n            break;\n        }\n      };\n      this.handleStatusEvent = (individualSessionUrl, model, event) => {\n        const status = event.status;\n        const statusType = status.type;\n        const message = status.message;\n        switch (statusType) {\n          case this.constants.error:\n            this.handleErrorEvent(individualSessionUrl, model, message);\n            break;\n          case this.constants.info:\n            this.handleInfoEvent(individualSessionUrl, model, message);\n            break;\n          default:\n            console.warn(`Unknown status type: ${statusType}`);\n            break;\n        }\n      };\n      this.handleErrorEvent = (individualSessionUrl, model, message) => {\n        model.state = this.states.disconnected;\n        switch (message) {\n          case this.texts.conferenceError:\n            this.endSession(individualSessionUrl);\n            break;\n          default:\n            model.error = message;\n            break;\n        }\n      };\n      this.handleInfoEvent = (individualSessionUrl, model, message) => {\n        model.message = message;\n        switch (message) {\n          case this.texts.conferenceStarted:\n            console.debug('Conference started');\n            model.state = this.states.joined;\n            break;\n          case this.texts.conferenceEnded:\n            model.state = this.states.disconnected;\n            this.endSession(individualSessionUrl);\n            break;\n          default:\n            console.debug(`Info message received: ${JSON.stringify(message)}`);\n            model.info = message;\n            break;\n        }\n      };\n      this.endSession = individualSessionUrl => {\n        console.debug('CONFERENCE ENDED');\n        this.individualSessionsApi.leaveSession(individualSessionUrl);\n        const leftConference = this.native.leaveConference();\n        if (!leftConference) {\n          console.debug(\"Couldn't leave conference\");\n        }\n        this.native.unsubscribeAll(this.constants.videoConferenceResponse);\n        this.router.navigate([this.constants.menuPath]);\n      };\n    }\n  }\n  VideoListenerService.ɵfac = function VideoListenerService_Factory(t) {\n    return new (t || VideoListenerService)(i0.ɵɵinject(i1.NativeService), i0.ɵɵinject(i2.IndividualSessionsApiService), i0.ɵɵinject(i3.Router));\n  };\n  VideoListenerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: VideoListenerService,\n    factory: VideoListenerService.ɵfac,\n    providedIn: 'root'\n  });\n  return VideoListenerService;\n})();","map":null,"metadata":{},"sourceType":"module"}