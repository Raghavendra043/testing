{"ast":null,"code":"import { ComponentParameters } from 'src/app/types/nodes.type';\nimport { RepresentationType } from '@app/types/parser.type';\nimport { Validators } from '@angular/forms';\nimport { PARSER_TYPES } from '@components/questionnaire-nodes/manual/manual-device-node/parser-types';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@services/parser-services/parser-utils.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"src/app/directives/focus-on-load.directive\";\nimport * as i5 from \"@ngx-translate/core\";\nfunction ManualDeviceNodeComponent_fieldset_4_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, \"VALUE_INCORRECT_WARNING\"));\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    warning: a0\n  };\n};\nfunction ManualDeviceNodeComponent_fieldset_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"fieldset\", 4)(1, \"div\")(2, \"label\", 5);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 6);\n    i0.ɵɵtemplate(6, ManualDeviceNodeComponent_fieldset_4_span_6_Template, 3, 3, \"span\", 7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const input_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"for\", input_r1.nodeTypeName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 8, input_r1.translationId));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"id\", input_r1.nodeTypeName)(\"name\", input_r1.nodeTypeName)(\"step\", input_r1.formStep)(\"formControlName\", i_r2)(\"ngClass\", i0.ɵɵpureFunction1(10, _c0, ctx_r0.isOffendingValue(input_r1.nodeTypeName)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isOffendingValue(input_r1.nodeTypeName));\n  }\n}\nexport let ManualDeviceNodeComponent = /*#__PURE__*/(() => {\n  class ManualDeviceNodeComponent {\n    constructor(formBuilder, parserUtils) {\n      this.formBuilder = formBuilder;\n      this.parserUtils = parserUtils;\n      //Form\n      this.inputs = [];\n      this.nodeForm = this.formBuilder.group({\n        inputControls: this.formBuilder.array([])\n      });\n      //Properties\n      this.integerRegex = '[0-9]+';\n      this.floatRegex = '([0-9]*[.,])?[0-9]+';\n      this.getRepresentation = () => {\n        const nodeParserType = PARSER_TYPES.find(obj => obj.typeName === this.parameters.parserTypeName);\n        const nodeTypeName = nodeParserType.typeName;\n        const nodeTypeValue = nodeParserType.typeValue;\n        const translationId = nodeParserType.translationId;\n        const formStep = nodeTypeValue === 'integer' ? '1' : 'any';\n        const formPattern = nodeTypeValue === 'integer' ? this.integerRegex : this.floatRegex;\n        const input = {\n          nodeTypeName: nodeTypeName,\n          nodeTypeValue: nodeTypeValue,\n          translationId: translationId,\n          formStep: formStep,\n          formPattern: formPattern\n        };\n        this.inputs.push(input);\n        this.inputControls.push(this.formBuilder.control('', Validators.compose([Validators.required, Validators.pattern(formPattern)])));\n        const nodeModel = {\n          nodeId: this.node.nodeName,\n          heading: this.node.text,\n          rangeCheck: nodeModel => {\n            nodeModel = Object.assign({\n              nodeModel\n            }, {\n              [nodeTypeName]: this.getValue(nodeTypeName)\n            });\n            return this.parserUtils.checkInputRanges([nodeTypeName], this.node, nodeModel);\n          }\n        };\n        if ('comment' in this.node) {\n          nodeModel.comment = this.node.comment;\n        }\n        const leftButton = {\n          show: true,\n          text: 'SKIP',\n          nextNodeId: this.node.nextFail\n        };\n        const rightButton = {\n          show: true,\n          text: 'NEXT',\n          nextNodeId: this.node.next,\n          validate: scope => {\n            return !this.nodeForm.invalid;\n          },\n          click: scope => {\n            const measurements = [nodeTypeName];\n            const value = this.getValue(nodeTypeName);\n            if (value !== undefined) {\n              nodeModel[nodeTypeName] = value;\n              this.parserUtils.addMeasurementsToOutput(scope.outputModel, nodeModel, this.node, measurements);\n              this.parserUtils.addMeasurementCommentToOutput(scope.outputModel, nodeModel, this.node);\n              this.parserUtils.addManualMeasurementOriginToOutput(scope.outputModel, this.node);\n            } else {\n              console.error(`Variabel in output model for nodeTypeName: '${nodeTypeName}' was undefined`);\n            }\n          }\n        };\n        const representation = {\n          kind: RepresentationType.NODE,\n          nodeModel: nodeModel,\n          leftButton: leftButton,\n          rightButton: rightButton\n        };\n        this.parserUtils.addHelpMenu(this.node, representation);\n        return representation;\n      };\n    }\n    isOffendingValue(valueName) {\n      return this.scope.hasOffendingValue(valueName);\n    }\n    getIndex(nodeTypeName) {\n      const index = this.inputs.findIndex(input => {\n        return input.nodeTypeName === nodeTypeName;\n      });\n      if (index < 0 || index === undefined) {\n        return -1;\n      } else {\n        return index;\n      }\n    }\n    getValue(nodeTypeName) {\n      const index = this.getIndex(nodeTypeName);\n      let value = undefined;\n      if (index >= 0) {\n        value = this.inputControls.at(index).value;\n      }\n      return value;\n    }\n    onSubmit() {\n      console.log(this.nodeForm.value);\n    }\n    get inputControls() {\n      return this.nodeForm.get('inputControls');\n    }\n  }\n  ManualDeviceNodeComponent.ɵfac = function ManualDeviceNodeComponent_Factory(t) {\n    return new (t || ManualDeviceNodeComponent)(i0.ɵɵdirectiveInject(i1.NonNullableFormBuilder), i0.ɵɵdirectiveInject(i2.ParserUtilsService));\n  };\n  ManualDeviceNodeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ManualDeviceNodeComponent,\n    selectors: [[\"manual-device-node\"]],\n    inputs: {\n      node: \"node\",\n      nodeMap: \"nodeMap\",\n      scope: \"scope\",\n      parameters: \"parameters\"\n    },\n    decls: 5,\n    vars: 3,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"center-div\"], [1, \"line-wrap\", \"text-element\"], [\"formArrayName\", \"inputControls\", \"class\", \"questionnaire-fields\", 4, \"ngFor\", \"ngForOf\"], [\"formArrayName\", \"inputControls\", 1, \"questionnaire-fields\"], [3, \"for\"], [\"type\", \"number\", \"autocomplete\", \"off\", \"focusOnLoad\", \"\", 3, \"id\", \"name\", \"step\", \"formControlName\", \"ngClass\"], [\"id\", \"input.nodeTypeName\", \"class\", \"warning\", 4, \"ngIf\"], [\"id\", \"input.nodeTypeName\", 1, \"warning\"]],\n    template: function ManualDeviceNodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function ManualDeviceNodeComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"h2\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(4, ManualDeviceNodeComponent_fieldset_4_Template, 7, 12, \"fieldset\", 3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.nodeForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.node.text);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.inputs);\n      }\n    },\n    dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormArrayName, i4.FocusOnLoadDirective, i5.TranslatePipe]\n  });\n  return ManualDeviceNodeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}