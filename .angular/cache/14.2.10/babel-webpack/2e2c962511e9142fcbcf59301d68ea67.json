{"ast":null,"code":"import { Provider, APP_INITIALIZER } from \"@angular/core\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppRoutingModule } from \"@app/app-routing.module\";\nimport { AppComponent } from \"@app/app.component\";\nimport { HttpClient, HttpClientModule } from \"@angular/common/http\";\nimport { TranslateLoader, TranslateModule } from \"@ngx-translate/core\";\nimport { TranslateHttpLoader } from \"@ngx-translate/http-loader\";\nimport { NgIdleKeepaliveModule } from \"@ng-idle/keepalive\";\nimport { LoadingModule } from \"@app/components/loading/loading.module\";\nimport { interceptorProviders } from \"@app/interceptors\";\nimport { ConfigService } from \"@services/state-services/config.service\";\nimport { LocationStrategy } from \"@angular/common\";\nimport { AuthModule, StsConfigLoader, StsConfigStaticLoader } from \"angular-auth-oidc-client\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nimport * as i2 from \"angular-auth-oidc-client\";\nimport * as i3 from \"@ng-idle/keepalive\";\n// AoT requires an exported function for factories\nexport function HttpLoaderFactory(locationStrategy, httpClient) {\n  const baseHref = locationStrategy.getBaseHref();\n  return new TranslateHttpLoader(httpClient, `${baseHref}assets/i18n/`, \".json\");\n}\nexport function initConfig(config) {\n  return () => config.loadConfig();\n}\nconst providers = [interceptorProviders, {\n  provide: APP_INITIALIZER,\n  useFactory: initConfig,\n  deps: [ConfigService],\n  multi: true\n}];\nconst authFactory = configService => {\n  const buildAuthModuleConfig = config => {\n    const getScopes = scopes => {\n      if (!scopes || Object.entries(scopes).length === 0) {\n        return \"openid profile\";\n      }\n      return scopes;\n    };\n    const setFlow = config => {\n      return config.flow ? config.flow : \"id_token token\" /* OIDCFlow.IMPLICIT */;\n    };\n\n    const authConfig = {\n      authority: config.authorizationEndpoint,\n      redirectUrl: config.redirectUri,\n      postLogoutRedirectUri: config.postLogoutRedirectUri,\n      clientId: config.clientId,\n      scope: getScopes(config.scopes),\n      responseType: setFlow(config)\n    };\n    if (authConfig.responseType === \"id_token token\" /* OIDCFlow.IMPLICIT */) {\n      // Hack to force using fragments in implicit flow\n      const fragment = {\n        response_mode: \"fragment\"\n      };\n      const additionalParams = config.additionalParams ? config.additionalParams : {};\n      const params = Object.assign(Object.assign({}, fragment), additionalParams);\n      authConfig.customParamsAuthRequest = params;\n    } else {\n      // Only use the spcified additional params for PKCE flow.\n      if (config.additionalParams) {\n        authConfig.customParamsAuthRequest = config.additionalParams;\n      }\n    }\n    if (authConfig.customParamsAuthRequest && configService.getOIDCConfig().enabled) {\n      console.debug(\"Using the following additional params for authorization\");\n      console.debug(authConfig.customParamsAuthRequest);\n    }\n    return authConfig;\n  };\n  const config = configService.getOIDCConfig();\n  const OIDCconfig = buildAuthModuleConfig(config);\n  if (config.enabled) {\n    console.debug(\"OIDC config for auth module build:\");\n    console.debug(OIDCconfig);\n  }\n  return new StsConfigStaticLoader(OIDCconfig);\n};\nexport let AppModule = /*#__PURE__*/(() => {\n  class AppModule {}\n  AppModule.ɵfac = function AppModule_Factory(t) {\n    return new (t || AppModule)();\n  };\n  AppModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: AppModule,\n    bootstrap: [AppComponent]\n  });\n  AppModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: providers,\n    imports: [BrowserModule, BrowserAnimationsModule, AppRoutingModule, HttpClientModule, LoadingModule, TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [LocationStrategy, HttpClient]\n      }\n    }), AuthModule.forRoot({\n      loader: {\n        provide: StsConfigLoader,\n        useFactory: authFactory,\n        deps: [ConfigService]\n      }\n    }), NgIdleKeepaliveModule.forRoot()]\n  });\n  return AppModule;\n})();","map":null,"metadata":{},"sourceType":"module"}