{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport { ComponentParameters } from \"src/app/types/nodes.type\";\nimport { floatRegex } from \"src/app/components/questionnaire-nodes/node-form-utils\";\nimport { RepresentationType } from \"src/app/types/parser.type\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/parser-services/parser-utils.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"src/app/directives/focus-on-load.directive\";\nimport * as i5 from \"@ngx-translate/core\";\nfunction CrpManualDeviceNodeComponent_span_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, \"VALUE_INCORRECT_WARNING\"));\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    warning: a0\n  };\n};\nexport let CrpManualDeviceNodeComponent = /*#__PURE__*/(() => {\n  class CrpManualDeviceNodeComponent {\n    constructor(formBuilder, parserUtils) {\n      this.formBuilder = formBuilder;\n      this.parserUtils = parserUtils;\n      this.nodeForm = this.formBuilder.group({\n        crpLt5Measurement: [false],\n        crpCountMeasurement: [\"\", [Validators.required, Validators.pattern(floatRegex)]]\n      });\n      this.getRepresentation = () => {\n        const nodeModel = {\n          nodeId: this.node.nodeName,\n          heading: this.node.text,\n          rangeCheck: nodeModel => {\n            nodeModel = Object.assign({\n              nodeModel\n            }, {\n              CRP: this.getValue()\n            });\n            return this.parserUtils.checkInputRanges([\"CRP\"], this.node, nodeModel);\n          }\n        };\n        if (\"comment\" in this.node) {\n          nodeModel.comment = this.node.comment;\n        }\n        const leftButton = {\n          show: true,\n          text: \"SKIP\",\n          nextNodeId: this.node.nextFail\n        };\n        const rightButton = {\n          show: true,\n          text: \"NEXT\",\n          nextNodeId: this.node.next,\n          validate: () => {\n            const isLt5CheckedAndNothingElse = () => {\n              const formValues = this.nodeForm.getRawValue();\n              return formValues.crpLt5Measurement === true && (formValues.crpCountMeasurement === undefined || formValues.crpCountMeasurement === null || formValues.crpCountMeasurement.toString().length === 0);\n            };\n            const isValueEnteredAndNothingElse = () => {\n              const formValues = this.nodeForm.value;\n              return formValues.crpLt5Measurement !== true && formValues.crpCountMeasurement !== undefined && formValues.crpCountMeasurement !== null && 0 <= Number(formValues.crpCountMeasurement) && 0 < formValues.crpCountMeasurement.toString().length;\n            };\n            return isLt5CheckedAndNothingElse() || isValueEnteredAndNothingElse();\n          },\n          click: scope => {\n            const crpValue = this.node.CRP;\n            if (crpValue === undefined) {\n              throw new Error(\"CRP Value not properly defined\");\n            }\n            const formValues = this.nodeForm.getRawValue();\n            const nodeName = crpValue.name;\n            const lt5 = formValues.crpLt5Measurement;\n            const count = Number(formValues.crpCountMeasurement);\n            scope.outputModel[nodeName] = {\n              name: nodeName,\n              type: crpValue.type,\n              value: this.getValue()\n            };\n            const crpNodeModel = {\n              nodeId: nodeModel.nodeId,\n              crpLt5Measurement: lt5,\n              crpCountMeasurement: count\n            };\n            this.parserUtils.addMeasurementCommentToOutput(scope.outputModel, crpNodeModel, this.node);\n            this.parserUtils.addManualMeasurementOriginToOutput(scope.outputModel, this.node);\n          }\n        };\n        const representation = {\n          kind: RepresentationType.NODE,\n          nodeModel: nodeModel,\n          leftButton: leftButton,\n          rightButton: rightButton\n        };\n        this.parserUtils.addHelpMenu(this.node, representation);\n        return representation;\n      };\n    }\n    isOffendingValue(valueName) {\n      return this.scope.hasOffendingValue(valueName);\n    }\n    getValue() {\n      const crpValue = this.node.CRP;\n      if (crpValue === undefined) {\n        throw new Error(\"CRP Value not properly defined\");\n      }\n      const formValues = this.nodeForm.getRawValue();\n      const lt5 = formValues.crpLt5Measurement;\n      const count = Number(formValues.crpCountMeasurement);\n      const lessThanFive = lt5 || count < 5;\n      return lessThanFive ? 0 : count;\n    }\n    onSubmit() {\n      console.log(this.nodeForm.value);\n    }\n    get crpLt5Measurement() {\n      return this.nodeForm.get(\"crpLt5Measurement\");\n    }\n    get crpCountMeasurement() {\n      return this.nodeForm.get(\"crpCountMeasurement\");\n    }\n  }\n  CrpManualDeviceNodeComponent.ɵfac = function CrpManualDeviceNodeComponent_Factory(t) {\n    return new (t || CrpManualDeviceNodeComponent)(i0.ɵɵdirectiveInject(i1.NonNullableFormBuilder), i0.ɵɵdirectiveInject(i2.ParserUtilsService));\n  };\n  CrpManualDeviceNodeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CrpManualDeviceNodeComponent,\n    selectors: [[\"app-crp-manual-device-node\"]],\n    inputs: {\n      node: \"node\",\n      nodeMap: \"nodeMap\",\n      scope: \"scope\",\n      parameters: \"parameters\"\n    },\n    decls: 16,\n    vars: 12,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"center-div\"], [1, \"line-wrap\", \"text-element\"], [1, \"questionnaire-fields\"], [\"for\", \"lt5\"], [\"id\", \"lt5\", \"name\", \"lt5\", \"type\", \"checkbox\", \"formControlName\", \"crpLt5Measurement\"], [\"for\", \"count\"], [\"id\", \"count\", \"name\", \"count\", \"type\", \"number\", \"step\", \"0.1\", \"autocomplete\", \"off\", \"focusOnLoad\", \"\", \"formControlName\", \"crpCountMeasurement\", 3, \"ngClass\"], [\"id\", \"crp-warning\", \"class\", \"warning\", 4, \"ngIf\"], [\"id\", \"crp-warning\", 1, \"warning\"]],\n    template: function CrpManualDeviceNodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function CrpManualDeviceNodeComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"h2\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"fieldset\", 3)(5, \"div\")(6, \"label\", 4);\n        i0.ɵɵtext(7);\n        i0.ɵɵpipe(8, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\")(11, \"label\", 6);\n        i0.ɵɵtext(12);\n        i0.ɵɵpipe(13, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"input\", 7);\n        i0.ɵɵtemplate(15, CrpManualDeviceNodeComponent_span_15_Template, 3, 3, \"span\", 8);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.nodeForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.node.text);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(8, 6, \"LT5\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(13, 8, \"OR_CRP\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(10, _c0, ctx.isOffendingValue(\"CRP\")));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isOffendingValue(\"CRP\"));\n      }\n    },\n    dependencies: [i3.NgClass, i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.CheckboxControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i4.FocusOnLoadDirective, i5.TranslatePipe]\n  });\n  return CrpManualDeviceNodeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}