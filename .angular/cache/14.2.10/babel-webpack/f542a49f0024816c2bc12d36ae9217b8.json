{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/state-services/state-passing.service\";\nimport * as i2 from \"src/app/services/rest-api-services/message-threads.service\";\nimport * as i3 from \"src/app/services/native-services/native.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../../header/header/header.component\";\nimport * as i7 from \"../../loading/loading-state/loading-state.component\";\nconst _c0 = function (a0, a1) {\n  return {\n    important_list_item: a0,\n    normal_list_item: a1\n  };\n};\nfunction MessagesComponent_a_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"a\", 5);\n    i0.ɵɵlistener(\"click\", function MessagesComponent_a_4_Template_a_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const i_r2 = restoredCtx.index;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.showMessageThread(i_r2));\n    });\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const department_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(3, _c0, department_r1.unreadCount, !department_r1.unreadCount));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" \", department_r1.name, \" \", department_r1.unreadCount > 0 ? \"(\" + department_r1.unreadCount + \")\" : \"\", \" \");\n  }\n}\nexport let MessagesComponent = /*#__PURE__*/(() => {\n  class MessagesComponent {\n    constructor(appContext, messageThreads, native, router) {\n      this.appContext = appContext;\n      this.messageThreads = messageThreads;\n      this.native = native;\n      this.router = router;\n      this.model = {\n        state: \"Loading\",\n        departments: []\n      };\n      this.showMessageThread = selected => {\n        const departments = this.model.departments;\n        const threadRef = departments[selected];\n        const hasOtherThreads = departments.length > 1;\n        this.appContext.requestParams.set(\"selectedDepartment\", threadRef);\n        this.appContext.requestParams.set(\"hasOtherThreads\", hasOtherThreads);\n        if (this.model.departments.length === 1) {\n          this.router.navigate([\"messages/\" + selected + \"/thread\"], {\n            replaceUrl: true\n          });\n        } else {\n          this.router.navigate([\"messages/\" + selected + \"/thread\"]);\n        }\n      };\n      this.onSuccess = data => {\n        const existingThreads = data.results.map(t => ({\n          name: t.organizationName,\n          url: t.links.organization,\n          unreadCount: t.unreadFromOrganization,\n          messageThread: t\n        }));\n        const availableDepartments = this.user.organizations.map(org => ({\n          name: org.name,\n          url: org.url,\n          messageThread: undefined,\n          unreadCount: 0\n        }));\n        const departments = {};\n        for (const thread of [...availableDepartments, ...existingThreads]) {\n          departments[thread.url] = thread;\n        }\n        this.model.departments = Object.values(departments);\n        this.model.state = \"Loaded\";\n        const clearMessagesRequestDelivered = this.native.clearUnreadMessages();\n        if (!clearMessagesRequestDelivered) {\n          console.debug(\"Couldn't clear unread messages due to missing native layer\");\n        }\n        if (this.model.departments.length === 1) {\n          this.showMessageThread(0);\n        }\n      };\n      this.onError = data => {\n        this.model.state = \"Failed\";\n        console.error(`Failed to load messages due to error: ${data}`);\n      };\n      this.user = this.appContext.getUser();\n      this.messageThreads.list(this.user, false).then(this.onSuccess).catch(this.onError);\n    }\n  }\n  MessagesComponent.ɵfac = function MessagesComponent_Factory(t) {\n    return new (t || MessagesComponent)(i0.ɵɵdirectiveInject(i1.StatePassingService), i0.ɵɵdirectiveInject(i2.MessageThreadsService), i0.ɵɵdirectiveInject(i3.NativeService), i0.ɵɵdirectiveInject(i4.Router));\n  };\n  MessagesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MessagesComponent,\n    selectors: [[\"app-messages\"]],\n    decls: 5,\n    vars: 8,\n    consts: [[1, \"container\"], [3, \"showBackBtn\", \"title\"], [3, \"stateModel\", \"hasNoData\", \"noDataMessage\", \"loadingMessage\", \"failedMessage\"], [1, \"content\"], [\"class\", \"list_item\", 3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"list_item\", 3, \"ngClass\", \"click\"]],\n    template: function MessagesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"header-menu\", 1)(2, \"loading-state\", 2);\n        i0.ɵɵelementStart(3, \"nav\", 3);\n        i0.ɵɵtemplate(4, MessagesComponent_a_4_Template, 3, 6, \"a\", 4);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"showBackBtn\", true)(\"title\", \"MESSAGES_TITLE\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"stateModel\", ctx.model.state)(\"hasNoData\", ctx.model.departments.length === 0)(\"noDataMessage\", \"MESSAGES_NO_THREADS\")(\"loadingMessage\", \"MESSAGES_LOADING\")(\"failedMessage\", \"MESSAGES_FAILED\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.model.departments);\n      }\n    },\n    dependencies: [i5.NgClass, i5.NgForOf, i6.HeaderComponent, i7.LoadingStateComponent]\n  });\n  return MessagesComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}