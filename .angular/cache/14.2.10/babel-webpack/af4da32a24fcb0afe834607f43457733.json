{"ast":null,"code":"import _asyncToGenerator from \"D:/Users/raghavendra/Desktop/ODE/OPTH/New folder/testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { FilterType } from '@app/types/filter.type';\nimport { minTime, subWeeks, subMonths, subQuarters, subYears } from 'date-fns';\nimport { lastValueFrom } from 'rxjs';\nimport { MeasurementTypeName } from '@app/types/measurement-types.type';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@services/util-services/util.service\";\nimport * as i2 from \"@angular/common/http\";\nexport let MeasurementsService = /*#__PURE__*/(() => {\n  class MeasurementsService {\n    constructor(utils, http) {\n      var _this = this;\n      this.utils = utils;\n      this.http = http;\n      this.wrapSuccess = accMeasurements => {\n        return /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (response) {\n            const measurements = accMeasurements.concat(response.results);\n            if (response.links.next !== undefined) {\n              const nextUrl = response.links.next;\n              return lastValueFrom(_this.http.get(nextUrl)).then(newResponse => {\n                return _this.wrapSuccess(measurements)(newResponse);\n              });\n            } else {\n              // Transform data from API\n              const measurementsResult = {\n                measurements: measurements.filter(_this.filterNullResult).map(_this.mapNullToFalse)\n              };\n              if (measurements.length > 0) {\n                measurementsResult.type = measurements[0].type;\n                measurementsResult.unit = measurements[0].measurement.unit;\n              }\n              return measurementsResult;\n            }\n          });\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n      };\n      this.filterNullResult = measurement => {\n        const specialValueMeasurementTypes = [MeasurementTypeName.BLOOD_PRESSURE, MeasurementTypeName.PROTEIN_IN_URINE, MeasurementTypeName.GLUCOSE_IN_URINE, MeasurementTypeName.URINE_BLOOD, MeasurementTypeName.URINE_NITRITE, MeasurementTypeName.URINE_LEUKOCYTES];\n        if (specialValueMeasurementTypes.includes(measurement.type)) {\n          return true;\n        } else {\n          return measurement.measurement.value !== null;\n        }\n      };\n      this.mapNullToFalse = measurement => {\n        const bloodSugarMeasurementTypes = [MeasurementTypeName.BLOOD_SUGAR, MeasurementTypeName.BLOOD_SUGAR_MG_DL];\n        if (bloodSugarMeasurementTypes.includes(measurement.type)) {\n          const measurementValue = measurement.measurement;\n          if (measurementValue.isFasting == null) {\n            measurementValue.isFasting = false;\n          }\n          if (measurementValue.isAfterMeal == null) {\n            measurementValue.isAfterMeal = false;\n          }\n          if (measurementValue.isBeforeMeal == null) {\n            measurementValue.isBeforeMeal = false;\n          }\n          return measurement;\n        } else {\n          return measurement;\n        }\n      };\n    }\n    listTypes(user) {\n      if (!this.utils.hasNestedProperty(user, 'links.measurements')) {\n        throw new TypeError('User object does not contain a link ' + 'relation to my measurements');\n      }\n      return lastValueFrom(this.http.get(user.links.measurements));\n    }\n    addFilterParameters(url, filter) {\n      const now = new Date();\n      let from;\n      switch (filter) {\n        case FilterType.WEEK:\n          from = subWeeks(now, 1);\n          break;\n        case FilterType.MONTH:\n          from = subMonths(now, 1);\n          break;\n        case FilterType.QUARTER:\n          from = subQuarters(now, 1);\n          break;\n        case FilterType.YEAR:\n          from = subYears(now, 1);\n          break;\n        case FilterType.ALL:\n          from = new Date(minTime);\n          break;\n      }\n      return `${url}&from=${from.toISOString()}`;\n    }\n    list(measurementRef, filter) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        let url = measurementRef.link;\n        if (_this2.utils.exists(filter) && filter.length > 0) {\n          url = _this2.addFilterParameters(url, filter);\n        }\n        const response = yield lastValueFrom(_this2.http.get(url));\n        return _this2.wrapSuccess([])(response);\n      })();\n    }\n  }\n  MeasurementsService.ɵfac = function MeasurementsService_Factory(t) {\n    return new (t || MeasurementsService)(i0.ɵɵinject(i1.Utils), i0.ɵɵinject(i2.HttpClient));\n  };\n  MeasurementsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MeasurementsService,\n    factory: MeasurementsService.ɵfac,\n    providedIn: 'root'\n  });\n  return MeasurementsService;\n})();","map":null,"metadata":{},"sourceType":"module"}