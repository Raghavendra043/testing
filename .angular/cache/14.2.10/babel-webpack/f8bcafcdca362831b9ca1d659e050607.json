{"ast":null,"code":"import { formatNumber } from \"@angular/common\";\nimport { MeasurementTypeName } from \"@app/types/measurement-types.type\";\nimport { parse, parseISO, format } from \"date-fns\";\nimport { graphColors } from \"src/app/product-flavor/colors\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nexport let GraphsService = /*#__PURE__*/(() => {\n  class GraphsService {\n    constructor(translate) {\n      this.translate = translate;\n      this.pointSize = 5;\n      this.createGraph = measurementsResult => {\n        if (measurementsResult.measurements.length == 0) {\n          return undefined;\n        }\n        const ignoredTypes = [MeasurementTypeName.URINE_BLOOD, MeasurementTypeName.URINE_NITRITE, MeasurementTypeName.URINE_LEUKOCYTES, MeasurementTypeName.PROTEIN_IN_URINE, MeasurementTypeName.GLUCOSE_IN_URINE];\n        const typeName = measurementsResult.type;\n        if (ignoredTypes.includes(typeName)) {\n          return undefined;\n        }\n        let measurements = measurementsResult.measurements;\n        const bloodSugarTypes = [MeasurementTypeName.BLOOD_SUGAR, MeasurementTypeName.BLOOD_SUGAR_MG_DL];\n        let graphData;\n        if (typeName == MeasurementTypeName.BLOOD_PRESSURE) {\n          graphData = this.createBloodPressureGraph(measurements);\n        } else if (typeName == MeasurementTypeName.SPIROMETRY) {\n          graphData = this.createSpirometryGraph(measurements);\n        } else if (bloodSugarTypes.includes(typeName)) {\n          graphData = this.createBloodSugarGraph(measurements, typeName);\n        } else {\n          graphData = this.createNormalGraph(measurements, typeName);\n        }\n        const graphOptions = {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: graphData.scales,\n          plugins: {\n            tooltip: graphData.tooltip,\n            legend: graphData.legend\n          }\n        };\n        return {\n          type: \"line\",\n          data: graphData.chartData,\n          options: graphOptions\n        };\n      };\n      this.createBloodPressureGraph = measurements => {\n        const systolicSeries = [];\n        const diastolicSeries = [];\n        const pulseSeries = [];\n        measurements.forEach(measurement => {\n          const timestamp = measurement.timestamp;\n          const measurementValue = measurement.measurement;\n          if (measurementValue.systolic !== undefined) {\n            systolicSeries.push({\n              x: timestamp,\n              y: measurementValue.systolic\n            });\n          }\n          if (measurementValue.diastolic !== undefined) {\n            diastolicSeries.push({\n              x: timestamp,\n              y: measurementValue.diastolic\n            });\n          }\n          if (measurementValue.pulse !== undefined) {\n            pulseSeries.push({\n              x: timestamp,\n              y: measurementValue.pulse\n            });\n          }\n        });\n        const scales = {\n          x: {\n            type: \"time\",\n            position: \"bottom\"\n          },\n          y: {\n            suggestedMin: 40,\n            suggestedMax: 200\n          }\n        };\n        const legend = {\n          display: true,\n          position: \"top\"\n        };\n        const tooltip = undefined;\n        const chartData = {\n          labels: [],\n          datasets: [{\n            data: systolicSeries,\n            backgroundColor: graphColors[0],\n            borderColor: graphColors[0],\n            pointBackgroundColor: graphColors[0],\n            pointBorderColor: graphColors[0],\n            pointBorderWidth: 0,\n            pointRadius: this.pointSize,\n            label: this.translate.instant(\"BLOOD_PRESSURE_SYSTOLIC\")\n          }, {\n            data: diastolicSeries,\n            backgroundColor: graphColors[1],\n            borderColor: graphColors[1],\n            pointBackgroundColor: graphColors[1],\n            pointBorderColor: graphColors[1],\n            pointBorderWidth: 0,\n            pointRadius: this.pointSize,\n            label: this.translate.instant(\"BLOOD_PRESSURE_DIASTOLIC\")\n          }, {\n            data: pulseSeries,\n            backgroundColor: graphColors[2],\n            borderColor: graphColors[2],\n            pointBackgroundColor: graphColors[2],\n            pointBorderColor: graphColors[2],\n            pointBorderWidth: 3,\n            pointRadius: this.pointSize,\n            label: this.translate.instant(\"BLOOD_PRESSURE_PULSE\"),\n            pointStyle: \"cross\",\n            rotation: 45,\n            showLine: false\n          }]\n        };\n        return {\n          scales: scales,\n          legend: legend,\n          chartData: chartData,\n          tooltip: tooltip\n        };\n      };\n      this.createSpirometryGraph = measurements => {\n        const fev1Series = [];\n        const fev6Series = [];\n        const fev1PercentageSeries = [];\n        const fev6PercentageSeries = [];\n        measurements.forEach(measurement => {\n          const timestamp = measurement.timestamp;\n          const measurementValue = measurement.measurement;\n          if (measurementValue.fev1 !== undefined) {\n            fev1Series.push({\n              x: timestamp,\n              y: measurementValue.fev1.value\n            });\n          }\n          if (measurementValue.fev6 !== undefined) {\n            fev6Series.push({\n              x: timestamp,\n              y: measurementValue.fev6.value\n            });\n          }\n          if (measurementValue[\"fev1%\"] !== undefined) {\n            fev1PercentageSeries.push({\n              x: timestamp,\n              y: measurementValue[\"fev1%\"].value\n            });\n          }\n          if (measurementValue[\"fev6%\"] !== undefined) {\n            fev6PercentageSeries.push({\n              x: timestamp,\n              y: measurementValue[\"fev6%\"].value\n            });\n          }\n        });\n        const scales = {\n          x: {\n            type: \"time\",\n            position: \"bottom\"\n          },\n          yPercentage: {\n            position: \"right\",\n            suggestedMin: 50,\n            suggestedMax: 100,\n            grid: {\n              display: false\n            }\n          },\n          yValue: {\n            suggestedMin: 2.0,\n            suggestedMax: 5.0\n          }\n        };\n        const legend = {\n          display: true,\n          position: \"right\"\n        };\n        const tooltip = {\n          callbacks: {\n            label: context => {\n              let label = context.dataset.label || \"\";\n              if (context.parsed.y !== null) {\n                label = this.translate.instant(`MEASUREMENT_TYPE_${label.toUpperCase()}`) + \" \" + formatNumber(context.parsed.y, this.translate.currentLang, this.getNumberFormat(MeasurementTypeName.SPIROMETRY));\n              }\n              return label;\n            }\n          }\n        };\n        const chartData = {\n          labels: [],\n          datasets: [{\n            data: fev1Series,\n            yAxisID: \"yValue\",\n            borderColor: graphColors[0],\n            pointBackgroundColor: graphColors[0],\n            pointBorderWidth: 0,\n            pointRadius: this.pointSize,\n            label: this.translate.instant(\"MEASUREMENT_TYPE_FEV1\")\n          }, {\n            data: fev6Series,\n            yAxisID: \"yValue\",\n            borderColor: graphColors[1],\n            pointBackgroundColor: graphColors[1],\n            pointBorderWidth: 0,\n            pointRadius: this.pointSize,\n            label: this.translate.instant(\"MEASUREMENT_TYPE_FEV6\")\n          }, {\n            data: fev1PercentageSeries,\n            yAxisID: \"yPercentage\",\n            borderColor: graphColors[2],\n            pointBackgroundColor: graphColors[2],\n            pointBorderWidth: 0,\n            pointRadius: this.pointSize,\n            label: this.translate.instant(\"MEASUREMENT_TYPE_FEV1%\")\n          }, {\n            data: fev6PercentageSeries,\n            yAxisID: \"yPercentage\",\n            borderColor: graphColors[3],\n            pointBackgroundColor: graphColors[3],\n            pointBorderWidth: 0,\n            pointRadius: this.pointSize,\n            label: this.translate.instant(\"MEASUREMENT_TYPE_FEV6%\")\n          }]\n        };\n        return {\n          scales: scales,\n          legend: legend,\n          tooltip: tooltip,\n          chartData: chartData\n        };\n      };\n      this.createBloodSugarGraph = (measurements, typeName) => {\n        const normalSeries = [];\n        const beforeMealSeries = [];\n        const afterMealSeries = [];\n        const fastingSeries = [];\n        measurements.forEach(measurement => {\n          const timestamp = measurement.timestamp;\n          const measurementValue = measurement.measurement;\n          if (measurementValue.isBeforeMeal) {\n            beforeMealSeries.push({\n              x: timestamp,\n              y: measurementValue.value\n            });\n          } else if (measurementValue.isAfterMeal) {\n            afterMealSeries.push({\n              x: timestamp,\n              y: measurementValue.value\n            });\n          } else if (measurementValue.isFasting) {\n            fastingSeries.push({\n              x: timestamp,\n              y: measurementValue.value\n            });\n          } else {\n            normalSeries.push({\n              x: timestamp,\n              y: measurementValue.value\n            });\n          }\n        });\n        let yScale;\n        if (typeName == MeasurementTypeName.BLOOD_SUGAR_MG_DL) {\n          yScale = {\n            suggestedMin: 60,\n            suggestedMax: 100\n          };\n        } else {\n          yScale = {\n            suggestedMin: 2,\n            suggestedMax: 10\n          };\n        }\n        const scales = {\n          x: {\n            type: \"time\",\n            position: \"bottom\"\n          }\n        };\n        const legend = {\n          display: true,\n          position: \"right\"\n        };\n        const tooltip = undefined;\n        const bloodSugarPointSize = 3;\n        const chartData = {\n          labels: [],\n          datasets: [{\n            data: beforeMealSeries,\n            backgroundColor: graphColors[0],\n            borderColor: graphColors[0],\n            pointBackgroundColor: graphColors[0],\n            pointBorderColor: graphColors[0],\n            pointBorderWidth: 3,\n            pointRadius: bloodSugarPointSize,\n            label: this.translate.instant(\"BEFORE_MEAL\"),\n            showLine: false\n          }, {\n            data: afterMealSeries,\n            backgroundColor: graphColors[1],\n            borderColor: graphColors[1],\n            pointBackgroundColor: graphColors[1],\n            pointBorderColor: graphColors[1],\n            pointBorderWidth: 3,\n            pointRadius: bloodSugarPointSize,\n            label: this.translate.instant(\"AFTER_MEAL\"),\n            showLine: false\n          }, {\n            data: fastingSeries,\n            backgroundColor: graphColors[2],\n            borderColor: graphColors[2],\n            pointBackgroundColor: graphColors[2],\n            pointBorderColor: graphColors[2],\n            pointBorderWidth: 3,\n            pointRadius: bloodSugarPointSize,\n            label: this.translate.instant(\"FASTING\"),\n            showLine: false\n          }, {\n            data: normalSeries,\n            backgroundColor: graphColors[3],\n            borderColor: graphColors[3],\n            pointBackgroundColor: graphColors[3],\n            pointBorderColor: graphColors[3],\n            pointBorderWidth: 3,\n            pointRadius: bloodSugarPointSize,\n            label: this.translate.instant(\"UNKNOWN\"),\n            showLine: false\n          }]\n        };\n        return {\n          scales: scales,\n          legend: legend,\n          tooltip: tooltip,\n          chartData: chartData\n        };\n      };\n      this.createNormalGraph = (measurements, typeName) => {\n        const dataSeries = measurements.map(m => {\n          return {\n            x: m.timestamp,\n            y: m.measurement.value\n          };\n        });\n        const scales = {\n          x: {\n            type: \"time\",\n            position: \"bottom\"\n          }\n        };\n        const legend = {\n          display: false\n        };\n        const tooltip = {\n          callbacks: {\n            label: context => {\n              let label = context.dataset.label || \"\";\n              if (context.parsed.y !== null) {\n                label = this.translate.instant(`MEASUREMENT_TYPE_${label.toUpperCase()}`) + \" \" + formatNumber(context.parsed.y, this.translate.currentLang, this.getNumberFormat(typeName));\n              }\n              return label;\n            }\n          }\n        };\n        const chartData = {\n          labels: [],\n          datasets: [{\n            data: dataSeries,\n            label: typeName,\n            borderColor: \"#166296\",\n            pointBackgroundColor: \"#166296\",\n            pointBorderWidth: 0,\n            pointRadius: this.pointSize\n          }]\n        };\n        return {\n          scales: scales,\n          legend: legend,\n          tooltip: tooltip,\n          chartData: chartData\n        };\n      };\n      this.createStandardDayGraph = measurementsResult => {\n        const typeName = measurementsResult.type;\n        const measurements = measurementsResult.measurements;\n        if (measurementsResult.measurements.length == 0 || ![MeasurementTypeName.BLOOD_SUGAR, MeasurementTypeName.BLOOD_SUGAR_MG_DL].includes(typeName)) {\n          return undefined;\n        }\n        let graphData;\n        let scales;\n        let legend;\n        let tooltip;\n        const normalSeries = [];\n        const beforeMealSeries = [];\n        const afterMealSeries = [];\n        const fastingSeries = [];\n        measurements.forEach(measurement => {\n          const timestamp = measurement.timestamp;\n          const measurementValue = measurement.measurement;\n          const timeOfDay = parse(timestamp.split(\"T\")[1], \"HH:mm:ss\", new Date());\n          if (measurementValue.isBeforeMeal) {\n            beforeMealSeries.push({\n              x: timestamp,\n              y: measurementValue.value,\n              t: timeOfDay\n            });\n          } else if (measurementValue.isAfterMeal) {\n            afterMealSeries.push({\n              x: timestamp,\n              y: measurementValue.value,\n              t: timeOfDay\n            });\n          } else if (measurementValue.isFasting) {\n            fastingSeries.push({\n              x: timestamp,\n              y: measurementValue.value,\n              t: timeOfDay\n            });\n          } else {\n            normalSeries.push({\n              x: timestamp,\n              y: measurementValue.value,\n              t: timeOfDay\n            });\n          }\n        });\n        scales = {\n          x: {\n            type: \"time\",\n            position: \"bottom\",\n            min: \"00:00\",\n            max: \"23:59\",\n            time: {\n              unit: \"hour\"\n            }\n          }\n        };\n        legend = {\n          display: true,\n          position: \"right\"\n        };\n        tooltip = {\n          callbacks: {\n            title: context => {\n              const timestamp = parseISO(context[0].raw.x);\n              return format(timestamp, \"PPpp\");\n            }\n          }\n        };\n        const bloodSugarPointSize = 3;\n        graphData = {\n          labels: [],\n          datasets: [{\n            data: beforeMealSeries,\n            backgroundColor: graphColors[0],\n            borderColor: graphColors[0],\n            pointBackgroundColor: graphColors[0],\n            pointBorderColor: graphColors[0],\n            pointBorderWidth: 3,\n            pointRadius: bloodSugarPointSize,\n            label: this.translate.instant(\"BEFORE_MEAL\"),\n            showLine: false\n          }, {\n            data: afterMealSeries,\n            backgroundColor: graphColors[1],\n            borderColor: graphColors[1],\n            pointBackgroundColor: graphColors[1],\n            pointBorderColor: graphColors[1],\n            pointBorderWidth: 3,\n            pointRadius: bloodSugarPointSize,\n            label: this.translate.instant(\"AFTER_MEAL\"),\n            showLine: false\n          }, {\n            data: fastingSeries,\n            backgroundColor: graphColors[2],\n            borderColor: graphColors[2],\n            pointBackgroundColor: graphColors[2],\n            pointBorderColor: graphColors[2],\n            pointBorderWidth: 3,\n            pointRadius: bloodSugarPointSize,\n            label: this.translate.instant(\"FASTING\"),\n            showLine: false\n          }, {\n            data: normalSeries,\n            backgroundColor: graphColors[3],\n            borderColor: graphColors[3],\n            pointBackgroundColor: graphColors[3],\n            pointBorderColor: graphColors[3],\n            pointBorderWidth: 3,\n            pointRadius: bloodSugarPointSize,\n            label: this.translate.instant(\"UNKNOWN\"),\n            showLine: false\n          }]\n        };\n        const graphOptions = {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: scales,\n          parsing: {\n            xAxisKey: \"t\"\n          },\n          plugins: {\n            tooltip: tooltip,\n            legend: legend\n          }\n        };\n        return {\n          type: \"line\",\n          data: graphData,\n          options: graphOptions\n        };\n      };\n      this.getNumberFormat = measurementTypeName => {\n        const floatTypes = [MeasurementTypeName.BLOOD_SUGAR, MeasurementTypeName.BLOOD_SUGAR_MG_DL, MeasurementTypeName.CRP, MeasurementTypeName.DURATION_HOURS, MeasurementTypeName.FEF25_75, MeasurementTypeName.FEV1, MeasurementTypeName.FEV6, MeasurementTypeName.HEMOGLOBIN, MeasurementTypeName.PAIN_SCALE, MeasurementTypeName.SPIROMETRY, MeasurementTypeName.TEMPERATURE, MeasurementTypeName.TEMPERATURE_FAHRENHEIT, MeasurementTypeName.WEIGHT, MeasurementTypeName.WEIGHT_POUND];\n        const noFormat = [MeasurementTypeName.BLOOD_PRESSURE, MeasurementTypeName.GLUCOSE_IN_URINE, MeasurementTypeName.PROTEIN_IN_URINE, MeasurementTypeName.URINE_BLOOD, MeasurementTypeName.URINE_LEUKOCYTES, MeasurementTypeName.URINE_NITRITE];\n        if (noFormat.indexOf(measurementTypeName) >= 0) {\n          return undefined;\n        } else if (floatTypes.indexOf(measurementTypeName) >= 0) {\n          return \"1.1-1\";\n        } else {\n          return \"1.0-0\";\n        }\n      };\n    }\n  }\n  GraphsService.ɵfac = function GraphsService_Factory(t) {\n    return new (t || GraphsService)(i0.ɵɵinject(i1.TranslateService));\n  };\n  GraphsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GraphsService,\n    factory: GraphsService.ɵfac,\n    providedIn: \"root\"\n  });\n  return GraphsService;\n})();","map":null,"metadata":{},"sourceType":"module"}