{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/native-services/native.service\";\nimport * as i2 from \"src/app/services/state-services/state-passing.service\";\nimport * as i3 from \"src/app/services/video-services/video.service\";\nimport * as i4 from \"@ng-idle/core\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../../header/header/header.component\";\nimport * as i7 from \"@ngx-translate/core\";\nfunction JoinConferenceComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"h3\");\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 2, ctx_r0.model.header));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 4, ctx_r0.model.message));\n  }\n}\nfunction JoinConferenceComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function JoinConferenceComponent_div_4_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.acceptCall());\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", ctx_r1.model.state === ctx_r1.states.JOINING);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 2, ctx_r1.texts.joinButton), \" \");\n  }\n}\nconst ROOM_CREDENTIALS = \"roomCredentials\";\nconst SESSION_URL = \"individualSessionUrl\";\nconst VIDEO_TYPE = \"vidyo\";\nconst TIMEOUT_MILLIS = 7000;\nvar States = /*#__PURE__*/(() => {\n  (function (States) {\n    States[\"PROMPTED\"] = \"prompted\";\n    States[\"JOINING\"] = \"joining\";\n    States[\"JOINED\"] = \"joined\";\n    States[\"DISCONNECTED\"] = \"disconnected\";\n  })(States || (States = {}));\n  return States;\n})();\nconst texts = Object.freeze({\n  header: \"CONFERENCE_JOIN_HEADER\",\n  joining: \"CONFERENCE_JOINING_MESSAGE\",\n  join: \"CONFERENCE_JOIN_MESSAGE\",\n  joinButton: \"CONFERENCE_JOIN_BUTTON\"\n});\nexport let JoinConferenceComponent = /*#__PURE__*/(() => {\n  class JoinConferenceComponent {\n    constructor(native, appContext, videoFacade, idle) {\n      this.native = native;\n      this.appContext = appContext;\n      this.videoFacade = videoFacade;\n      this.idle = idle;\n      this.states = States;\n      this.texts = texts;\n      this.model = {\n        header: texts.header,\n        message: texts.join,\n        state: States.PROMPTED\n      };\n    }\n    ngOnInit() {\n      this.checkHostIsPresent();\n      const startSoundRequestDelivered = this.native.playNotificationSound();\n      if (!startSoundRequestDelivered) {\n        console.debug(\"Couldn't play notification sound due to missing native layer\");\n      }\n    }\n    acceptCall() {\n      const stopSoundRequestDelivered = this.native.stopNotificationSound();\n      if (!stopSoundRequestDelivered) {\n        console.debug(\"Couldn't stop notification sound due to missing native layer\");\n      }\n      this.idle.stop();\n      this.model.message = texts.joining;\n      this.model.state = States.JOINING;\n      const parameters = this.appContext.requestParams;\n      const roomCredentials = parameters.getAndClear(ROOM_CREDENTIALS);\n      const individualSessionUrl = parameters.getAndClear(SESSION_URL);\n      const videoConferenceDescription = Object.freeze({\n        isOneOnOne: true,\n        videoType: VIDEO_TYPE,\n        parameters: roomCredentials\n      });\n      this.videoFacade.listenForNativeEvent(individualSessionUrl, this.model);\n      const joinConferenceRequestDelivered = this.native.joinConference(videoConferenceDescription);\n      if (!joinConferenceRequestDelivered) {\n        console.debug(\"Couldn't join conference due to missing native layer\");\n      }\n    }\n    checkHostIsPresent() {\n      console.debug(\"Check if host is still present\");\n      const parameters = this.appContext.requestParams;\n      const individualSessionUrl = parameters.get(SESSION_URL);\n      let retries = 0;\n      const doCheck = () => {\n        const onSuccess = hostStatus => {\n          const host = hostStatus === null || hostStatus === void 0 ? void 0 : hostStatus.host;\n          if ((host === null || host === void 0 ? void 0 : host.present) == false) {\n            console.debug(\"Host not present, ending conference\");\n            const stopSoundRequestDelivered = this.native.stopNotificationSound();\n            if (!stopSoundRequestDelivered) {\n              console.debug(\"Couldn't stop notification sound due to missing native layer\");\n            }\n            this.model.state = States.DISCONNECTED;\n            this.videoFacade.sessionEnded(individualSessionUrl);\n          } else {\n            if (this.model.state === States.DISCONNECTED) {\n              console.debug(\"Meeting stopped by other source, will stop \" + \"checking if host is present\");\n            } else {\n              setTimeout(() => {\n                doCheck();\n              }, TIMEOUT_MILLIS);\n            }\n          }\n        };\n        const onError = () => {\n          console.debug(`Failed to check if host is still present, status: response.status`);\n          if (retries >= 3) {\n            console.debug(\"Maximum number of retries reached, ending conference\");\n            const stopSoundRequestDelivered = this.native.stopNotificationSound();\n            if (!stopSoundRequestDelivered) {\n              console.debug(\"Couldn't stop notification sound due to missing native layer\");\n            }\n            this.videoFacade.sessionEnded(individualSessionUrl);\n          } else {\n            console.debug(\"Retrying 'check if host is still present'\");\n            retries += 1;\n            setTimeout(() => {\n              doCheck();\n            }, TIMEOUT_MILLIS);\n          }\n        };\n        this.videoFacade.isHostPresent(individualSessionUrl).then(onSuccess).catch(onError);\n      };\n      doCheck();\n    }\n  }\n  JoinConferenceComponent.ɵfac = function JoinConferenceComponent_Factory(t) {\n    return new (t || JoinConferenceComponent)(i0.ɵɵdirectiveInject(i1.NativeService), i0.ɵɵdirectiveInject(i2.StatePassingService), i0.ɵɵdirectiveInject(i3.VideoService), i0.ɵɵdirectiveInject(i4.Idle));\n  };\n  JoinConferenceComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: JoinConferenceComponent,\n    selectors: [[\"app-join-conference\"]],\n    decls: 5,\n    vars: 3,\n    consts: [[1, \"container\"], [3, \"title\"], [1, \"content\"], [4, \"ngIf\"], [\"id\", \"footer\", \"class\", \"flex-column\", 4, \"ngIf\"], [\"id\", \"footer\", 1, \"flex-column\"], [\"id\", \"join-button\", 1, \"footer-button\", \"center-button\", 3, \"disabled\", \"click\"]],\n    template: function JoinConferenceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"header-menu\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtemplate(3, JoinConferenceComponent_div_3_Template, 7, 6, \"div\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, JoinConferenceComponent_div_4_Template, 4, 4, \"div\", 4);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"title\", \"CONFERENCE_TITLE\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.model.state === ctx.states.PROMPTED || ctx.model.state === ctx.states.JOINING);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.model.state !== ctx.states.JOINED);\n      }\n    },\n    dependencies: [i5.NgIf, i6.HeaderComponent, i7.TranslatePipe]\n  });\n  return JoinConferenceComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}