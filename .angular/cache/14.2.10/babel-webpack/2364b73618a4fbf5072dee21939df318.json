{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { ComponentParameters } from 'src/app/types/nodes.type';\nimport { RepresentationType } from 'src/app/types/parser.type';\nimport { getAllFormFields, getAllFormValues } from '@components/questionnaire-nodes/node-form-utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/parser-services/parser-utils.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"src/app/directives/focus-on-load.directive\";\nimport * as i5 from \"@ngx-translate/core\";\nfunction BloodSugarMGDLManualDeviceNodeComponent_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, \"VALUE_INCORRECT_WARNING\"));\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    warning: a0\n  };\n};\nexport let BloodSugarMGDLManualDeviceNodeComponent = /*#__PURE__*/(() => {\n  class BloodSugarMGDLManualDeviceNodeComponent {\n    constructor(formBuilder, parserUtils) {\n      this.formBuilder = formBuilder;\n      this.parserUtils = parserUtils;\n      this.nodeForm = this.formBuilder.group({\n        bloodSugarMeasurements: ['', Validators.compose([Validators.required, Validators.pattern('([0-9]*[.,])?[0-9]+')])],\n        mealIndicator: ['none', Validators.required]\n      });\n      this.getRepresentation = () => {\n        const nodeModel = {\n          nodeId: this.node.nodeName,\n          heading: this.node.text,\n          rangeCheck: nodeModel => {\n            nodeModel = Object.assign({\n              nodeModel\n            }, getAllFormValues(this.nodeForm));\n            return this.parserUtils.checkInputRanges(getAllFormFields(this.nodeForm), this.node, nodeModel);\n          }\n        };\n        if ('comment' in this.node) {\n          nodeModel.comment = this.node.comment;\n        }\n        const leftButton = {\n          show: true,\n          text: 'SKIP',\n          nextNodeId: this.node.nextFail\n        };\n        const rightButton = {\n          show: true,\n          text: 'NEXT',\n          nextNodeId: this.node.next,\n          validate: scope => !this.nodeForm.invalid,\n          click: scope => {\n            const bloodSugarMeasurements = this.node.bloodSugarMeasurements;\n            const nodeName = bloodSugarMeasurements.name;\n            const nodeType = bloodSugarMeasurements.type;\n            const formValues = this.nodeForm.value;\n            const mealIndicator = formValues.mealIndicator;\n            nodeModel.mealIndicator = mealIndicator;\n            const timestamp = new Date().toISOString();\n            scope.outputModel[nodeName] = {\n              name: nodeName,\n              type: nodeType,\n              value: {\n                measurements: [{\n                  result: formValues.bloodSugarMeasurements,\n                  isBeforeMeal: mealIndicator === 'bloodSugarManualBeforeMeal' ? true : undefined,\n                  isAfterMeal: mealIndicator === 'bloodSugarManualAfterMeal' ? true : undefined,\n                  isFasting: mealIndicator === 'bloodSugarManualFasting' ? true : undefined,\n                  timeOfMeasurement: timestamp\n                }],\n                transferTime: timestamp\n              }\n            };\n            this.parserUtils.addMeasurementCommentToOutput(scope.outputModel, nodeModel, this.node);\n            this.parserUtils.addManualMeasurementOriginToOutput(scope.outputModel, this.node);\n          }\n        };\n        const representation = {\n          kind: RepresentationType.NODE,\n          nodeModel: nodeModel,\n          leftButton: leftButton,\n          rightButton: rightButton\n        };\n        this.parserUtils.addHelpMenu(this.node, representation);\n        return representation;\n      };\n    }\n    isOffendingValue(valueName) {\n      return this.scope.hasOffendingValue(valueName);\n    }\n    onSubmit() {\n      console.log(this.nodeForm.value);\n    }\n    get bloodSugarMeasurements() {\n      return this.nodeForm.get('bloodSugarMeasurements');\n    }\n    get mealIndicator() {\n      return this.nodeForm.get('mealIndicator');\n    }\n  }\n  BloodSugarMGDLManualDeviceNodeComponent.ɵfac = function BloodSugarMGDLManualDeviceNodeComponent_Factory(t) {\n    return new (t || BloodSugarMGDLManualDeviceNodeComponent)(i0.ɵɵdirectiveInject(i1.NonNullableFormBuilder), i0.ɵɵdirectiveInject(i2.ParserUtilsService));\n  };\n  BloodSugarMGDLManualDeviceNodeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BloodSugarMGDLManualDeviceNodeComponent,\n    selectors: [[\"app-blood-sugar-mgdl-manual-device-node\"]],\n    inputs: {\n      node: \"node\",\n      nodeMap: \"nodeMap\",\n      scope: \"scope\",\n      parameters: \"parameters\"\n    },\n    decls: 33,\n    vars: 21,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"center-div\"], [1, \"line-wrap\", \"text-element\"], [1, \"questionnaire-fields\"], [\"for\", \"count\"], [\"id\", \"count\", \"name\", \"count\", \"type\", \"number\", \"min\", \"0\", \"max\", \"999\", \"step\", \"0.1\", \"autocomplete\", \"off\", \"formControlName\", \"bloodSugarMeasurements\", \"focusOnLoad\", \"\", 3, \"ngClass\"], [\"id\", \"blood-sugar-warning\", \"class\", \"warning\", 4, \"ngIf\"], [1, \"radio-list\"], [1, \"narrow-row\", \"list-unstyled\"], [\"id\", \"beforeMeal\", \"name\", \"mealIndicator\", \"type\", \"radio\", \"formControlName\", \"mealIndicator\", \"value\", \"bloodSugarManualBeforeMeal\"], [\"for\", \"beforeMeal\", 1, \"radio-label\"], [\"id\", \"afterMeal\", \"name\", \"mealIndicator\", \"type\", \"radio\", \"formControlName\", \"mealIndicator\", \"value\", \"bloodSugarManualAfterMeal\"], [\"for\", \"afterMeal\", 1, \"radio-label\"], [\"id\", \"fasting\", \"name\", \"mealIndicator\", \"type\", \"radio\", \"formControlName\", \"mealIndicator\", \"value\", \"bloodSugarManualFasting\"], [\"for\", \"fasting\", 1, \"radio-label\"], [\"id\", \"none\", \"name\", \"mealIndicator\", \"formControlName\", \"mealIndicator\", \"type\", \"radio\", \"value\", \"none\", \"checked\", \"\"], [\"for\", \"none\", 1, \"radio-label\"], [\"id\", \"blood-sugar-warning\", 1, \"warning\"]],\n    template: function BloodSugarMGDLManualDeviceNodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function BloodSugarMGDLManualDeviceNodeComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"h2\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"fieldset\", 3)(5, \"div\")(6, \"label\", 4);\n        i0.ɵɵtext(7);\n        i0.ɵɵpipe(8, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"input\", 5);\n        i0.ɵɵtemplate(10, BloodSugarMGDLManualDeviceNodeComponent_span_10_Template, 3, 3, \"span\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\")(12, \"ul\", 7)(13, \"li\", 8);\n        i0.ɵɵelement(14, \"input\", 9);\n        i0.ɵɵelementStart(15, \"label\", 10);\n        i0.ɵɵtext(16);\n        i0.ɵɵpipe(17, \"translate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"li\", 8);\n        i0.ɵɵelement(19, \"input\", 11);\n        i0.ɵɵelementStart(20, \"label\", 12);\n        i0.ɵɵtext(21);\n        i0.ɵɵpipe(22, \"translate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(23, \"li\", 8);\n        i0.ɵɵelement(24, \"input\", 13);\n        i0.ɵɵelementStart(25, \"label\", 14);\n        i0.ɵɵtext(26);\n        i0.ɵɵpipe(27, \"translate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(28, \"li\", 8);\n        i0.ɵɵelement(29, \"input\", 15);\n        i0.ɵɵelementStart(30, \"label\", 16);\n        i0.ɵɵtext(31);\n        i0.ɵɵpipe(32, \"translate\");\n        i0.ɵɵelementEnd()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.nodeForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.node.text);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(8, 9, \"BLOOD_SUGAR_MG_DL\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(19, _c0, ctx.isOffendingValue(\"bloodSugarMeasurements\")));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isOffendingValue(\"bloodSugarMeasurements\"));\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(17, 11, \"BEFORE_MEAL\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(22, 13, \"AFTER_MEAL\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(27, 15, \"FASTING\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(32, 17, \"NO_MEAL_INDICATOR\"));\n      }\n    },\n    dependencies: [i3.NgClass, i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.RadioControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MinValidator, i1.MaxValidator, i1.FormGroupDirective, i1.FormControlName, i4.FocusOnLoadDirective, i5.TranslatePipe]\n  });\n  return BloodSugarMGDLManualDeviceNodeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}