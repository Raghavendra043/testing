{"ast":null,"code":"import { HttpContext } from '@angular/common/http';\nimport { ERROR_PASS_THROUGH } from '@app/interceptors/interceptor';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { calcUrl } from '@utils/environment-utils';\nimport { lastValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@services/state-services/config.service\";\nimport * as i3 from \"@services/state-services/state-passing.service\";\nexport let Idp2Service = /*#__PURE__*/(() => {\n  class Idp2Service {\n    constructor(http, configService, appContext) {\n      this.http = http;\n      this.configService = configService;\n      this.appContext = appContext;\n      this.jwtHelper = new JwtHelperService();\n      this.permissions = ['write: tokens'];\n      this.appConfig = this.configService.getAppConfig();\n    }\n    getToken(link) {\n      const url = calcUrl(this.appConfig.baseUrl, 'idp2/tokens');\n      const config = {\n        context: new HttpContext().set(ERROR_PASS_THROUGH, true)\n      };\n      const body = {\n        links: {\n          patient: link\n        }\n      };\n      return lastValueFrom(this.http.post(url, body, config));\n    }\n    clinicianHasPermissions() {\n      const token = this.appContext.requestParams.get('authorizationHeader');\n      if (token) {\n        const claims = this.jwtHelper.decodeToken(token);\n        for (const permission of this.permissions) {\n          if (!claims.perm.includes(permission)) {\n            return false;\n          }\n        }\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n  Idp2Service.ɵfac = function Idp2Service_Factory(t) {\n    return new (t || Idp2Service)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ConfigService), i0.ɵɵinject(i3.StatePassingService));\n  };\n  Idp2Service.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Idp2Service,\n    factory: Idp2Service.ɵfac,\n    providedIn: 'root'\n  });\n  return Idp2Service;\n})();","map":null,"metadata":{},"sourceType":"module"}