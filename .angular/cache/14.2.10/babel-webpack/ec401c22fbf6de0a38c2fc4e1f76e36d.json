{"ast":null,"code":"import { Department, Message } from 'src/app/types/messages.type';\nimport { NgForm } from '@angular/forms';\nimport { compareAsc } from 'date-fns';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/state-services/state-passing.service\";\nimport * as i2 from \"src/app/services/rest-api-services/message-threads.service\";\nimport * as i3 from \"@ngx-translate/core\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@services/util-services/util.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"../../header/header/header.component\";\nimport * as i8 from \"@angular/forms\";\nimport * as i9 from \"../../loading/loading-state/loading-state.component\";\nimport * as i10 from \"../../notifications/notifications/notifications.component\";\nimport * as i11 from \"../thread-image/thread-image.component\";\nimport * as i12 from \"../image-picker/image-picker.component\";\nimport * as i13 from \"ngx-moment\";\nimport * as i14 from \"src/app/pipes/clickable-links.pipe\";\nfunction ThreadComponent_div_6_thread_image_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"thread-image\", 21);\n    i0.ɵɵlistener(\"delete\", function ThreadComponent_div_6_thread_image_8_Template_thread_image_delete_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.refresh());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const attachment_r7 = ctx.$implicit;\n    const message_r5 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"fullImageUrl\", attachment_r7.full)(\"thumbnailUrl\", attachment_r7.thumbnail)(\"showDelete\", message_r5.sender.type === \"patient\");\n  }\n}\nconst _c0 = function (a0, a1, a2) {\n  return {\n    from_clinician: a0,\n    from_patient: a1,\n    unread: a2\n  };\n};\nfunction ThreadComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"span\", 18);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"amDateFormat\");\n    i0.ɵɵpipe(4, \"amDateFormat\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\");\n    i0.ɵɵelement(6, \"p\", 19);\n    i0.ɵɵpipe(7, \"clickableLinks\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, ThreadComponent_div_6_thread_image_8_Template, 1, 3, \"thread-image\", 20);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const message_r5 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate1(\"id\", \"message-\", message_r5.timestamp, \"\");\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(16, _c0, message_r5.sender.type === \"organization\", message_r5.sender.type === \"patient\", message_r5.isRead === false));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate3(\" \", message_r5.sender.name, \", \", i0.ɵɵpipeBind2(3, 8, message_r5.timestamp, \"D MMM\"), \", \", i0.ɵɵpipeBind2(4, 11, message_r5.timestamp, \"LT\"), \" \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"innerHtml\", i0.ɵɵpipeBind1(7, 14, message_r5.body), i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", message_r5.links == null ? null : message_r5.links.attachments)(\"ngForTrackBy\", ctx_r0.attachmentByFull);\n  }\n}\nfunction ThreadComponent_i_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 22);\n  }\n}\nfunction ThreadComponent_i_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 23);\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    disabled: a0\n  };\n};\nexport let ThreadComponent = /*#__PURE__*/(() => {\n  class ThreadComponent {\n    constructor(appContext, messageThreads, translate, router, utils) {\n      this.appContext = appContext;\n      this.messageThreads = messageThreads;\n      this.translate = translate;\n      this.router = router;\n      this.utils = utils;\n      this.model = {\n        state: 'Loading',\n        isSending: false,\n        newMessage: '',\n        hasOtherThreads: false,\n        title: '',\n        messages: [],\n        notifications: {\n          info: undefined,\n          error: undefined\n        },\n        filePreviews: []\n      };\n      this.onSuccess = messages => {\n        this.model.state = 'Loaded';\n        this.model.notifications.info = undefined;\n        messages.sort((m1, m2) => {\n          const date1 = new Date(m1.timestamp);\n          const date2 = new Date(m2.timestamp);\n          return compareAsc(date1, date2);\n        });\n        if (this.selectedDepartment.messageThread) {\n          this.messageThreads.markAsRead(this.selectedDepartment.messageThread);\n        }\n        this.model.messages = messages;\n      };\n      this.onError = data => {\n        this.model.notifications.info = undefined;\n        this.model.state = 'Failed';\n        console.error(`Failed to load messages due to error: ${data}`);\n      };\n    }\n    ngOnInit() {\n      var _a;\n      if (!this.appContext.requestParams.containsKey('selectedDepartment')) {\n        void this.router.navigate(['menu']);\n        return;\n      }\n      const selectedDepartment = this.appContext.requestParams.get('selectedDepartment');\n      if (!this.utils.exists(selectedDepartment)) {\n        throw new Error('No selected department');\n      }\n      this.selectedDepartment = selectedDepartment;\n      const hasOtherThreads = (_a = this.appContext.requestParams.get('hasOtherThreads')) !== null && _a !== void 0 ? _a : false;\n      //@ts-ignore\n      this.model = Object.assign(Object.assign({}, this.model), {\n        hasOtherThreads,\n        title: hasOtherThreads ? this.selectedDepartment.name : this.translate.instant('MESSAGES_TITLE')\n      });\n      if (this.selectedDepartment.messageThread) {\n        this.messageThreads.getMessages(this.selectedDepartment.messageThread).then(this.onSuccess);\n      } else {\n        this.model.state = 'Loaded';\n      }\n    }\n    isValid() {\n      return this.model.newMessage && this.model.newMessage.length > 0 || this.model.filePreviews.length > 0;\n    }\n    submit() {\n      this.model.isSending = true;\n      this.model.notifications.error = undefined;\n      this.model.notifications.info = this.translate.instant('MESSAGES_SENDING');\n      const message = {\n        text: this.model.newMessage,\n        sendDate: new Date()\n      };\n      const onMessageCreateSuccess = () => {\n        this.model.newMessage = ''; // To clear up form\n        this.model.filePreviews = [];\n        const tempMessageForView = {\n          body: message.text,\n          timestamp: new Date().toISOString(),\n          sender: {\n            type: 'patient'\n          }\n        };\n        this.model.messages.push(tempMessageForView);\n        this.model.notifications.info = this.translate.instant('MESSAGES_SENT');\n        this.model.isSending = false;\n        setTimeout(() => {\n          this.model.notifications.info = undefined;\n        }, 2000);\n        if (this.selectedDepartment.messageThread) {\n          this.messageThreads.getMessages(this.selectedDepartment.messageThread).then(this.onSuccess);\n        }\n      };\n      const onMessageCreateError = error => {\n        this.model.isSending = false;\n        this.model.notifications.info = undefined;\n        this.model.notifications.error = this.translate.instant('MESSAGES_ERROR_COULD_NOT_SEND');\n        console.error(error);\n        console.error(`Failed to send message`);\n      };\n      const user = this.appContext.getUser();\n      if (!this.utils.exists(user)) {\n        throw new Error('No user currently logged in');\n      }\n      this.messageThreads.create(user, this.selectedDepartment.url, this.model.newMessage, this.model.filePreviews.map(i => i.file)).subscribe({\n        next: onMessageCreateSuccess,\n        error: onMessageCreateError\n      });\n    }\n    refresh() {\n      this.model.messages = [];\n      this.messageThreads.getMessages(this.selectedDepartment.messageThread).then(this.onSuccess);\n    }\n    messageByTimestamp(index, message) {\n      return message.timestamp;\n    }\n    attachmentByFull(index, attachment) {\n      return attachment.full;\n    }\n  }\n  ThreadComponent.ɵfac = function ThreadComponent_Factory(t) {\n    return new (t || ThreadComponent)(i0.ɵɵdirectiveInject(i1.StatePassingService), i0.ɵɵdirectiveInject(i2.MessageThreadsService), i0.ɵɵdirectiveInject(i3.TranslateService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i5.Utils));\n  };\n  ThreadComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ThreadComponent,\n    selectors: [[\"app-thread\"]],\n    viewQuery: function ThreadComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(NgForm, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ngForm = _t.first);\n      }\n    },\n    decls: 23,\n    vars: 30,\n    consts: [[1, \"container\"], [3, \"showBackBtn\", \"showHomeBtn\", \"title\"], [3, \"stateModel\", \"hasNoData\", \"noDataMessage\", \"loadingMessage\", \"failedMessage\"], [3, \"info\", \"error\"], [1, \"content\", 2, \"display\", \"flex\", \"flex-direction\", \"column-reverse\"], [\"id\", \"messages\"], [\"class\", \"message\", 3, \"ngClass\", \"id\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"id\", \"char-count\"], [\"id\", \"write_message\", \"name\", \"newMessageForm\", 3, \"ngSubmit\"], [\"newMessageForm\", \"ngForm\"], [\"type\", \"textarea\", \"name\", \"message\", \"maxlength\", \"1800\", 3, \"placeholder\", \"ngModel\", \"ngModelChange\"], [\"newMessage\", \"ngModel\"], [1, \"image-picker-component\", 3, \"filePreviews\", \"filePreviewsChange\"], [\"id\", \"send-container\", 3, \"ngClass\"], [\"id\", \"submit\", \"type\", \"submit\", 3, \"disabled\"], [\"class\", \"fas fa-paper-plane icon\", 4, \"ngIf\"], [\"class\", \"fa fa-spin fa-spinner fa\", 4, \"ngIf\"], [1, \"message\", 3, \"ngClass\", \"id\"], [1, \"message_header\"], [3, \"innerHtml\"], [3, \"fullImageUrl\", \"thumbnailUrl\", \"showDelete\", \"delete\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"fullImageUrl\", \"thumbnailUrl\", \"showDelete\", \"delete\"], [1, \"fas\", \"fa-paper-plane\", \"icon\"], [1, \"fa\", \"fa-spin\", \"fa-spinner\", \"fa\"]],\n    template: function ThreadComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"header-menu\", 1)(2, \"loading-state\", 2)(3, \"notifications\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4)(5, \"div\", 5);\n        i0.ɵɵtemplate(6, ThreadComponent_div_6_Template, 9, 20, \"div\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"div\", 7)(8, \"span\");\n        i0.ɵɵtext(9);\n        i0.ɵɵpipe(10, \"translate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"form\", 8, 9);\n        i0.ɵɵlistener(\"ngSubmit\", function ThreadComponent_Template_form_ngSubmit_11_listener() {\n          return ctx.submit();\n        });\n        i0.ɵɵelementStart(13, \"textarea\", 10, 11);\n        i0.ɵɵlistener(\"ngModelChange\", function ThreadComponent_Template_textarea_ngModelChange_13_listener($event) {\n          return ctx.model.newMessage = $event;\n        });\n        i0.ɵɵpipe(15, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"image-picker\", 12);\n        i0.ɵɵlistener(\"filePreviewsChange\", function ThreadComponent_Template_image_picker_filePreviewsChange_16_listener($event) {\n          return ctx.model.filePreviews = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 13)(18, \"button\", 14);\n        i0.ɵɵtemplate(19, ThreadComponent_i_19_Template, 1, 0, \"i\", 15);\n        i0.ɵɵtemplate(20, ThreadComponent_i_20_Template, 1, 0, \"i\", 16);\n        i0.ɵɵtext(21);\n        i0.ɵɵpipe(22, \"translate\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"showBackBtn\", true)(\"showHomeBtn\", ctx.model.hasOtherThreads)(\"title\", ctx.model.title);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"stateModel\", ctx.model.state)(\"hasNoData\", ctx.model.messages.length === 0)(\"noDataMessage\", \"MESSAGES_NO_MESSAGES\")(\"loadingMessage\", \"MESSAGES_LOADING\")(\"failedMessage\", \"MESSAGES_FAILED\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"info\", ctx.model.notifications.info)(\"error\", ctx.model.notifications.error);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.model.messages)(\"ngForTrackBy\", ctx.messageByTimestamp);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate2(\" \", 1800 - ctx.model.newMessage.length, \" \", i0.ɵɵpipeBind1(10, 22, \"MESSAGES_CHARACTERS_LEFT\"), \" \");\n        i0.ɵɵadvance(4);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(15, 24, \"MESSAGES_FORM_MESSAGE\"));\n        i0.ɵɵproperty(\"ngModel\", ctx.model.newMessage);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"filePreviews\", ctx.model.filePreviews);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(28, _c1, !ctx.isValid()));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", !ctx.isValid());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.model.isSending);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.model.isSending);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(22, 26, \"MESSAGES_SEND\"), \" \");\n      }\n    },\n    dependencies: [i6.NgClass, i6.NgForOf, i6.NgIf, i7.HeaderComponent, i8.ɵNgNoValidate, i8.DefaultValueAccessor, i8.NgControlStatus, i8.NgControlStatusGroup, i8.MaxLengthValidator, i8.NgModel, i8.NgForm, i9.LoadingStateComponent, i10.NotificationsComponent, i11.ThreadImageComponent, i12.ImagePickerComponent, i3.TranslatePipe, i13.DateFormatPipe, i14.ClickableLinksPipe]\n  });\n  return ThreadComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}