{"ast":null,"code":"import { ComponentParameters, NodeType } from 'src/app/types/nodes.type';\nimport { RepresentationType } from 'src/app/types/parser.type';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ngx-translate/core\";\nimport * as i3 from \"../../../header/header/header.component\";\nexport let UnsupportedNodeComponent = /*#__PURE__*/(() => {\n  class UnsupportedNodeComponent {\n    constructor(router, translate) {\n      this.router = router;\n      this.translate = translate;\n      this.title = 'Oops...';\n      this.error = '';\n    }\n    getRepresentation() {\n      var _a, _b, _c, _d, _e;\n      if (((_a = this.parameters) === null || _a === void 0 ? void 0 : _a.nodeTypeName) && ((_b = this.parameters) === null || _b === void 0 ? void 0 : _b.noNative)) {\n        this.error = this.translate.instant('NO_NATIVE_LAYER').replace('{0}', this.parameters.nodeTypeName);\n      } else if (((_c = this.parameters) === null || _c === void 0 ? void 0 : _c.type) && ((_d = this.parameters) === null || _d === void 0 ? void 0 : _d.nodeTypeName)) {\n        switch ((_e = this.parameters) === null || _e === void 0 ? void 0 : _e.type) {\n          case NodeType.AUTOMATIC:\n            {\n              this.error = this.translate.instant('AUTOMATIC_DEVICE_NOT_SUPPORTED').replace('{0}', this.parameters.nodeTypeName);\n              break;\n            }\n          case NodeType.MANUAL:\n            {\n              this.error = this.translate.instant('MANUAL_DEVICE_NOT_SUPPORTED').replace('{0}', this.parameters.nodeTypeName);\n              break;\n            }\n          case NodeType.UNKNOWN:\n          default:\n            {\n              // Unknown\n              this.error = this.translate.instant('DEVICE_NOT_SUPPORTED').replace('{0}', this.parameters.nodeTypeName);\n              break;\n            }\n        }\n      } else {\n        this.error = `${this.translate.instant('UNKNOWN')} ${this.translate.instant('ERROR_TITLE')}`;\n      }\n      const representation = {\n        kind: RepresentationType.UNSUPPORTED,\n        nodeModel: {\n          nodeId: 'unsupported-node'\n        },\n        centerButton: {\n          show: true,\n          text: 'OK',\n          click: () => {\n            this.router.navigate(['/menu']);\n          },\n          validate: () => {\n            return true;\n          },\n          nextNodeId: RepresentationType.UNSUPPORTED\n        }\n      };\n      return representation;\n    }\n  }\n  UnsupportedNodeComponent.ɵfac = function UnsupportedNodeComponent_Factory(t) {\n    return new (t || UnsupportedNodeComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.TranslateService));\n  };\n  UnsupportedNodeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UnsupportedNodeComponent,\n    selectors: [[\"app-unsupported-node\"]],\n    inputs: {\n      node: \"node\",\n      nodeMap: \"nodeMap\",\n      scope: \"scope\",\n      parameters: \"parameters\"\n    },\n    decls: 5,\n    vars: 2,\n    consts: [[1, \"container\"], [3, \"title\"], [1, \"center-div\"], [1, \"line-wrap\", \"text-element\"]],\n    template: function UnsupportedNodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"header-menu\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2)(3, \"h2\", 3);\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"title\", ctx.title);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.error);\n      }\n    },\n    dependencies: [i3.HeaderComponent]\n  });\n  return UnsupportedNodeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}