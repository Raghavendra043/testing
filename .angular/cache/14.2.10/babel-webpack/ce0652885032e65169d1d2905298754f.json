{"ast":null,"code":"import { ComponentFactoryResolver } from '@angular/core';\nimport { NodeDirective } from 'src/app/directives/node.directive';\nimport { RepresentationType } from 'src/app/types/parser.type';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/state-services/state-passing.service\";\nimport * as i2 from \"src/app/services/util-services/util.service\";\nimport * as i3 from \"src/app/services/rest-api-services/questionnaires.service\";\nimport * as i4 from \"src/app/services/native-services/native.service\";\nimport * as i5 from \"@ngx-translate/core\";\nimport * as i6 from \"@angular/router\";\nimport * as i7 from \"src/app/services/parser-services/nodes-parser.service\";\nimport * as i8 from \"@angular/platform-browser\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"../../header/header/header.component\";\nimport * as i11 from \"@angular/forms\";\nimport * as i12 from \"../../loading/loading-state/loading-state.component\";\nimport * as i13 from \"src/app/directives/node.directive\";\nfunction QuestionnaireComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\", 16);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"h3\", 16);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 2, \"OPENTELE_RUNTIME_ERROR\"), \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.model.error, \" \");\n  }\n}\nfunction QuestionnaireComponent_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 17);\n    i0.ɵɵlistener(\"click\", function QuestionnaireComponent_button_7_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.model.showHideHelpMenu());\n    });\n    i0.ɵɵelement(1, \"i\", 18);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction QuestionnaireComponent_ng_template_9_Template(rf, ctx) {}\nfunction QuestionnaireComponent_div_10_object_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"object\", 27);\n  }\n}\nfunction QuestionnaireComponent_div_10_img_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 28);\n    i0.ɵɵpipe(1, \"translate\");\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵpropertyInterpolate(\"alt\", i0.ɵɵpipeBind1(1, 2, \"QUESTIONNAIRE_HELP_IMAGE_ARIA\"));\n    i0.ɵɵproperty(\"src\", ctx_r12.model.helpMenu.imageSrc, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction QuestionnaireComponent_div_10_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 29);\n  }\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r13.model.helpMenu.text, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction QuestionnaireComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 19)(1, \"div\", 20)(2, \"h1\", 21);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, QuestionnaireComponent_div_10_object_5_Template, 1, 0, \"object\", 22);\n    i0.ɵɵtemplate(6, QuestionnaireComponent_div_10_img_6_Template, 2, 4, \"img\", 23);\n    i0.ɵɵtemplate(7, QuestionnaireComponent_div_10_div_7_Template, 1, 1, \"div\", 24);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 12)(9, \"button\", 25);\n    i0.ɵɵlistener(\"click\", function QuestionnaireComponent_div_10_Template_button_click_9_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.model.showHideHelpMenu());\n    });\n    i0.ɵɵtext(10);\n    i0.ɵɵpipe(11, \"translate\");\n    i0.ɵɵelement(12, \"i\", 26);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 5, \"HELP_INFO\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r4.model.helpMenu == null ? null : ctx_r4.model.helpMenu.image) && (ctx_r4.model.helpMenu == null ? null : ctx_r4.model.helpMenu.imageLoaded) === false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r4.model.helpMenu == null ? null : ctx_r4.model.helpMenu.image) && (ctx_r4.model.helpMenu == null ? null : ctx_r4.model.helpMenu.imageLoaded) === true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.model == null ? null : ctx_r4.model.helpMenu == null ? null : ctx_r4.model.helpMenu.text);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(11, 7, \"OK\"), \" \");\n  }\n}\nfunction QuestionnaireComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 30)(1, \"div\", 31)(2, \"div\")(3, \"h1\", 32);\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"h1\");\n    i0.ɵɵtext(7);\n    i0.ɵɵpipe(8, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 33)(10, \"textarea\", 34, 35);\n    i0.ɵɵlistener(\"ngModelChange\", function QuestionnaireComponent_div_11_Template_textarea_ngModelChange_10_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.model.commentPrompt.text = $event);\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"div\", 12)(13, \"button\", 36);\n    i0.ɵɵlistener(\"click\", function QuestionnaireComponent_div_11_Template_button_click_13_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.model.commentPrompt.confirm());\n    });\n    i0.ɵɵtext(14);\n    i0.ɵɵpipe(15, \"translate\");\n    i0.ɵɵelement(16, \"i\", 26);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 4, \"COMMENT\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(8, 6, \"COMMENT_PROMPT_INFO\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngModel\", ctx_r5.model.commentPrompt.text);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(15, 8, \"OK\"), \" \");\n  }\n}\nfunction QuestionnaireComponent_button_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 37);\n    i0.ɵɵlistener(\"click\", function QuestionnaireComponent_button_13_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.model.leftButton.click == null ? null : ctx_r20.model.leftButton.click(ctx_r20));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelement(3, \"i\", 38);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r6.model.leftButton.validate && !ctx_r6.model.leftButton.validate(ctx_r6));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 2, ctx_r6.model.leftButton.text), \" \");\n  }\n}\nfunction QuestionnaireComponent_button_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 39);\n    i0.ɵɵlistener(\"click\", function QuestionnaireComponent_button_14_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r22.model.rightButton.click == null ? null : ctx_r22.model.rightButton.click(ctx_r22));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelement(3, \"i\", 40);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r7.model.centerButton.validate && !ctx_r7.model.centerButton.validate(ctx_r7));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 2, ctx_r7.model.centerButton.text), \" \");\n  }\n}\nfunction QuestionnaireComponent_button_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 41);\n    i0.ɵɵlistener(\"click\", function QuestionnaireComponent_button_15_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r24.model.rightButton.click == null ? null : ctx_r24.model.rightButton.click(ctx_r24));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelement(3, \"i\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r8.model.rightButton.validate && !ctx_r8.model.rightButton.validate(ctx_r8) || ctx_r8.model.confirmTimeout);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 2, ctx_r8.model.rightButton.text), \" \");\n  }\n}\nexport let QuestionnaireComponent = /*#__PURE__*/(() => {\n  class QuestionnaireComponent {\n    constructor(appContext, utils, questionnaires, native, translate, router, nodesParserService, componentFactoryResolver, sanitizer) {\n      this.appContext = appContext;\n      this.utils = utils;\n      this.questionnaires = questionnaires;\n      this.native = native;\n      this.translate = translate;\n      this.router = router;\n      this.nodesParserService = nodesParserService;\n      this.componentFactoryResolver = componentFactoryResolver;\n      this.sanitizer = sanitizer;\n      this.model = {\n        title: '',\n        state: 'Loading',\n        error: undefined,\n        submitNodeForm: () => void 0,\n        commentPrompt: {\n          visible: false,\n          confirm: () => void 0\n        },\n        showHelpMenuIcon: false,\n        showHideHelpMenu: () => void 0,\n        leftButton: {\n          show: false,\n          text: '',\n          nextNodeId: '',\n          validate: () => false,\n          click: () => void 0\n        },\n        centerButton: {\n          show: false,\n          text: '',\n          nextNodeId: '',\n          validate: () => false,\n          click: () => void 0\n        },\n        rightButton: {\n          show: false,\n          text: '',\n          nextNodeId: '',\n          validate: () => false,\n          click: () => void 0\n        }\n      };\n      this.outputModel = {};\n      this.nodeMap = {};\n      this.nodeHistory = [];\n      this.representation = {\n        kind: RepresentationType.NODE,\n        nodeModel: {\n          nodeId: 'placeholder'\n        }\n      };\n      this.loadComponent = (nextNodeId, nodeMap) => {\n        const {\n          nodeToParse,\n          nodeTypeName\n        } = this.nodesParserService.getNode(nextNodeId, nodeMap);\n        const nodeItem = this.nodesParserService.getComponent(nodeTypeName, nodeToParse[nodeTypeName], nodeMap, this);\n        const viewContainerRef = this.nodeHost.viewContainerRef;\n        viewContainerRef.clear();\n        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(nodeItem.component);\n        const componentRef = viewContainerRef.createComponent(componentFactory);\n        componentRef.instance.node = nodeItem.node;\n        componentRef.instance.nodeMap = nodeItem.nodeMap;\n        componentRef.instance.scope = nodeItem.scope;\n        componentRef.instance.parameters = nodeItem.parameters;\n        this.nodeForm = componentRef.instance.nodeForm;\n        const representation = componentRef.instance.getRepresentation();\n        if (representation.kind === RepresentationType.SKIP) {\n          return this.loadComponent(representation.nextNodeId, this.nodeMap);\n        }\n        this.representation = representation;\n        return representation;\n      };\n      this.forEachButtonDo = action => {\n        ['leftButton', 'centerButton', 'rightButton'].forEach(action);\n      };\n      this.setInitialNodeState = () => {\n        this.forEachButtonDo(buttonName => {\n          const button = {\n            show: false,\n            text: '',\n            nextNodeId: '',\n            validate: () => true,\n            click: () => ({})\n          };\n          this.model[buttonName] = button;\n        });\n        if (this.utils.exists(this.nodeForm)) {\n          this.nodeForm.markAsPristine();\n        }\n      };\n      this.collectOutputs = () => {\n        const outputs = [];\n        for (const nodeOutput in this.outputModel) {\n          if (nodeOutput in this.outputModel) {\n            outputs.push(this.outputModel[nodeOutput]);\n          }\n        }\n        return outputs;\n      };\n      this.renderNode = (representation, nodeMap) => {\n        const wrapValidate = validate => {\n          return () => {\n            if (this.utils.exists(validate)) {\n              return validate(this);\n            } else {\n              return true;\n            }\n          };\n        };\n        const clickButton = (button, buttonRepresentation) => {\n          const clickAction = buttonRepresentation.click;\n          const validate = buttonRepresentation.validate;\n          const comment = 'nodeModel' in this.representation ? this.representation.nodeModel.comment : undefined;\n          return () => {\n            if (!this.utils.exists(validate) || this.utils.exists(validate) && validate(this)) {\n              const requestDelivered = this.native.removeDeviceListeners();\n              if (!requestDelivered) {\n                console.log(\"Couldn't remove device listener due to missing native layer\");\n              }\n              const nodeModel = representation.nodeModel;\n              const hasUnconfirmedOffendingValues = () => {\n                if (button == 'rightButton' && !this.utils.exists(nodeModel.offendingValues)) {\n                  // First time patient clicks 'right (next) button' -> calculate offending values\n                  // if non-empty show warning otherwise continue.\n                  if (this.utils.exists(nodeModel.rangeCheck)) {\n                    nodeModel.offendingValues = nodeModel.rangeCheck(representation.nodeModel);\n                    return nodeModel.offendingValues.length > 0;\n                  } else {\n                    nodeModel.offendingValues = [];\n                    return false;\n                  }\n                } else {\n                  // Second time patient clicks 'right (confirm) button' -> continue\n                  nodeModel.offendingValues = [];\n                  return false;\n                }\n              };\n              const continuation = () => {\n                if (clickAction) {\n                  clickAction(this);\n                }\n                nodeModel.offendingValues = undefined;\n                const nextNodeId = this.model[button].nextNodeId;\n                this.nextNode(nextNodeId, nodeMap);\n              };\n              if (hasUnconfirmedOffendingValues()) {\n                this.model.rightButton.text = this.translate.instant('CONFIRM');\n                this.model.confirmTimeout = true;\n                const CONFIRM_TIMEOUT_MILLIS = 3000;\n                setTimeout(() => {\n                  this.model.confirmTimeout = false;\n                }, CONFIRM_TIMEOUT_MILLIS);\n              } else if (this.utils.exists(comment)) {\n                this.renderCommentPrompt(comment, continuation);\n              } else {\n                continuation();\n              }\n            }\n          };\n        };\n        const updateButtonModel = buttonName => {\n          this.model[buttonName].show = true;\n          this.model[buttonName].text = this.translate.instant(this.representation[buttonName].text);\n          this.model[buttonName].nextNodeId = this.representation[buttonName].nextNodeId;\n          this.model[buttonName].validate = wrapValidate(this.representation[buttonName].validate);\n          this.model[buttonName].click = clickButton(buttonName, this.representation[buttonName]);\n        };\n        this.forEachButtonDo(buttonName => {\n          if (buttonName in this.representation) {\n            updateButtonModel(buttonName);\n          }\n        });\n        this.model.submitNodeForm = () => {\n          if (this.model.rightButton.show && this.model.rightButton.click) {\n            this.model.rightButton.click(this);\n          } else if (this.model.centerButton.show && this.model.centerButton.click) {\n            this.model.centerButton.click(this);\n          }\n        };\n        const renderHelpMenu = model => {\n          if ('helpMenu' in this.representation) {\n            model.showHelpMenuIcon = true;\n            const helpMenu = this.representation.helpMenu;\n            model.helpMenu = helpMenu;\n            model.helpMenu.visible = false;\n            model.helpMenu.imageLoaded = false;\n            if (helpMenu.image !== undefined) {\n              this.questionnaires.getHelpImage({\n                imageUrl: helpMenu.image\n              }).then(imageData => {\n                if (model.helpMenu !== undefined) {\n                  model.helpMenu.imageLoaded = true;\n                  model.helpMenu.imageSrc = this.sanitizer.bypassSecurityTrustResourceUrl(`data:image/png;charset=utf-8;base64,${imageData}`);\n                }\n              }).catch(error => {\n                console.error(`Could not load help image due to error: ${error}`);\n              });\n            }\n          } else {\n            model.showHelpMenuIcon = false;\n            delete model.helpMenu;\n          }\n          model.showHideHelpMenu = () => {\n            if (this.utils.exists(model.helpMenu) && model.helpMenu.visible) {\n              model.helpMenu.visible = false;\n            } else {\n              model.helpMenu.visible = true;\n            }\n          };\n        };\n        renderHelpMenu(this.model);\n        console.log('Done renderNode');\n        console.log(this.model);\n      };\n      this.refreshModel = (nextNodeId, nodeMap) => {\n        console.log('refreshModel');\n        const representation = this.loadComponent(nextNodeId, nodeMap);\n        this.setInitialNodeState();\n        if (representation.kind == RepresentationType.END) {\n          const questionnaireState = {\n            outputs: this.collectOutputs(),\n            questionnaire: this.currentQuestionnaire,\n            questionnaireRef: this.questionnaireRef,\n            nodeHistory: this.nodeHistory,\n            outputModel: this.outputModel\n          };\n          this.appContext.requestParams.set(QUESTIONNAIRE_STATE, questionnaireState);\n          const id = this.appContext.requestParams.get('questionnaireId');\n          this.router.navigate(['questionnaires', id, 'send_reply']);\n        } else {\n          this.renderNode(representation, nodeMap);\n        }\n      };\n      this.renderCommentPrompt = (comment, continuation) => {\n        this.model.commentPrompt = {\n          visible: true,\n          text: '',\n          confirm: () => {\n            var _a;\n            let commentText = (_a = this.model.commentPrompt) === null || _a === void 0 ? void 0 : _a.text;\n            if (this.utils.exists(commentText)) {\n              commentText = commentText.trim();\n            } else {\n              commentText = '';\n            }\n            comment.text = commentText;\n            this.model.commentPrompt.visible = false;\n            continuation();\n          }\n        };\n      };\n      /**\r\n       * Called when going back in a questionnaire. Refreshes the questionnaire state\r\n       * based on the `nodeHistory` recorded.\r\n       *\r\n       */\n      this.refreshFromHistory = nodeMap => {\n        const nodeHistory = this.nodeHistory;\n        this.clearOutputFromHistory(nodeHistory, this.outputModel, nodeMap);\n        // Go back to previous node / page\n        if (nodeHistory.length === 0) {\n          globalThis.history.back();\n        } else {\n          const previousNodeId = nodeHistory[nodeHistory.length - 1];\n          this.refreshModel(previousNodeId, nodeMap);\n        }\n      };\n      /**\r\n       * Wipes any variables set in the `outputModel` by any `AssignmentNode`\r\n       * variables that have been set between now and the previous interactive\r\n       * node.\r\n       *\r\n       * Has no return value as it mutates the `outputModel`.\r\n       */\n      this.clearOutputFromHistory = (nodeHistory, outputModel, nodeMap) => {\n        const previousNodeId = nodeHistory.pop();\n        if (!this.utils.exists(previousNodeId)) {\n          return;\n        }\n        let candidateNode = nodeMap[previousNodeId];\n        while ('AssignmentNode' in candidateNode) {\n          const assignmentNode = candidateNode.AssignmentNode;\n          delete outputModel[assignmentNode.variable.name];\n          candidateNode = nodeMap[assignmentNode.next];\n        }\n      };\n      /**\r\n       * Used for checking whether an entered input value is outside of the normal\r\n       * range (if specified).\r\n       */\n      this.hasOffendingValue = valueName => {\n        return this.utils.exists(this.representation.nodeModel.offendingValues) && this.representation.nodeModel.offendingValues.indexOf(valueName) >= 0;\n      };\n      this.nextNode = (nodeId, nodeMap) => {\n        this.nodeHistory.push(nodeId);\n        if (nodeId === RepresentationType.UNSUPPORTED) {\n          console.debug(`NodeId specified as ${RepresentationType.UNSUPPORTED}. Returning`);\n          return;\n        } else {\n          this.refreshModel(nodeId, nodeMap);\n        }\n      };\n      this.toNodeMap = nodes => {\n        const getFirstKeyFromLiteral = literal => {\n          for (const key in literal) {\n            if (Object.prototype.hasOwnProperty.call(literal, key)) {\n              return key;\n            }\n          }\n          return undefined;\n        };\n        const nodeMap = {};\n        nodes.forEach(node => {\n          const key = getFirstKeyFromLiteral(node);\n          if (key !== undefined) {\n            nodeMap[node[key].nodeName] = node;\n          }\n        });\n        return nodeMap;\n      };\n      this.onSuccess = questionnaire => {\n        this.model.state = 'Loaded';\n        this.currentQuestionnaire = questionnaire;\n        this.model.title = this.currentQuestionnaire.name;\n        this.nodeMap = this.toNodeMap(questionnaire.nodes);\n        const startNode = questionnaire.startNode;\n        this.nodesParserService.validate(this.nodeMap);\n        if (this.appContext.requestParams.containsKey(QUESTIONNAIRE_STATE)) {\n          const state = this.appContext.requestParams.getAndClear(QUESTIONNAIRE_STATE);\n          this.nodeHistory = state.nodeHistory;\n          this.outputModel = state.outputModel;\n          this.refreshFromHistory(this.nodeMap);\n        } else {\n          this.nextNode(startNode, this.nodeMap);\n        }\n      };\n      this.onError = data => {\n        this.model.state = 'Failed';\n        console.error(`Failed to load questionnaire due to error: ${data}`);\n        this.model.error = data.message;\n        this.model.centerButton = {\n          show: true,\n          text: 'OK',\n          validate: () => {\n            return true;\n          }\n        };\n        this.model.rightButton.click = () => {\n          this.router.navigate(['/menu']);\n        };\n      };\n      this.goBack = () => {\n        const requestDelivered = this.native.removeDeviceListeners();\n        if (!requestDelivered) {\n          console.debug(\"Couldn't remove device listener due to missing native layer\");\n        }\n        this.refreshFromHistory(this.nodeMap);\n      };\n      this.goHome = () => {\n        const requestDelivered = this.native.removeDeviceListeners();\n        if (!requestDelivered) {\n          console.debug(\"Couldn't remove device listener due to missing native layer\");\n        }\n        this.router.navigate(['/menu']);\n      };\n    }\n    ngOnInit() {\n      if (!this.appContext.requestParams.containsKey(SELECTED_QUESTIONNAIRE)) {\n        void this.router.navigate(['/menu']);\n        return;\n      }\n      this.questionnaireRef = this.appContext.requestParams.getAndClear(SELECTED_QUESTIONNAIRE);\n      this.questionnaires.get(this.questionnaireRef).then(result => this.onSuccess(result)).catch(error => this.onError(error));\n    }\n  }\n  QuestionnaireComponent.ɵfac = function QuestionnaireComponent_Factory(t) {\n    return new (t || QuestionnaireComponent)(i0.ɵɵdirectiveInject(i1.StatePassingService), i0.ɵɵdirectiveInject(i2.Utils), i0.ɵɵdirectiveInject(i3.QuestionnairesService), i0.ɵɵdirectiveInject(i4.NativeService), i0.ɵɵdirectiveInject(i5.TranslateService), i0.ɵɵdirectiveInject(i6.Router), i0.ɵɵdirectiveInject(i7.NodesParserService), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i8.DomSanitizer));\n  };\n  QuestionnaireComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: QuestionnaireComponent,\n    selectors: [[\"app-questionnaire\"]],\n    viewQuery: function QuestionnaireComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(NodeDirective, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nodeHost = _t.first);\n      }\n    },\n    decls: 16,\n    vars: 17,\n    consts: [[1, \"container\"], [3, \"showBackBtn\", \"onBackFun\", \"showHomeBtn\", \"onHomeFun\", \"title\"], [3, \"stateModel\", \"hasNoData\", \"noDataMessage\", \"loadingMessage\", \"failedMessage\"], [1, \"content\"], [4, \"ngIf\"], [\"id\", \"nodeForm\", \"name\", \"nodeForm\", 1, \"questionnaire_form\", 3, \"ngSubmit\"], [\"nodeForm\", \"ngForm\"], [\"id\", \"help-button\", \"type\", \"button\", \"class\", \"button help-button\", 3, \"click\", 4, \"ngIf\"], [\"id\", \"questionnaire_content\", 1, \"questionnaire_content\"], [\"nodeHost\", \"\"], [\"id\", \"help-menu\", \"class\", \"overlay space_between\", 4, \"ngIf\"], [\"id\", \"comment-prompt\", \"class\", \"overlay space_between\", 4, \"ngIf\"], [\"id\", \"footer\", 1, \"flex-column\"], [\"id\", \"question-left-button\", \"class\", \"footer-button left-button\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [\"id\", \"question-center-button\", \"class\", \"footer-button center-button\", \"type\", \"submit\", \"form\", \"nodeForm\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [\"id\", \"question-right-button\", \"class\", \"footer-button right-button\", \"type\", \"submit\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [1, \"line-wrap\", \"text-element\"], [\"id\", \"help-button\", \"type\", \"button\", 1, \"button\", \"help-button\", 3, \"click\"], [\"aria-hidden\", \"true\", 1, \"fal\", \"fa-question-circle\"], [\"id\", \"help-menu\", 1, \"overlay\", \"space_between\"], [\"id\", \"help-content\"], [\"id\", \"help-heading\"], [\"data\", \"../../images/image-loader.svg\", \"type\", \"image/svg+xml\", 4, \"ngIf\"], [\"id\", \"help-image\", 3, \"src\", \"alt\", 4, \"ngIf\"], [\"id\", \"help-text\", \"class\", \"center-div\", 3, \"innerHTML\", 4, \"ngIf\"], [\"id\", \"help-ok-button\", \"type\", \"button\", 1, \"footer-button\", \"center-button\", 3, \"click\"], [\"aria-hidden\", \"true\", 1, \"icon\", \"fas\", \"fa-check-circle\"], [\"data\", i0.ɵɵtrustConstantResourceUrl`../../images/image-loader.svg`, \"type\", \"image/svg+xml\"], [\"id\", \"help-image\", 3, \"src\", \"alt\"], [\"id\", \"help-text\", 1, \"center-div\", 3, \"innerHTML\"], [\"id\", \"comment-prompt\", 1, \"overlay\", \"space_between\"], [\"id\", \"comment-content\"], [\"id\", \"comment-heading\"], [\"id\", \"comment-field\"], [\"id\", \"measurement-comment\", \"name\", \"measurement-comment\", \"max-length\", \"300\", 3, \"ngModel\", \"ngModelChange\"], [\"comment\", \"ngModel\"], [\"id\", \"comment-ok-button\", \"type\", \"button\", 1, \"footer-button\", \"center-button\", 3, \"click\"], [\"id\", \"question-left-button\", 1, \"footer-button\", \"left-button\", 3, \"disabled\", \"click\"], [\"aria-hidden\", \"true\", 1, \"icon\", \"fas\", \"fa-times-circle\"], [\"id\", \"question-center-button\", \"type\", \"submit\", \"form\", \"nodeForm\", 1, \"footer-button\", \"center-button\", 3, \"disabled\", \"click\"], [\"aria-hidden\", \"true\", 1, \"icon\", \"fas\", \"fa-arrow-circle-right\"], [\"id\", \"question-right-button\", \"type\", \"submit\", 1, \"footer-button\", \"right-button\", 3, \"disabled\", \"click\"]],\n    template: function QuestionnaireComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"header-menu\", 1)(2, \"loading-state\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵtemplate(4, QuestionnaireComponent_div_4_Template, 6, 4, \"div\", 4);\n        i0.ɵɵelementStart(5, \"form\", 5, 6);\n        i0.ɵɵlistener(\"ngSubmit\", function QuestionnaireComponent_Template_form_ngSubmit_5_listener() {\n          return ctx.model.submitNodeForm();\n        });\n        i0.ɵɵtemplate(7, QuestionnaireComponent_button_7_Template, 2, 0, \"button\", 7);\n        i0.ɵɵelementStart(8, \"div\", 8);\n        i0.ɵɵtemplate(9, QuestionnaireComponent_ng_template_9_Template, 0, 0, \"ng-template\", 9);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(10, QuestionnaireComponent_div_10_Template, 13, 9, \"div\", 10);\n        i0.ɵɵtemplate(11, QuestionnaireComponent_div_11_Template, 17, 10, \"div\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 12);\n        i0.ɵɵtemplate(13, QuestionnaireComponent_button_13_Template, 4, 4, \"button\", 13);\n        i0.ɵɵtemplate(14, QuestionnaireComponent_button_14_Template, 4, 4, \"button\", 14);\n        i0.ɵɵtemplate(15, QuestionnaireComponent_button_15_Template, 4, 4, \"button\", 15);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"showBackBtn\", true)(\"onBackFun\", ctx.goBack)(\"showHomeBtn\", true)(\"onHomeFun\", ctx.goHome)(\"title\", ctx.model.title);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"stateModel\", ctx.model.state)(\"hasNoData\", false)(\"noDataMessage\", \"\")(\"loadingMessage\", \"QUESTIONNAIRE_LOADING\")(\"failedMessage\", \"QUESTIONNAIRE_FAILED\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.model.state === \"Failed\" && ctx.model.error);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.model.showHelpMenuIcon);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.model == null ? null : ctx.model.helpMenu == null ? null : ctx.model.helpMenu.visible);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.model == null ? null : ctx.model.commentPrompt == null ? null : ctx.model.commentPrompt.visible);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.model.leftButton.show);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.model.centerButton.show);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.model.rightButton.show);\n      }\n    },\n    dependencies: [i9.NgIf, i10.HeaderComponent, i11.ɵNgNoValidate, i11.DefaultValueAccessor, i11.NgControlStatus, i11.NgControlStatusGroup, i11.NgModel, i11.NgForm, i12.LoadingStateComponent, i13.NodeDirective, i5.TranslatePipe]\n  });\n  return QuestionnaireComponent;\n})();\nconst QUESTIONNAIRE_STATE = 'questionnaireState';\nconst SELECTED_QUESTIONNAIRE = 'selectedQuestionnaire';","map":null,"metadata":{},"sourceType":"module"}