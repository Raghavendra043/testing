{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport { ComponentParameters } from \"src/app/types/nodes.type\";\nimport { getAllFormFields, getAllFormValues, positiveIntegerRegex } from \"src/app/components/questionnaire-nodes/node-form-utils\";\nimport { RepresentationType } from \"src/app/types/parser.type\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/parser-services/parser-utils.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"src/app/directives/focus-on-load.directive\";\nimport * as i5 from \"@ngx-translate/core\";\nfunction SaturationWithoutPulseManualDeviceNodeComponent_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, \"VALUE_INCORRECT_WARNING\"));\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    warning: a0\n  };\n};\nexport let SaturationWithoutPulseManualDeviceNodeComponent = /*#__PURE__*/(() => {\n  class SaturationWithoutPulseManualDeviceNodeComponent {\n    constructor(formBuilder, parserUtils) {\n      this.formBuilder = formBuilder;\n      this.parserUtils = parserUtils;\n      this.nodeForm = this.formBuilder.group({\n        saturation: [\"\", Validators.compose([Validators.required, Validators.pattern(positiveIntegerRegex)])]\n      });\n    }\n    isOffendingValue(valueName) {\n      return this.scope.hasOffendingValue(valueName);\n    }\n    getRepresentation() {\n      const validate = scope => {\n        return !this.nodeForm.invalid;\n      };\n      const generateRepresentation = (node, nodeModel) => {\n        const clickAction = scope => {\n          const measurements = [\"saturation\"];\n          this.parserUtils.addMeasurementsToOutput(scope.outputModel, this.nodeForm.value, node, measurements);\n          this.parserUtils.addMeasurementCommentToOutput(scope.outputModel, nodeModel, node);\n          this.parserUtils.addManualMeasurementOriginToOutput(scope.outputModel, node);\n        };\n        const leftButton = {\n          show: true,\n          text: \"SKIP\",\n          nextNodeId: node.nextFail\n        };\n        const rightButton = {\n          show: true,\n          text: \"NEXT\",\n          nextNodeId: node.next,\n          validate: validate,\n          click: clickAction\n        };\n        const representation = {\n          kind: RepresentationType.NODE,\n          nodeModel: nodeModel,\n          leftButton: leftButton,\n          rightButton: rightButton\n        };\n        return representation;\n      };\n      const parseNode = (node, _nodeMap, _outputModel) => {\n        const nodeModel = {\n          nodeId: node.nodeName,\n          heading: node.text,\n          info: \"CONNECTING\",\n          rangeCheck: nodeModel => {\n            nodeModel = Object.assign({\n              nodeModel\n            }, getAllFormValues(this.nodeForm));\n            return this.parserUtils.checkInputRanges(getAllFormFields(this.nodeForm), this.node, nodeModel);\n          }\n        };\n        if (\"comment\" in node) {\n          nodeModel.comment = node.comment;\n        }\n        const representation = generateRepresentation(node, nodeModel);\n        this.parserUtils.addHelpMenu(node, representation);\n        return representation;\n      };\n      return parseNode(this.node, this.nodeMap, this.scope.outputModel);\n    }\n    onSubmit() {\n      console.log(this.nodeForm.value);\n    }\n    get saturation() {\n      return this.nodeForm.get(\"saturation\");\n    }\n  }\n  SaturationWithoutPulseManualDeviceNodeComponent.ɵfac = function SaturationWithoutPulseManualDeviceNodeComponent_Factory(t) {\n    return new (t || SaturationWithoutPulseManualDeviceNodeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ParserUtilsService));\n  };\n  SaturationWithoutPulseManualDeviceNodeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SaturationWithoutPulseManualDeviceNodeComponent,\n    selectors: [[\"app-saturation-without-pulse-manual-device-node\"]],\n    inputs: {\n      node: \"node\",\n      nodeMap: \"nodeMap\",\n      scope: \"scope\",\n      parameters: \"parameters\"\n    },\n    decls: 12,\n    vars: 11,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"center-div\"], [1, \"line-wrap\", \"text-element\"], [1, \"questionnaire-fields\"], [1, \"block\"], [\"for\", \"saturation-saturation\"], [\"id\", \"saturation-saturation\", \"name\", \"saturation-saturation\", \"type\", \"number\", \"step\", \"1\", \"focusOnLoad\", \"\", \"formControlName\", \"saturation\", 3, \"ngClass\"], [\"id\", \"saturation-warning\", \"class\", \"warning\", 4, \"ngIf\"], [\"id\", \"saturation-warning\", 1, \"warning\"]],\n    template: function SaturationWithoutPulseManualDeviceNodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function SaturationWithoutPulseManualDeviceNodeComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"h2\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵpipe(4, \"translate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(5, \"fieldset\", 3)(6, \"div\", 4)(7, \"label\", 5);\n        i0.ɵɵtext(8);\n        i0.ɵɵpipe(9, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 6);\n        i0.ɵɵtemplate(11, SaturationWithoutPulseManualDeviceNodeComponent_span_11_Template, 3, 3, \"span\", 7);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.nodeForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 5, ctx.node.text));\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(9, 7, \"SATURATION_SATURATION\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx.isOffendingValue(\"saturation\")));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isOffendingValue(\"saturation\"));\n      }\n    },\n    dependencies: [i3.NgClass, i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i4.FocusOnLoadDirective, i5.TranslatePipe]\n  });\n  return SaturationWithoutPulseManualDeviceNodeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}