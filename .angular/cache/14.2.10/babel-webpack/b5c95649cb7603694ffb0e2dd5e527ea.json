{"ast":null,"code":"import { FormBuilder, FormControl, Validators } from \"@angular/forms\";\nimport { ComponentParameters } from \"src/app/types/nodes.type\";\nimport { RepresentationType } from \"src/app/types/parser.type\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/parser-services/parser-utils.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@ngx-translate/core\";\nfunction EnumDeviceNodeComponent_li_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 5);\n    i0.ɵɵelement(1, \"input\", 6);\n    i0.ɵɵelementStart(2, \"label\", 7);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelement(5, \"br\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const input_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"radio-\", i_r2, \"\");\n    i0.ɵɵpropertyInterpolate(\"value\", i_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"for\", \"radio-\", i_r2, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(4, 4, input_r1.level), \"\");\n  }\n}\nexport let EnumDeviceNodeComponent = /*#__PURE__*/(() => {\n  class EnumDeviceNodeComponent {\n    constructor(formBuilder, parserUtils) {\n      this.formBuilder = formBuilder;\n      this.parserUtils = parserUtils;\n      //Form\n      this.inputs = [];\n      this.nodeForm = this.formBuilder.group({\n        enum: [\"\", Validators.required]\n      });\n      this.getRepresentation = () => {\n        const nodeParserType = this.enumDeviceNodeParserTypes.find(obj => obj.typeName === this.parameters.parserTypeName);\n        const nodeTypeName = nodeParserType.typeName;\n        const enumValues = nodeParserType.values;\n        for (const enumValue of enumValues) {\n          const input = {\n            nodeTypeName: nodeTypeName,\n            level: enumValue\n          };\n          this.inputs.push(input);\n        }\n        const nodeModel = {\n          nodeId: this.node.nodeName,\n          heading: this.node.text,\n          enumValues: enumValues\n        };\n        if (\"comment\" in this.node) {\n          nodeModel.comment = this.node.comment;\n        }\n        const leftButton = {\n          show: true,\n          text: \"SKIP\",\n          nextNodeId: this.node.nextFail\n        };\n        const rightButton = {\n          show: true,\n          text: \"NEXT\",\n          nextNodeId: this.node.next,\n          validate: scope => !this.nodeForm.invalid,\n          click: scope => {\n            const radix = 10;\n            const measurements = [nodeTypeName];\n            const value = this.nodeForm.value.enum;\n            nodeModel[nodeTypeName] = parseInt(value, radix);\n            this.parserUtils.addMeasurementsToOutput(scope.outputModel, nodeModel, this.node, measurements);\n            this.parserUtils.addMeasurementCommentToOutput(scope.outputModel, nodeModel, this.node);\n            this.parserUtils.addManualMeasurementOriginToOutput(scope.outputModel, this.node);\n          }\n        };\n        const representation = {\n          kind: RepresentationType.NODE,\n          nodeModel: nodeModel,\n          leftButton: leftButton,\n          rightButton: rightButton\n        };\n        this.parserUtils.addHelpMenu(this.node, representation);\n        return representation;\n      };\n      this.enumDeviceNodeParserTypes = [{\n        typeName: \"bloodUrine\",\n        values: [\"URINE_LEVEL_NEGATIVE\", \"URINE_LEVEL_PLUS_MINUS\", \"URINE_LEVEL_PLUS_ONE\", \"URINE_LEVEL_PLUS_TWO\", \"URINE_LEVEL_PLUS_THREE\"]\n      }, {\n        typeName: \"glucoseUrine\",\n        values: [\"URINE_LEVEL_NEGATIVE\", \"URINE_LEVEL_PLUS_ONE\", \"URINE_LEVEL_PLUS_TWO\", \"URINE_LEVEL_PLUS_THREE\", \"URINE_LEVEL_PLUS_FOUR\"]\n      }, {\n        typeName: \"leukocytesUrine\",\n        values: [\"URINE_LEVEL_NEGATIVE\", \"URINE_LEVEL_PLUS_ONE\", \"URINE_LEVEL_PLUS_TWO\", \"URINE_LEVEL_PLUS_THREE\", \"URINE_LEVEL_PLUS_FOUR\"]\n      }, {\n        typeName: \"nitriteUrine\",\n        values: [\"URINE_LEVEL_NEGATIVE\", \"URINE_LEVEL_POSITIVE\"]\n      }, {\n        typeName: \"urine\",\n        values: [\"URINE_LEVEL_NEGATIVE\", \"URINE_LEVEL_PLUS_MINUS\", \"URINE_LEVEL_PLUS_ONE\", \"URINE_LEVEL_PLUS_TWO\", \"URINE_LEVEL_PLUS_THREE\", \"URINE_LEVEL_PLUS_FOUR\"]\n      }];\n    }\n    onSubmit() {\n      console.log(this.nodeForm.value);\n    }\n    get enum() {\n      return this.nodeForm.get(\"enum\");\n    }\n  }\n  EnumDeviceNodeComponent.ɵfac = function EnumDeviceNodeComponent_Factory(t) {\n    return new (t || EnumDeviceNodeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ParserUtilsService));\n  };\n  EnumDeviceNodeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EnumDeviceNodeComponent,\n    selectors: [[\"app-enum-device-node\"]],\n    inputs: {\n      node: \"node\",\n      nodeMap: \"nodeMap\",\n      scope: \"scope\",\n      parameters: \"parameters\"\n    },\n    decls: 8,\n    vars: 3,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"center-div\"], [1, \"line-wrap\", \"text-element\"], [1, \"questionnaire-fields\"], [\"class\", \"narrow-row list-unstyled\", 4, \"ngFor\", \"ngForOf\"], [1, \"narrow-row\", \"list-unstyled\"], [\"type\", \"radio\", \"name\", \"enum\", \"formControlName\", \"enum\", 3, \"id\", \"value\"], [1, \"radio-label\", 3, \"for\"]],\n    template: function EnumDeviceNodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function EnumDeviceNodeComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"h2\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"fieldset\", 3)(5, \"div\")(6, \"ul\");\n        i0.ɵɵtemplate(7, EnumDeviceNodeComponent_li_7_Template, 6, 6, \"li\", 4);\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.nodeForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.node.text);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.inputs);\n      }\n    },\n    dependencies: [i3.NgForOf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.RadioControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i4.TranslatePipe]\n  });\n  return EnumDeviceNodeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}