{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction ImagePickerComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"div\", 6);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"+\", ctx_r0.filePreviews.length - 2, \"\");\n  }\n}\nfunction ImagePickerComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵelement(1, \"img\", 7);\n    i0.ɵɵelementStart(2, \"a\", 8);\n    i0.ɵɵlistener(\"click\", function ImagePickerComponent_div_1_Template_a_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const filePreview_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.cancel(filePreview_r2));\n    });\n    i0.ɵɵelement(3, \"i\", 9);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const filePreview_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", filePreview_r2.preview, i0.ɵɵsanitizeUrl);\n  }\n}\nexport let ImagePickerComponent = /*#__PURE__*/(() => {\n  class ImagePickerComponent {\n    constructor() {\n      this.filePreviews = [];\n      this.filePreviewsChange = new EventEmitter();\n    }\n    uploadFile(event) {\n      const file = event.target.files[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = e => {\n          const image = new Image();\n          image.onload = () => {\n            var _a;\n            let height = image.height,\n              width = image.width;\n            const maxSize = 1400;\n            if (image.width > image.height && image.width > maxSize) {\n              width = maxSize;\n              height = image.height * maxSize / image.width;\n            }\n            if (image.height > image.width && image.height > maxSize) {\n              height = maxSize;\n              width = image.width * maxSize / image.height;\n            }\n            const canvas = document.createElement('canvas');\n            canvas.width = width;\n            canvas.height = height;\n            (_a = canvas.getContext('2d')) === null || _a === void 0 ? void 0 : _a.drawImage(image, 0, 0, width, height);\n            const dataUrl = canvas.toDataURL('image/jpeg');\n            fetch(dataUrl).then(res => {\n              return res.blob();\n            }).then(blob => {\n              console.log('blob');\n              console.log(blob);\n              console.log('file');\n              console.log(file);\n              const filePreview = {\n                file: new File([blob], file.name, {\n                  type: blob.type\n                }),\n                preview: dataUrl\n              };\n              this.filePreviews.push(filePreview);\n            });\n          };\n          image.src = e.target.result;\n        };\n        this.filePreviewsChange.emit(this.filePreviews);\n      }\n    }\n    cancel(filePreview) {\n      this.filePreviews = this.filePreviews.filter(f => f.file.name != filePreview.file.name);\n    }\n  }\n  ImagePickerComponent.ɵfac = function ImagePickerComponent_Factory(t) {\n    return new (t || ImagePickerComponent)();\n  };\n  ImagePickerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ImagePickerComponent,\n    selectors: [[\"image-picker\"]],\n    inputs: {\n      filePreviews: \"filePreviews\"\n    },\n    outputs: {\n      filePreviewsChange: \"filePreviewsChange\"\n    },\n    decls: 6,\n    vars: 5,\n    consts: [[\"class\", \"image-preview\", 4, \"ngIf\"], [\"class\", \"image-preview\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"file-upload\", 1, \"file-upload-label\"], [1, \"far\", \"fa-image\", \"icon\"], [\"id\", \"file-upload\", \"type\", \"file\", \"accept\", \"image/*\", 2, \"display\", \"none\", 3, \"change\"], [1, \"image-preview\"], [1, \"preview\", \"ellipsis\"], [1, \"preview\", 3, \"src\"], [1, \"close-button\", 3, \"click\"], [1, \"fa\", \"fa-times\", \"fa-lg\"]],\n    template: function ImagePickerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ImagePickerComponent_div_0_Template, 3, 1, \"div\", 0);\n        i0.ɵɵtemplate(1, ImagePickerComponent_div_1_Template, 4, 1, \"div\", 1);\n        i0.ɵɵpipe(2, \"slice\");\n        i0.ɵɵelementStart(3, \"label\", 2);\n        i0.ɵɵelement(4, \"i\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"input\", 4);\n        i0.ɵɵlistener(\"change\", function ImagePickerComponent_Template_input_change_5_listener($event) {\n          return ctx.uploadFile($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.filePreviews.length > 2);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind2(2, 2, ctx.filePreviews, -2));\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i1.SlicePipe]\n  });\n  return ImagePickerComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}