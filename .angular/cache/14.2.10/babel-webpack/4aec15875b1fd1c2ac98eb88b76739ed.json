{"ast":null,"code":"import _asyncToGenerator from \"D:/Users/raghavendra/Desktop/ODE/OPTH/New folder/testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { OIDC_CONTINUE_WITH_ID, PINCODE_SET, ROOT_RESOURCE } from \"@utils/globals\";\nimport { lastValueFrom } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@services/state-services/config.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"angular-auth-oidc-client\";\nexport let OidcUtilsService = /*#__PURE__*/(() => {\n  class OidcUtilsService {\n    constructor(config, route, router, oidcSecurityService) {\n      this.config = config;\n      this.route = route;\n      this.router = router;\n      this.oidcSecurityService = oidcSecurityService;\n      this.oidcConfig = this.config.getOIDCConfig();\n    }\n    canActivate() {\n      const oidcEnabled = this.oidcConfig.enabled;\n      return oidcEnabled;\n    }\n    endSession(postLogoutRedirectUri) {\n      if (this.oidcConfig.endSessionEndpoint) {\n        const newEndSessionUrl = new URL(this.oidcConfig.endSessionEndpoint);\n        newEndSessionUrl.searchParams.append(\"post_logout_redirect_uri\", postLogoutRedirectUri);\n        return newEndSessionUrl.href;\n      } else {\n        if (this.oidcConfig.customLogoutUrlTemplate) {\n          const customLogoutUrlTemplate = this.oidcConfig.customLogoutUrlTemplate.replaceAll(\"{postLogoutRedirectUri}\", postLogoutRedirectUri).replaceAll(\"{clientId}\", this.oidcConfig.clientId);\n          return customLogoutUrlTemplate;\n        } else {\n          console.error(\"No custom logout url defined\");\n          return \"\";\n        }\n      }\n    }\n    sendAuthRequest() {\n      this.oidcSecurityService.authorize();\n    }\n    sendLogoutRequest() {\n      const url = this.endSession(this.oidcConfig.postLogoutRedirectUri);\n      console.debug(\"sendLogoutRequest() Url: \" + url);\n      globalThis.location.replace(url);\n      this.oidcSecurityService.logoff(); // Log off in service context\n    }\n\n    invalidateSsoSession() {\n      this.sendLogoutRequest();\n    }\n    parseQueryString() {\n      const params = this.route.snapshot.queryParams;\n      console.log(`Query params: ${JSON.stringify(params)}`);\n      return params;\n    }\n    runOIDC() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const idTokenToVerify = OIDC_CONTINUE_WITH_ID.get();\n        if (idTokenToVerify !== null) {\n          console.debug(\"OIDC ID token from session defined, navigating to success\");\n          yield _this.router.navigate([\"/oidc/success\"]);\n          console.debug(`Continuing OIDC login flow after endsession request: ${_this.router.url}`);\n          return;\n        }\n        const currentUrl = _this.router.url;\n        if (currentUrl.indexOf(\"/oidc/\") > -1) {\n          console.debug(\"route contains /oidc/, so returning...\");\n          return;\n        } else {\n          try {\n            const {\n              isAuthenticated,\n              userData,\n              accessToken,\n              idToken,\n              configId,\n              errorMessage\n            } = yield lastValueFrom(_this.oidcSecurityService.checkAuth());\n            console.debug(`OIDC is authenticated: ${isAuthenticated}`);\n            if (errorMessage) {\n              console.error(`OIDC plugin failed with error: ${errorMessage}`);\n              console.error(JSON.stringify(errorMessage));\n            }\n            if (isAuthenticated && idToken) {\n              console.debug(\"OIDC ID token received.\");\n              if (!ROOT_RESOURCE.get() || PINCODE_SET.get()) {\n                if (PINCODE_SET.get()) {\n                  console.debug(\"OIDC: Pincode already set. Using default routing.\");\n                } else {\n                  console.debug(\"OIDC: No root available. Using default routing.\");\n                }\n                return;\n              }\n              if (_this.config.getOIDCConfig().invalidateSsoSession) {\n                console.debug(\"Redirecting to invalidate sso\");\n                yield _this.router.navigate([\"/oidc/invalidate_sso\"]);\n              } else {\n                console.debug(\"Redirecting to OIDC success\");\n                yield _this.router.navigate([\"/oidc/success\"]);\n              }\n            } else {\n              console.debug(\"User is not authenticated with ID token\");\n            }\n            return;\n          } catch (e) {\n            console.error(`OIDC failed with error: ${e}`);\n            console.error(JSON.stringify(e));\n            return;\n          }\n        }\n      })();\n    }\n  }\n  OidcUtilsService.ɵfac = function OidcUtilsService_Factory(t) {\n    return new (t || OidcUtilsService)(i0.ɵɵinject(i1.ConfigService), i0.ɵɵinject(i2.ActivatedRoute), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.OidcSecurityService));\n  };\n  OidcUtilsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OidcUtilsService,\n    factory: OidcUtilsService.ɵfac,\n    providedIn: \"root\"\n  });\n  return OidcUtilsService;\n})();","map":null,"metadata":{},"sourceType":"module"}