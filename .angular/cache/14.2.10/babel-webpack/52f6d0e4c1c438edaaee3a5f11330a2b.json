{"ast":null,"code":"import { ElementRef, SecurityContext } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nimport * as i2 from \"@services/util-services/util.service\";\nimport * as i3 from \"@angular/platform-browser\";\nexport let PrettyReplyDirective = /*#__PURE__*/(() => {\n  class PrettyReplyDirective {\n    constructor(translate, utils, sanitizer, element) {\n      this.translate = translate;\n      this.utils = utils;\n      this.sanitizer = sanitizer;\n      this.element = element;\n      this.handleMeasurementsReply = reply => reply.measurements.filter(measurementObj => this.utils.exists(measurementObj.measurement)).map(measurementObj => {\n        const measurementValue = measurementObj.measurement;\n        const prettyType = `${this.translate.instant(`MEASUREMENT_TYPE_${measurementObj.type.toUpperCase()}`)}:`;\n        let prettyUnit = measurementValue.unit !== '-' ? measurementValue.unit : '';\n        let prettyValue = '';\n        let prettyExtra = '';\n        switch (measurementObj.type) {\n          case 'copd_prediction':\n            return '';\n          case 'blood_pressure':\n            if ('systolic' in measurementValue) {\n              prettyValue = `${measurementValue.systolic}/${measurementValue.diastolic}`;\n            }\n            break;\n          case 'bloodsugar':\n          case 'bloodsugar_mg_dl':\n            if ('isAfterMeal' in measurementValue) {\n              prettyValue = PrettyReplyDirective.toDecimals(measurementValue.value, 1);\n              if (measurementValue.isAfterMeal === true) {\n                prettyExtra = `<br/>(${this.translate.instant('AFTER_MEAL')})`;\n              }\n              if (measurementValue.isBeforeMeal === true) {\n                prettyExtra = `<br/>(${this.translate.instant('BEFORE_MEAL')})`;\n              }\n              if (measurementValue.isFasting === true) {\n                prettyExtra = `<br/>(${this.translate.instant('FASTING')})`;\n              }\n            }\n            break;\n          case 'ecg':\n            prettyValue = '-';\n            prettyUnit = '';\n            break;\n          default:\n            if ('value' in measurementValue) {\n              const simpleValue = measurementValue;\n              prettyValue = `${simpleValue.value}`;\n            } else {\n              prettyValue = this.translate.instant('NO_VALUE');\n              prettyUnit = '';\n            }\n            break;\n        }\n        return `${prettyType} ${prettyValue} ${prettyUnit} ${prettyExtra}`.trim();\n      }).join('<br/>');\n    }\n    ngOnInit() {\n      if (this.reply) {\n        this.element.nativeElement.innerHTML = this.generateHtml(this.reply);\n      }\n    }\n    wrapInSpan(html) {\n      return `<span class=\"reply-table-value\">${html}</span>`;\n    }\n    sanitize(value) {\n      var _a;\n      return (_a = this.sanitizer.sanitize(SecurityContext.HTML, value)) !== null && _a !== void 0 ? _a : '';\n    }\n    handleInputReply(reply) {\n      if (this.utils.exists(reply.patientAnswer)) {\n        return this.wrapInSpan(this.sanitize(reply.patientAnswer));\n      }\n      if (typeof reply.answer === 'boolean') {\n        const answer = reply.answer ? this.translate.instant('YES') : this.translate.instant('NO');\n        return this.wrapInSpan(this.sanitize(answer));\n      }\n      return this.wrapInSpan(this.sanitize(String(reply.answer)));\n    }\n    handleOmittedReply() {\n      return this.wrapInSpan(this.translate.instant('OMITTED'));\n    }\n    static toDecimals(value, decimals) {\n      return (Math.round(value * 100) / 100).toFixed(decimals);\n    }\n    generateHtml(input) {\n      if (!this.utils.exists(input)) {\n        return this.wrapInSpan('');\n      } else if ('omitted' in input) {\n        return this.handleOmittedReply();\n      } else if ('answer' in input) {\n        return this.handleInputReply(input);\n      } else if ('measurements' in input) {\n        return this.handleMeasurementsReply(input);\n      } else {\n        return this.wrapInSpan('-');\n      }\n    }\n  }\n  PrettyReplyDirective.ɵfac = function PrettyReplyDirective_Factory(t) {\n    return new (t || PrettyReplyDirective)(i0.ɵɵdirectiveInject(i1.TranslateService), i0.ɵɵdirectiveInject(i2.Utils), i0.ɵɵdirectiveInject(i3.DomSanitizer), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  PrettyReplyDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: PrettyReplyDirective,\n    selectors: [[\"\", \"prettyReply\", \"\"]],\n    inputs: {\n      reply: \"reply\"\n    }\n  });\n  return PrettyReplyDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}