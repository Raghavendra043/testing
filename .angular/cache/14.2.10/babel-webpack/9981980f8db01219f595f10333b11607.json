{"ast":null,"code":"import { lastValueFrom } from \"rxjs\";\nimport { HttpContext, HttpErrorResponse } from \"@angular/common/http\";\nimport { LogLevel } from \"src/app/types/native.type\";\nimport { ERROR_PASS_THROUGH, SILENT_REQUEST } from \"@app/interceptors/interceptor\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../native-services/native.service\";\nexport let ClientLoggingService = /*#__PURE__*/(() => {\n  class ClientLoggingService {\n    constructor(http, nativeService) {\n      this.http = http;\n      this.nativeService = nativeService;\n      this.logUrl = undefined;\n      this.enable = logUrl => {\n        var _a;\n        (_a = this.originalConsole) === null || _a === void 0 ? void 0 : _a.debug(\"Enable client logging\");\n        this.logUrl = logUrl;\n        this.subscribeToNativeLogEntries();\n        this.overrideConsoleLogFunctions();\n      };\n      this.subscribeToNativeLogEntries = () => {\n        this.nativeService.enableClientLogging(logEntriesReady => {\n          const logEntries = logEntriesReady.entries;\n          this.submitLogEntriesToBackend(logEntries);\n        });\n      };\n      this.overrideConsoleLogFunctions = () => {\n        const bundleAndSubmitMessage = (message, level) => {\n          const timestamp = new Date().toISOString();\n          const logEntry = {\n            level: level,\n            message: message,\n            timestamp: timestamp\n          };\n          this.submitLogEntriesToBackend([logEntry]);\n        };\n        globalThis.console.log = message => {\n          var _a;\n          (_a = this.originalConsole) === null || _a === void 0 ? void 0 : _a.log(message);\n          bundleAndSubmitMessage(message, LogLevel.DEBUG);\n        };\n        globalThis.console.debug = message => {\n          var _a;\n          (_a = this.originalConsole) === null || _a === void 0 ? void 0 : _a.debug(message);\n          bundleAndSubmitMessage(message, LogLevel.DEBUG);\n        };\n        globalThis.console.info = message => {\n          var _a;\n          (_a = this.originalConsole) === null || _a === void 0 ? void 0 : _a.info(message);\n          bundleAndSubmitMessage(message, LogLevel.INFO);\n        };\n        globalThis.console.warn = message => {\n          var _a;\n          (_a = this.originalConsole) === null || _a === void 0 ? void 0 : _a.warn(message);\n          bundleAndSubmitMessage(message, LogLevel.WARN);\n        };\n        globalThis.console.error = message => {\n          var _a;\n          (_a = this.originalConsole) === null || _a === void 0 ? void 0 : _a.error(message);\n          bundleAndSubmitMessage(message, LogLevel.ERROR);\n        };\n      };\n      this.submitLogEntriesToBackend = logEntries => {\n        var _a, _b;\n        const context = new HttpContext().set(SILENT_REQUEST, true).set(ERROR_PASS_THROUGH, true);\n        try {\n          const response = lastValueFrom(this.http.post(this.logUrl, logEntries, {\n            context: context\n          }));\n          (_a = this.originalConsole) === null || _a === void 0 ? void 0 : _a.debug(\"Log entries submitted to backend\");\n        } catch (error) {\n          const msg = error instanceof HttpErrorResponse ? `Status: ${error.status}` : JSON.stringify(error);\n          (_b = this.originalConsole) === null || _b === void 0 ? void 0 : _b.error(\"Failed to send log entries to backend\");\n        }\n      };\n      if (globalThis.console !== undefined) {\n        this.originalConsole = {\n          log: globalThis.console.log,\n          debug: globalThis.console.debug,\n          info: globalThis.console.info,\n          warn: globalThis.console.warn,\n          error: globalThis.console.error\n        };\n      } else {\n        console.error(\"Could not find globalThis.console!\");\n      }\n    }\n  }\n  ClientLoggingService.ɵfac = function ClientLoggingService_Factory(t) {\n    return new (t || ClientLoggingService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NativeService));\n  };\n  ClientLoggingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ClientLoggingService,\n    factory: ClientLoggingService.ɵfac,\n    providedIn: \"root\"\n  });\n  return ClientLoggingService;\n})();","map":null,"metadata":{},"sourceType":"module"}