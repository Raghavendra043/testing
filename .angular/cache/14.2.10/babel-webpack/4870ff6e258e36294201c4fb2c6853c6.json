{"ast":null,"code":"import _asyncToGenerator from \"D:/Users/raghavendra/Desktop/ODE/OPTH/New folder/testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Location } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NgZone } from '@angular/core';\nimport { HttpContext } from '@angular/common/http';\nimport { lastValueFrom } from 'rxjs';\nimport { ERROR_PASS_THROUGH, SILENT_REQUEST } from '@app/interceptors/interceptor';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@services/state-services/state-passing.service\";\nimport * as i3 from \"@angular/router\";\nexport let IndividualSessionsApiService = /*#__PURE__*/(() => {\n  class IndividualSessionsApiService {\n    constructor(http, appContext, router, ngZone) {\n      var _this = this;\n      this.http = http;\n      this.appContext = appContext;\n      this.router = router;\n      this.ngZone = ngZone;\n      this.constants = Object.freeze({\n        roomCredentials: 'roomCredentials',\n        sessionUrl: 'individualSessionUrl',\n        joinConferencePath: 'joinConference',\n        loginPath: 'login',\n        authenticationError: 'authenticationError'\n      });\n      this.joinSession = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (individualSession) {\n          const context = new HttpContext().set(SILENT_REQUEST, true).set(ERROR_PASS_THROUGH, true);\n          console.debug('Joining conference');\n          console.debug('Individual session:', JSON.stringify(individualSession));\n          const individualSessionUrl = individualSession.links.individualSession;\n          const joinSessionUrl = Location.joinWithSlash(individualSessionUrl, 'participant');\n          try {\n            const body = {\n              present: true\n            };\n            const roomStatus = yield lastValueFrom(_this.http.put(joinSessionUrl, body, {\n              context: context\n            }));\n            console.debug('Room status:', JSON.stringify(roomStatus));\n            _this.appContext.requestParams.set(_this.constants.roomCredentials, roomStatus.roomCredentials);\n            _this.appContext.requestParams.set(_this.constants.sessionUrl, individualSessionUrl);\n            void _this.ngZone.run(() => {\n              console.debug('Redirecting to join conference component');\n              _this.router.navigate([_this.constants.joinConferencePath]);\n            });\n          } catch (error) {\n            const msg = error instanceof HttpErrorResponse ? `Status: ${error.status}` : JSON.stringify(error);\n            console.error('Could not join session %s. %s', individualSession, msg);\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      this.leaveSession = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (individualSessionUrl) {\n          console.debug('Leaving individual session');\n          const context = new HttpContext().set(SILENT_REQUEST, true).set(ERROR_PASS_THROUGH, true);\n          console.debug(`Individual sessions URL: ${individualSessionUrl}`);\n          const leaveSessionUrl = Location.joinWithSlash(individualSessionUrl, 'participant');\n          const body = {\n            present: false\n          };\n          try {\n            yield lastValueFrom(_this.http.put(leaveSessionUrl, body, {\n              context: context\n            }));\n            console.debug('Succesfully left individual session');\n          } catch (error) {\n            console.debug('Failed to leave individual session');\n            console.debug(`Status: ${error}`);\n          }\n        });\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n      /**\r\n       * Checks for pending individual sessions for the patient.\r\n       */\n      this.checkForSession = /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (individualSessionsUrl) {\n          const patientSessionsUrl = new URL(individualSessionsUrl);\n          patientSessionsUrl.searchParams.set('status', 'open');\n          const context = new HttpContext().set(SILENT_REQUEST, true).set(ERROR_PASS_THROUGH, true);\n          try {\n            return lastValueFrom(_this.http.get(patientSessionsUrl.toString(), {\n              context: context\n            }));\n          } catch (error) {\n            console.error(`Error occurred trying to check for pending individual sessions: ${error}`);\n            return Promise.resolve(undefined);\n          }\n        });\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n      this.checkForSessionAndJoin = /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator(function* (individualSessionsUrl) {\n          const individualSessionCollection = yield _this.checkForSession(individualSessionsUrl);\n          if (individualSessionCollection !== undefined && individualSessionCollection.results.length > 0) {\n            _this.joinSession(individualSessionCollection.results[0]);\n          }\n        });\n        return function (_x4) {\n          return _ref4.apply(this, arguments);\n        };\n      }();\n      this.isHostPresent = individualSessionUrl => {\n        const context = new HttpContext().set(SILENT_REQUEST, true).set(ERROR_PASS_THROUGH, true);\n        return lastValueFrom(this.http.get(individualSessionUrl, {\n          context: context\n        }));\n      };\n    }\n  }\n  IndividualSessionsApiService.ɵfac = function IndividualSessionsApiService_Factory(t) {\n    return new (t || IndividualSessionsApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StatePassingService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i0.NgZone));\n  };\n  IndividualSessionsApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: IndividualSessionsApiService,\n    factory: IndividualSessionsApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return IndividualSessionsApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}