{"ast":null,"code":"import _asyncToGenerator from \"D:/Users/raghavendra/Desktop/ODE/OPTH/New folder/testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { LOGIN_TYPE_INFO } from '@utils/globals';\nimport { lastValueFrom, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../rest-api-services/authentication.service\";\nimport * as i2 from \"./state-passing.service\";\nimport * as i3 from \"../rest-api-services/server-info.service\";\nimport * as i4 from \"../rest-api-services/patient.service\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"../video-services/video.service\";\nimport * as i7 from \"../rest-api-services/notifications.service\";\nimport * as i8 from \"./client-logging.service\";\nimport * as i9 from \"@services/rest-api-services/clinician.service\";\nimport * as i10 from \"./config.service\";\nexport let UserSessionService = /*#__PURE__*/(() => {\n  class UserSessionService {\n    constructor(authentication, appContext, serverInfo, patientService, router, videoFacade, notifications, clientLoggingService, clinicianService, configService) {\n      this.authentication = authentication;\n      this.appContext = appContext;\n      this.serverInfo = serverInfo;\n      this.patientService = patientService;\n      this.router = router;\n      this.videoFacade = videoFacade;\n      this.notifications = notifications;\n      this.clientLoggingService = clientLoggingService;\n      this.clinicianService = clinicianService;\n      this.configService = configService;\n      this.jwtHelper = new JwtHelperService();\n      this.enableClientLogging = user => {\n        if (user.links.logEntries) {\n          this.clientLoggingService.enable(user.links.logEntries);\n        } else {\n          console.info('Client logging not enabled.');\n        }\n      };\n    }\n    init() {\n      console.debug('Init new user session.');\n      this.authentication.clearCurrentAuthToken();\n      this.appContext.currentUser.clear();\n      this.appContext.requestParams.clear();\n      this.notifications.clearPushNotificationRegistrationState();\n      return lastValueFrom(this.serverInfo.get());\n    }\n    startSilentLogin(root, silentLoginFailed) {\n      const completed = response => {\n        if ('data' in response) {\n          return silentLoginFailed(response);\n        }\n        const {\n          claims,\n          canChangePassword,\n          logoutUrl,\n          organizations\n        } = response;\n        return this.completeLogin(root, claims, canChangePassword, logoutUrl, organizations);\n      };\n      return this.authentication.trySilentLogin(root.links.auth).subscribe({\n        next: completed,\n        error: silentLoginFailed\n      });\n    }\n    completeLogin(root, claims, canChangePassword, logoutUrl, organizations) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        let user = undefined;\n        claims.uty === 'patient' ? _this.clinicianService.setIsClinician(false) : _this.clinicianService.setIsClinician(true);\n        const isClinician = _this.clinicianService.isClinician();\n        LOGIN_TYPE_INFO.delete();\n        const config = _this.configService.getAppConfig();\n        const appType = config.appType;\n        switch (appType) {\n          case \"clinicianApp\" /* AppType.CLINICIAN */:\n            {\n              if (isClinician) {\n                user = yield _this.clinicianService.currentClinician(root);\n              } else {\n                console.error(\"AppType is 'Clinician' and user is not a clinician\");\n                LOGIN_TYPE_INFO.set('APP_TYPE_CLINICIAN');\n              }\n              break;\n            }\n          case \"clinicianAndPatientApp\" /* AppType.CLINICIAN_AND_PATIENT */:\n            {\n              if (isClinician) {\n                user = yield _this.clinicianService.currentClinician(root);\n              } else {\n                user = yield _this.patientService.currentPatient(root);\n              }\n              break;\n            }\n          case \"patientApp\" /* AppType.PATIENT */:\n            {\n              if (!isClinician) {\n                user = yield _this.patientService.currentPatient(root);\n              } else {\n                console.error(\"AppType is 'Patient' and user is not a patient\");\n                LOGIN_TYPE_INFO.set('APP_TYPE_PATIENT');\n              }\n              break;\n            }\n          default:\n            {\n              user = undefined;\n              console.error(`Unknown app type: ${appType}`);\n            }\n        }\n        if (user === undefined) {\n          console.error('User is undefined');\n          return throwError({});\n        }\n        user.claims = claims;\n        user.canChangePassword = canChangePassword;\n        user.links.auth = root.links.auth;\n        user.organizations = organizations;\n        if (logoutUrl) {\n          user.links.logout = logoutUrl;\n        }\n        _this.appContext.currentUser.set(user);\n        _this.enableClientLogging(user);\n        if (user.links && user.links.individualSessions) {\n          _this.videoFacade.listenForIncomingCall(user.links.individualSessions);\n        }\n        if (isClinician) {\n          return _this.router.navigate(['/clinician_menu']);\n        } else {\n          return _this.router.navigate(['/menu']);\n        }\n      })();\n    }\n    setPatientUser(user, properties) {\n      var _a;\n      const patient = structuredClone(user);\n      patient.claims = this.jwtHelper.decodeToken(properties.token);\n      patient.canChangePassword = false;\n      const currentClinician = this.appContext.currentUser.get();\n      patient.links.auth = currentClinician.links.auth;\n      patient.organizations = properties.customClaims.organizations;\n      if ((_a = properties === null || properties === void 0 ? void 0 : properties.links) === null || _a === void 0 ? void 0 : _a.logout) {\n        patient.links.logout = properties.links.logout;\n      }\n      if (patient.links && patient.links.individualSessions) {\n        this.videoFacade.listenForIncomingCall(patient.links.individualSessions);\n      }\n      this.enableClientLogging(patient);\n      return patient;\n    }\n  }\n  UserSessionService.ɵfac = function UserSessionService_Factory(t) {\n    return new (t || UserSessionService)(i0.ɵɵinject(i1.AuthenticationService), i0.ɵɵinject(i2.StatePassingService), i0.ɵɵinject(i3.ServerInfoService), i0.ɵɵinject(i4.PatientService), i0.ɵɵinject(i5.Router), i0.ɵɵinject(i6.VideoService), i0.ɵɵinject(i7.NotificationsService), i0.ɵɵinject(i8.ClientLoggingService), i0.ɵɵinject(i9.ClinicianService), i0.ɵɵinject(i10.ConfigService));\n  };\n  UserSessionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserSessionService,\n    factory: UserSessionService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserSessionService;\n})();","map":null,"metadata":{},"sourceType":"module"}