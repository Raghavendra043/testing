{"ast":null,"code":"import { HttpContext } from '@angular/common/http';\nimport { ERROR_PASS_THROUGH, SILENT_REQUEST } from '@app/interceptors/interceptor';\nimport { lastValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@services/util-services/util.service\";\nimport * as i2 from \"./clinician.service\";\nimport * as i3 from \"@services/state-services/state-passing.service\";\nimport * as i4 from \"@angular/common/http\";\nexport let QuestionnairesService = /*#__PURE__*/(() => {\n  class QuestionnairesService {\n    constructor(util, clinicianService, appContext, http) {\n      this.util = util;\n      this.clinicianService = clinicianService;\n      this.appContext = appContext;\n      this.http = http;\n    }\n    list(user, params) {\n      if (!this.util.exists(user.links.questionnaires)) {\n        throw new TypeError('User object does not contain a link relation to questionnaires');\n      } else {\n        if (params) {\n          //@ts-ignore\n          return lastValueFrom(this.http.get(user.links.questionnaires, {\n            params: params,\n            context: new HttpContext().set(ERROR_PASS_THROUGH, true)\n          }));\n        } else {\n          return lastValueFrom(this.http.get(user.links.questionnaires));\n        }\n      }\n    }\n    get(questionnaireRef) {\n      if (!this.util.hasNestedProperty(questionnaireRef, 'links.questionnaire')) {\n        throw new TypeError('Questionnaire ref does not contain a link relation to questionnaire details');\n      } else {\n        return lastValueFrom(this.http.get(questionnaireRef.links.questionnaire));\n      }\n    }\n    getHelpImage({\n      imageUrl\n    }) {\n      return lastValueFrom(this.http.get(imageUrl, {\n        responseType: 'text',\n        context: new HttpContext().set(ERROR_PASS_THROUGH, true).set(SILENT_REQUEST, true)\n      }));\n    }\n    replyTo(questionnaire, outputs) {\n      const isClinician = this.clinicianService.isClinician();\n      const data = {\n        version: questionnaire.version,\n        output: outputs,\n        date: new Date().toISOString()\n      };\n      if (isClinician) {\n        console.debug('Posting questionnaire as clinician');\n        const patient = this.appContext.getUser();\n        data['links'] = {\n          patient: patient.links.self\n        };\n      }\n      console.debug(`POST questionnaire data: ${JSON.stringify(data)}`);\n      const config = {\n        context: new HttpContext().set(ERROR_PASS_THROUGH, true)\n      };\n      const result = questionnaire.links.questionnaireResult;\n      return lastValueFrom(this.http.post(result, data, config));\n    }\n  }\n  QuestionnairesService.ɵfac = function QuestionnairesService_Factory(t) {\n    return new (t || QuestionnairesService)(i0.ɵɵinject(i1.Utils), i0.ɵɵinject(i2.ClinicianService), i0.ɵɵinject(i3.StatePassingService), i0.ɵɵinject(i4.HttpClient));\n  };\n  QuestionnairesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuestionnairesService,\n    factory: QuestionnairesService.ɵfac,\n    providedIn: 'root'\n  });\n  return QuestionnairesService;\n})();","map":null,"metadata":{},"sourceType":"module"}