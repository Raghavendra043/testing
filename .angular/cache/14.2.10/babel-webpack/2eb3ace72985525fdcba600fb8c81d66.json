{"ast":null,"code":"import { BloodSugarConstraint } from '@app/types/model.type';\nimport { graphColors } from 'src/app/product-flavor/colors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nimport * as i2 from \"@ngx-translate/core\";\nexport let ConstraintColorPipe = /*#__PURE__*/(() => {\n  class ConstraintColorPipe {\n    constructor(sanitizer) {\n      this.sanitizer = sanitizer;\n    }\n    transform(value, constraint) {\n      let color;\n      switch (constraint) {\n        case BloodSugarConstraint.IS_BEFORE_MEAL:\n          color = graphColors[0];\n          break;\n        case BloodSugarConstraint.IS_AFTER_MEAL:\n          color = graphColors[1];\n          break;\n        case BloodSugarConstraint.IS_FASTING:\n          color = graphColors[2];\n          break;\n        default:\n          color = graphColors[3];\n          break;\n      }\n      const html = `<span style=\"color: ${color}\">${value}</span>`;\n      return this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n  ConstraintColorPipe.ɵfac = function ConstraintColorPipe_Factory(t) {\n    return new (t || ConstraintColorPipe)(i0.ɵɵdirectiveInject(i1.DomSanitizer, 16));\n  };\n  ConstraintColorPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"constraintColor\",\n    type: ConstraintColorPipe,\n    pure: true\n  });\n  return ConstraintColorPipe;\n})();\nexport let ConstraintTextPipe = /*#__PURE__*/(() => {\n  class ConstraintTextPipe {\n    constructor(translate) {\n      this.translate = translate;\n    }\n    transform(constraint) {\n      let text;\n      switch (constraint) {\n        case BloodSugarConstraint.IS_BEFORE_MEAL:\n          text = this.translate.instant('BEFORE_MEAL');\n          break;\n        case BloodSugarConstraint.IS_AFTER_MEAL:\n          text = this.translate.instant('AFTER_MEAL');\n          break;\n        case BloodSugarConstraint.IS_FASTING:\n          text = this.translate.instant('FASTING');\n          break;\n        default:\n          text = '';\n          break;\n      }\n      return text;\n    }\n  }\n  ConstraintTextPipe.ɵfac = function ConstraintTextPipe_Factory(t) {\n    return new (t || ConstraintTextPipe)(i0.ɵɵdirectiveInject(i2.TranslateService, 16));\n  };\n  ConstraintTextPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"constraintText\",\n    type: ConstraintTextPipe,\n    pure: true\n  });\n  return ConstraintTextPipe;\n})();","map":null,"metadata":{},"sourceType":"module"}