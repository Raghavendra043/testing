{"ast":null,"code":"import { HttpContext } from \"@angular/common/http\";\nimport { lastValueFrom } from \"rxjs\";\nimport { ERROR_PASS_THROUGH } from \"@app/interceptors/interceptor\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../util-services/util.service\";\nimport * as i2 from \"@angular/common/http\";\nexport let PatientService = /*#__PURE__*/(() => {\n  class PatientService {\n    constructor(util, http) {\n      this.util = util;\n      this.http = http;\n    }\n    currentPatient(root) {\n      var _a;\n      const patientUrl = (_a = root === null || root === void 0 ? void 0 : root.links) === null || _a === void 0 ? void 0 : _a.patient;\n      if (!this.util.exists(patientUrl)) {\n        throw new TypeError(\"Root object does not contain a link relation to patient\");\n      }\n      return lastValueFrom(this.http.get(patientUrl));\n    }\n    getSelf(patient) {\n      var _a;\n      const patientUrl = (_a = patient === null || patient === void 0 ? void 0 : patient.links) === null || _a === void 0 ? void 0 : _a.self;\n      if (!this.util.exists(patientUrl)) {\n        throw new TypeError(\"Patient object does not contain a link relation to self\");\n      }\n      return lastValueFrom(this.http.get(patientUrl));\n    }\n    find(user, patientsParameters) {\n      if (!user.hasOwnProperty(\"links\") || !user.links.hasOwnProperty(\"patients\")) {\n        throw new TypeError(\"User object does not contain a link relation to patients\");\n      }\n      return lastValueFrom(this.http.get(user.links.patients, {\n        params: patientsParameters,\n        context: new HttpContext().set(ERROR_PASS_THROUGH, true)\n      }));\n    }\n    create(user, body) {\n      if (!user.hasOwnProperty(\"links\") || !user.links.hasOwnProperty(\"patients\")) {\n        throw new TypeError(\"User object does not contain a link relation to patients\");\n      }\n      console.debug(JSON.stringify(body));\n      const config = {\n        context: new HttpContext().set(ERROR_PASS_THROUGH, true)\n      };\n      return lastValueFrom(\n      //@ts-ignore\n      this.http.post(user.links.patients, body, config));\n    }\n    get(user, patientRef) {\n      if (!user.hasOwnProperty(\"links\") || !user.links.hasOwnProperty(\"patients\")) {\n        throw new TypeError(\"User object does not contain a link relation to patients\");\n      }\n      const patientLink = patientRef.links.patient;\n      return lastValueFrom(this.http.get(patientLink));\n    }\n  }\n  PatientService.ɵfac = function PatientService_Factory(t) {\n    return new (t || PatientService)(i0.ɵɵinject(i1.Utils), i0.ɵɵinject(i2.HttpClient));\n  };\n  PatientService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PatientService,\n    factory: PatientService.ɵfac,\n    providedIn: \"root\"\n  });\n  return PatientService;\n})();","map":null,"metadata":{},"sourceType":"module"}