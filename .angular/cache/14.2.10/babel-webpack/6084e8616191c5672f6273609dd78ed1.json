{"ast":null,"code":"import { ApplicationRef } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { ComponentParameters, NodeTypeName } from 'src/app/types/nodes.type';\nimport { meterTypes } from 'src/app/types/meter.type';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/parser-services/device-node-parser.service\";\nimport * as i3 from \"@ngx-translate/core\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../../../notifications/notifications/notifications.component\";\nfunction AutomaticDeviceNodeComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵelement(1, \"i\", 10);\n    i0.ɵɵelementStart(2, \"div\", 11)(3, \"label\", 12);\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"progress\", 13);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r0.nodeModel == null ? null : ctx_r0.nodeModel.progress, \"% \", i0.ɵɵpipeBind1(5, 3, \"ACTIVITY_TRACKER_SYNCED_PERCENTAGE\"), \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"value\", ctx_r0.nodeModel == null ? null : ctx_r0.nodeModel.progress);\n  }\n}\nfunction AutomaticDeviceNodeComponent_h1_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"h1\", 14);\n  }\n}\nfunction AutomaticDeviceNodeComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15)(1, \"h2\", 14);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.parameters.error);\n  }\n}\nfunction AutomaticDeviceNodeComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"label\", 17);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 18);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const input_r4 = ctx.$implicit;\n    const i_r5 = ctx.index;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 5, input_r4.translationId));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"id\", input_r4.key)(\"name\", input_r4.key)(\"value\", ctx_r3.nodeModel[input_r4.key])(\"formControlName\", i_r5);\n  }\n}\nexport let AutomaticDeviceNodeComponent = /*#__PURE__*/(() => {\n  class AutomaticDeviceNodeComponent {\n    constructor(formBuilder, deviceNodeParserService, translate, applicationRef) {\n      this.formBuilder = formBuilder;\n      this.deviceNodeParserService = deviceNodeParserService;\n      this.translate = translate;\n      this.applicationRef = applicationRef;\n      //Form\n      this.inputs = [];\n      this.nodeForm = this.formBuilder.group({\n        inputControls: this.formBuilder.array([])\n      });\n      this.nodeModel = undefined;\n      // Error\n      this.error = undefined;\n      this.errorTitle = undefined;\n      this.getRepresentation = () => {\n        const nodeParserType = this.deviceNodeParserTypes.find(obj => obj.nodeTypeName === this.parameters.nodeTypeName);\n        if (nodeParserType === undefined) {\n          this.errorTitle = this.translate.instant('UNSUPPORTED_DEVICE');\n          this.error = this.parameters.nodeTypeName;\n          throw new Error(`Could not find AutomaticDeviceNodeParser for ${this.parameters.nodeTypeName}!`);\n        }\n        const deviceNodeType = nodeParserType.deviceNodeType;\n        const parseDeviceNode = this.deviceNodeParserService.create(deviceNodeType);\n        const representation = parseDeviceNode(this.node);\n        this.nodeModel = representation.nodeModel;\n        this.nodeModel.setValue = (key, value) => {\n          // Bit of a hack we have to use in order to trigger the re-rendering and\n          // re-validation of the questionnaire form upon receiving a\n          // status/measurement from the native layer.\n          if (this.nodeModel !== undefined) {\n            this.nodeModel[key] = value;\n            this.applicationRef.tick();\n          }\n        };\n        for (const formInput of nodeParserType.formInputs) {\n          this.inputs.push(formInput);\n          this.inputControls.push(this.formBuilder.control({\n            value: '',\n            disabled: true\n          }, Validators.required));\n        }\n        return representation;\n      };\n      this.deviceNodeParserTypes = [{\n        nodeTypeName: NodeTypeName.ACTIVITY_DEVICE_NODE,\n        deviceNodeType: {\n          meterType: meterTypes.ACTIVITY_TRACKER,\n          outputMapper: (measurements, _nodeModel) => measurements\n        },\n        formInputs: [{\n          translationId: 'DAILY_STEPS',\n          key: 'dailySteps'\n        }, {\n          translationId: 'DAILY_STEPS_WEEKLY_AVERAGE',\n          key: 'dailyStepsWeeklyAverage'\n        }]\n      }, {\n        nodeTypeName: NodeTypeName.BLOOD_PRESSURE_DEVICE_NODE,\n        deviceNodeType: {\n          meterType: meterTypes.BLOOD_PRESSURE_MONITOR,\n          infoText: 'BLOOD_PRESSURE_CONNECT',\n          outputMapper: (measurements, _nodeModel) => measurements\n        },\n        formInputs: [{\n          translationId: 'BLOOD_PRESSURE_SYSTOLIC',\n          key: 'systolic'\n        }, {\n          translationId: 'BLOOD_PRESSURE_DIASTOLIC',\n          key: 'diastolic'\n        }, {\n          translationId: 'BLOOD_PRESSURE_PULSE',\n          key: 'pulse'\n        }]\n      }, {\n        nodeTypeName: NodeTypeName.BLOOD_SUGAR_DEVICE_NODE,\n        deviceNodeType: {\n          meterType: meterTypes.GLUCOMETER,\n          outputMapper: (measurements, _nodeModel) => measurements\n        },\n        formInputs: []\n      }, {\n        nodeTypeName: NodeTypeName.SATURATION_DEVICE_NODE,\n        deviceNodeType: {\n          meterType: meterTypes.OXIMETER,\n          outputMapper: (measurements, _nodeModel) => measurements\n        },\n        formInputs: [{\n          translationId: 'SATURATION_SATURATION',\n          key: 'saturation'\n        }, {\n          translationId: 'SATURATION_PULSE',\n          key: 'pulse'\n        }]\n      }, {\n        nodeTypeName: NodeTypeName.SATURATION_WITHOUT_PULSE_DEVICE_NODE,\n        deviceNodeType: {\n          meterType: meterTypes.OXIMETER,\n          outputMapper: (measurements, _nodeModel) => measurements\n        },\n        formInputs: [{\n          translationId: 'SATURATION_SATURATION',\n          key: 'saturation'\n        }]\n      }, {\n        nodeTypeName: NodeTypeName.SPIROMETER_DEVICE_NODE,\n        deviceNodeType: {\n          meterType: meterTypes.SPIROMETER,\n          outputMapper: (_measurements, nodeModel) => {\n            if (this.isSpirometerNodeModel(nodeModel)) {\n              nodeModel.fef2575 = nodeModel['fef25-75%'];\n              nodeModel.fev1Fev6Ratio = nodeModel['fev1/fev6'];\n              return ['fev1', 'fev6', 'fev1Fev6Ratio', 'fef2575', 'origin'];\n            } else {\n              return [];\n            }\n          }\n        },\n        formInputs: [{\n          translationId: 'SPIROMETER_FEV1',\n          key: 'fev1'\n        }, {\n          translationId: 'SPIROMETER_FEV6',\n          key: 'fev6'\n        }, {\n          translationId: 'SPIROMETER_FEV1_FEV6_RATIO',\n          key: 'fev1/fev6'\n        }, {\n          translationId: 'SPIROMETER_FEF25_75',\n          key: 'fef25-75%'\n        }]\n      }, {\n        nodeTypeName: NodeTypeName.TEMPERATURE_DEVICE_NODE,\n        deviceNodeType: {\n          meterType: meterTypes.THERMOMETER,\n          outputMapper: (measurements, _nodeModel) => measurements\n        },\n        formInputs: [{\n          translationId: 'TEMPERATURE',\n          key: 'temperature'\n        }]\n      }, {\n        nodeTypeName: NodeTypeName.WEIGHT_DEVICE_NODE,\n        deviceNodeType: {\n          meterType: meterTypes.WEIGHT_SCALE,\n          outputMapper: (measurements, _nodeModel) => measurements\n        },\n        formInputs: [{\n          translationId: 'WEIGHT',\n          key: 'weight'\n        }]\n      }, {\n        nodeTypeName: NodeTypeName.OXYGEN_FLOW_DEVICE_NODE,\n        deviceNodeType: {\n          meterType: meterTypes.OXYGEN_FLOW,\n          outputMapper: (measurements, _nodeModel) => measurements\n        },\n        formInputs: [{\n          translationId: 'OXYGEN_FLOW',\n          key: 'oxygenFlow'\n        }]\n      }];\n    }\n    isSpirometerNodeModel(nodeModel) {\n      const spiNodeModel = nodeModel;\n      return spiNodeModel.fev1 !== undefined && spiNodeModel.fev6 !== undefined && spiNodeModel.fef2575 !== undefined && spiNodeModel.fev1Fev6Ratio !== undefined;\n    }\n    onSubmit() {\n      console.log('automatic-device-node.component.ts->onSubmit');\n      console.log(this.nodeForm.value);\n    }\n    get inputControls() {\n      return this.nodeForm.get('inputControls');\n    }\n  }\n  AutomaticDeviceNodeComponent.ɵfac = function AutomaticDeviceNodeComponent_Factory(t) {\n    return new (t || AutomaticDeviceNodeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.DeviceNodeParserService), i0.ɵɵdirectiveInject(i3.TranslateService), i0.ɵɵdirectiveInject(i0.ApplicationRef));\n  };\n  AutomaticDeviceNodeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AutomaticDeviceNodeComponent,\n    selectors: [[\"app-automatic-device-node\"]],\n    inputs: {\n      node: \"node\",\n      nodeMap: \"nodeMap\",\n      scope: \"scope\",\n      parameters: \"parameters\"\n    },\n    decls: 10,\n    vars: 8,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"center-div\"], [1, \"line-wrap\", \"text-element\"], [3, \"info\", \"error\"], [\"class\", \"notification progress\", 4, \"ngIf\"], [\"class\", \"line-wrap\", 4, \"ngIf\"], [\"class\", \"content questionnaire_content\", 4, \"ngIf\"], [\"formArrayName\", \"inputControls\", 1, \"questionnaire-fields\"], [\"class\", \"block\", 4, \"ngFor\", \"ngForOf\"], [1, \"notification\", \"progress\"], [1, \"notification_icon\", \"fas\", \"fa-play-circle\"], [\"id\", \"progress-container\"], [\"id\", \"progress-label\"], [\"id\", \"progress-bar\", \"max\", \"100\", 3, \"value\"], [1, \"line-wrap\"], [1, \"content\", \"questionnaire_content\"], [1, \"block\"], [\"for\", \"measurement\"], [\"type\", \"number\", 3, \"id\", \"name\", \"value\", \"formControlName\"]],\n    template: function AutomaticDeviceNodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function AutomaticDeviceNodeComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"h2\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(4, \"notifications\", 3);\n        i0.ɵɵtemplate(5, AutomaticDeviceNodeComponent_div_5_Template, 7, 5, \"div\", 4);\n        i0.ɵɵtemplate(6, AutomaticDeviceNodeComponent_h1_6_Template, 1, 0, \"h1\", 5);\n        i0.ɵɵtemplate(7, AutomaticDeviceNodeComponent_div_7_Template, 3, 1, \"div\", 6);\n        i0.ɵɵelementStart(8, \"fieldset\", 7);\n        i0.ɵɵtemplate(9, AutomaticDeviceNodeComponent_div_9_Template, 5, 7, \"div\", 8);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.nodeForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.node.text);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"info\", ctx.nodeModel == null ? null : ctx.nodeModel.info)(\"error\", ctx.nodeModel == null ? null : ctx.nodeModel.error);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.nodeModel == null ? null : ctx.nodeModel.error) === undefined && ctx.nodeModel.progress > 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorTitle);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.error);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.inputs);\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormArrayName, i5.NotificationsComponent, i3.TranslatePipe]\n  });\n  return AutomaticDeviceNodeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}