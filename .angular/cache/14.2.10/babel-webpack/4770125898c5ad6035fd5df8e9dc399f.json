{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/state-services/state-passing.service\";\nimport * as i2 from \"src/app/services/rest-api-services/questionnaire-results.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../../header/header/header.component\";\nimport * as i6 from \"../../loading/loading-state/loading-state.component\";\nimport * as i7 from \"@ngx-translate/core\";\nimport * as i8 from \"ngx-moment\";\nfunction QuestionnaireResultsComponent_a_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"a\", 8);\n    i0.ɵɵlistener(\"click\", function QuestionnaireResultsComponent_a_4_Template_a_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const questionnaireResultRef_r1 = restoredCtx.$implicit;\n      const i_r2 = restoredCtx.index;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.showQuestionnaireResult(questionnaireResultRef_r1, i_r2));\n    });\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 9);\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"amDateFormat\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const questionnaireResultRef_r1 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate2(\"id\", \"\", questionnaireResultRef_r1.name, \" \", questionnaireResultRef_r1.resultDate, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 4, questionnaireResultRef_r1.name));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(6, 6, questionnaireResultRef_r1.resultDate, \"lll\"), \" \");\n  }\n}\nexport let QuestionnaireResultsComponent = /*#__PURE__*/(() => {\n  class QuestionnaireResultsComponent {\n    constructor(appContext, questionnaireResultsService, router) {\n      this.appContext = appContext;\n      this.questionnaireResultsService = questionnaireResultsService;\n      this.router = router;\n      this.model = {\n        questionnaireResults: [],\n        pagination: undefined,\n        state: 'Loading'\n      };\n      this.showQuestionnaireResult = (resultRef, index) => {\n        this.requestParams.set(constants.selectedQuestionnaireResult, resultRef);\n        this.requestParams.set(constants.hasOtherQuestionnaireResults, this.model.questionnaireResults.length > 1);\n        if (this.model.questionnaireResults.length === 1) {\n          this.router.navigate(['/questionnaire_results/' + index + '/questionnaire_result'], {\n            replaceUrl: true\n          });\n        } else {\n          this.router.navigate(['/questionnaire_results/' + index + '/questionnaire_result']);\n        }\n      };\n      this.nextPage = () => {\n        var _a;\n        this.model.state = 'Loading';\n        const nextUrl = (_a = this.model.pagination) === null || _a === void 0 ? void 0 : _a.next;\n        if (nextUrl) {\n          this.showPage(nextUrl, false);\n        }\n      };\n      this.previousPage = () => {\n        var _a;\n        this.model.state = 'Loading';\n        const previousUrl = (_a = this.model.pagination) === null || _a === void 0 ? void 0 : _a.previous;\n        if (previousUrl) {\n          this.showPage(previousUrl, false);\n        }\n      };\n      this.onSuccess = (response, initRequest, resultsUrl) => {\n        this.model.state = 'Loaded';\n        this.model.questionnaireResults = response.results;\n        this.model.pagination = response.links;\n        if (initRequest && this.model.questionnaireResults.length === 1) {\n          this.showQuestionnaireResult(this.model.questionnaireResults[0], 0);\n        }\n        this.requestParams.set(constants.questionnaireResultsPage, resultsUrl);\n      };\n      this.onError = data => {\n        this.model.state = 'Failed';\n        console.error(`Failed to load questionnaire results due to error: ${data}`);\n      };\n      this.showPage = (resultsUrl, initRequest) => this.questionnaireResultsService.list(resultsUrl).then(response => {\n        this.onSuccess(response, initRequest, resultsUrl);\n      }).catch(this.onError);\n      const model = {\n        questionnaireResults: [],\n        pagination: {\n          self: ''\n        },\n        state: 'Loading'\n      };\n      this.model = model;\n      const user = this.appContext.getUser();\n      this.requestParams = this.appContext.requestParams;\n      if (this.requestParams.containsKey(constants.questionnaireResultsPage)) {\n        this.showPage(this.requestParams.getAndClear(constants.questionnaireResultsPage), false);\n      } else if ((user === null || user === void 0 ? void 0 : user.links.questionnaireResults) !== undefined) {\n        this.showPage(user.links.questionnaireResults, true);\n      }\n    }\n  }\n  QuestionnaireResultsComponent.ɵfac = function QuestionnaireResultsComponent_Factory(t) {\n    return new (t || QuestionnaireResultsComponent)(i0.ɵɵdirectiveInject(i1.StatePassingService), i0.ɵɵdirectiveInject(i2.QuestionnaireResultsService), i0.ɵɵdirectiveInject(i3.Router));\n  };\n  QuestionnaireResultsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: QuestionnaireResultsComponent,\n    selectors: [[\"app-questionnaire-results\"]],\n    decls: 12,\n    vars: 16,\n    consts: [[1, \"container\"], [3, \"showBackBtn\", \"title\"], [3, \"stateModel\", \"hasNoData\", \"noDataMessage\", \"loadingMessage\", \"failedMessage\"], [1, \"content\"], [\"class\", \"flex_list list_item normal_list_item condensed_list_item\", 3, \"id\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"id\", \"footer\", 1, \"flex-column\"], [\"id\", \"question-left-button\", 1, \"footer-button\", \"left-button\", 3, \"disabled\", \"click\"], [\"id\", \"question-right-button\", \"type\", \"button\", 1, \"footer-button\", \"right-button\", 3, \"disabled\", \"click\"], [1, \"flex_list\", \"list_item\", \"normal_list_item\", \"condensed_list_item\", 3, \"id\", \"click\"], [1, \"result-date\"]],\n    template: function QuestionnaireResultsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"header-menu\", 1)(2, \"loading-state\", 2);\n        i0.ɵɵelementStart(3, \"nav\", 3);\n        i0.ɵɵtemplate(4, QuestionnaireResultsComponent_a_4_Template, 7, 9, \"a\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 5)(6, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function QuestionnaireResultsComponent_Template_button_click_6_listener() {\n          return ctx.previousPage();\n        });\n        i0.ɵɵtext(7);\n        i0.ɵɵpipe(8, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function QuestionnaireResultsComponent_Template_button_click_9_listener() {\n          return ctx.nextPage();\n        });\n        i0.ɵɵtext(10);\n        i0.ɵɵpipe(11, \"translate\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"showBackBtn\", true)(\"title\", \"QUESTIONNAIRE_RESULTS_TITLE\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"stateModel\", ctx.model.state)(\"hasNoData\", ctx.model.questionnaireResults.length === 0)(\"noDataMessage\", \"NO_QUESTIONNAIRE_RESULTS_AVAILABLE\")(\"loadingMessage\", \"QUESTIONNAIRE_RESULTS_LOADING\")(\"failedMessage\", \"QUESTIONNAIRE_RESULTS_FAILED\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.model.questionnaireResults);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", !(ctx.model.pagination == null ? null : ctx.model.pagination.previous));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(8, 12, \"NEWER\"), \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", !(ctx.model.pagination == null ? null : ctx.model.pagination.next));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(11, 14, \"OLDER\"), \" \");\n      }\n    },\n    dependencies: [i4.NgForOf, i5.HeaderComponent, i6.LoadingStateComponent, i7.TranslatePipe, i8.DateFormatPipe]\n  });\n  return QuestionnaireResultsComponent;\n})();\nconst constants = Object.freeze({\n  selectedQuestionnaireResult: 'selectedQuestionnaireResult',\n  hasOtherQuestionnaireResults: 'hasOtherQuestionnaireResults',\n  questionnaireResultsPage: 'questionnaireResultsPage'\n});","map":null,"metadata":{},"sourceType":"module"}