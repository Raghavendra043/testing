{"ast":null,"code":"import { ActivityManualDeviceNodeComponent } from 'src/app/components/questionnaire-nodes/manual/activity-manual-device-node/activity-manual-device-node.component';\nimport { BloodPressureManualDeviceNodeComponent } from 'src/app/components/questionnaire-nodes/manual/blood-pressure-manual-device-node/blood-pressure-manual-device-node.component';\nimport { BloodSugarManualDeviceNodeComponent } from 'src/app/components/questionnaire-nodes/manual/blood-sugar-manual-device-node/blood-sugar-manual-device-node.component';\nimport { BloodSugarMGDLManualDeviceNodeComponent } from 'src/app/components/questionnaire-nodes/manual/blood-sugar-mgdl-manual-device-node/blood-sugar-mgdl-manual-device-node.component';\nimport { CrpManualDeviceNodeComponent } from 'src/app/components/questionnaire-nodes/manual/crp-manual-device-node/crp-manual-device-node.component';\nimport { EnumDeviceNodeComponent } from 'src/app/components/questionnaire-nodes/manual/enum-device-node/enum-device-node.component';\nimport { IONodeComponent } from 'src/app/components/questionnaire-nodes/manual/ionode/ionode.component';\nimport { PainScaleManualDeviceNodeComponent } from 'src/app/components/questionnaire-nodes/manual/pain-scale-manual-device-node/pain-scale-manual-device-node.component';\nimport { SaturationManualDeviceNodeComponent } from 'src/app/components/questionnaire-nodes/manual/saturation-manual-device-node/saturation-manual-device-node.component';\nimport { SaturationWithoutPulseManualDeviceNodeComponent } from 'src/app/components/questionnaire-nodes/manual/saturation-without-pulse-manual-device-node/saturation-without-pulse-manual-device-node.component';\nimport { SpirometerManualDeviceNodeComponent } from 'src/app/components/questionnaire-nodes/manual/spirometer-manual-device-node/spirometer-manual-device-node.component';\nimport { AssignmentNodeComponent } from 'src/app/components/questionnaire-nodes/other/assignment-node/assignment-node.component';\nimport { DecisionNodeComponent } from 'src/app/components/questionnaire-nodes/other/decision-node/decision-node.component';\nimport { EndNodeComponent } from 'src/app/components/questionnaire-nodes/other/end-node/end-node.component';\nimport { ManualDeviceNodeComponent } from '@components/questionnaire-nodes/manual/manual-device-node/manual-device-node.component';\nimport { AutomaticDeviceNodeComponent } from 'src/app/components/questionnaire-nodes/automatic/automatic-device-node/automatic-device-node.component';\nimport { MultipleChoiceNodeComponent } from 'src/app/components/questionnaire-nodes/multiple-choice/multiple-choice-node/multiple-choice-node.component';\nimport { MultipleChoiceQuestionNodeComponent } from 'src/app/components/questionnaire-nodes/multiple-choice/multiple-choice-question-node/multiple-choice-question-node.component';\nimport { MultipleChoiceSummationNodeComponent } from 'src/app/components/questionnaire-nodes/multiple-choice/multiple-choice-summation-node/multiple-choice-summation-node.component';\nimport { DelayNodeComponent } from 'src/app/components/questionnaire-nodes/other/delay-node/delay-node.component';\nimport { AutomaticNodeTypeName, NodeItem, NodeType, NodeTypeName } from 'src/app/types/nodes.type';\nimport { meterTypes } from 'src/app/types/meter.type';\nimport { UnsupportedNodeComponent } from '@components/questionnaire-nodes/other/unsupported-node/unsupported-node.component';\nimport { EcgDeviceNodeComponent } from '@components/questionnaire-nodes/automatic/ecg-device-node/ecg-device-node.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./parser-utils.service\";\nimport * as i2 from \"@services/native-services/native.service\";\nexport let NodesParserService = /*#__PURE__*/(() => {\n  class NodesParserService {\n    constructor(parserUtils, native) {\n      this.parserUtils = parserUtils;\n      this.native = native;\n      this.validate = nodeMap => {\n        const errorTypes = [];\n        const nodes = [];\n        for (const nodeId in nodeMap) {\n          if (nodeMap.hasOwnProperty(nodeId)) {\n            nodes.push(nodeMap[nodeId]);\n          }\n        }\n        if (nodes.length === 0) {\n          throw new TypeError('Questionnaire Node list was empty.');\n        }\n        nodes.forEach(node => {\n          const nodeTypeName = this.parserUtils.getNodeTypeName(node);\n          if (!this.hasParser(nodeTypeName)) {\n            errorTypes.push(nodeTypeName);\n          }\n        });\n        if (errorTypes.length > 0) {\n          const error = new TypeError(`The following Node types are not supported: ${errorTypes}`);\n          throw error;\n        }\n      };\n    }\n    getComponent(nodeTypeName, node, nodeMap, scope) {\n      console.debug(`getComponent: ${nodeTypeName}`);\n      const nativeIsAvailable = this.native.isAvailable();\n      if (\n      //@ts-ignore\n      Object.values(AutomaticNodeTypeName).includes(nodeTypeName) && !nativeIsAvailable) {\n        console.error(`No native available for the automatic device node: ${nodeTypeName}`);\n        return new NodeItem(UnsupportedNodeComponent, node, nodeMap, scope, {\n          type: NodeType.AUTOMATIC,\n          nodeTypeName: nodeTypeName,\n          noNative: 'true'\n        });\n      }\n      switch (nodeTypeName) {\n        case NodeTypeName.ACTIVITY_DEVICE_NODE:\n          {\n            return new NodeItem(AutomaticDeviceNodeComponent, node, nodeMap, scope, {\n              meterTypeName: meterTypes.ACTIVITY_TRACKER.name,\n              nodeTypeName: nodeTypeName\n            });\n          }\n        case NodeTypeName.BLOOD_PRESSURE_DEVICE_NODE:\n          {\n            return new NodeItem(AutomaticDeviceNodeComponent, node, nodeMap, scope, {\n              meterTypeName: meterTypes.BLOOD_PRESSURE_MONITOR.name,\n              nodeTypeName: nodeTypeName\n            });\n          }\n        case NodeTypeName.BLOOD_SUGAR_DEVICE_NODE:\n          {\n            return new NodeItem(AutomaticDeviceNodeComponent, node, nodeMap, scope, {\n              meterTypeName: meterTypes.GLUCOMETER.name,\n              nodeTypeName: nodeTypeName\n            });\n          }\n        case NodeTypeName.SATURATION_DEVICE_NODE:\n          {\n            return new NodeItem(AutomaticDeviceNodeComponent, node, nodeMap, scope, {\n              meterTypeName: meterTypes.OXIMETER.name,\n              nodeTypeName: nodeTypeName\n            });\n          }\n        case NodeTypeName.SATURATION_WITHOUT_PULSE_DEVICE_NODE:\n          {\n            return new NodeItem(AutomaticDeviceNodeComponent, node, nodeMap, scope, {\n              meterTypeName: meterTypes.OXIMETER.name,\n              nodeTypeName: nodeTypeName\n            });\n          }\n        case NodeTypeName.SPIROMETER_DEVICE_NODE:\n          {\n            return new NodeItem(AutomaticDeviceNodeComponent, node, nodeMap, scope, {\n              meterTypeName: meterTypes.SPIROMETER.name,\n              nodeTypeName: nodeTypeName\n            });\n          }\n        case NodeTypeName.TEMPERATURE_DEVICE_NODE:\n          {\n            return new NodeItem(AutomaticDeviceNodeComponent, node, nodeMap, scope, {\n              meterTypeName: meterTypes.THERMOMETER.name,\n              nodeTypeName: nodeTypeName\n            });\n          }\n        case NodeTypeName.WEIGHT_DEVICE_NODE:\n          {\n            return new NodeItem(AutomaticDeviceNodeComponent, node, nodeMap, scope, {\n              meterTypeName: meterTypes.WEIGHT_SCALE.name,\n              nodeTypeName: nodeTypeName\n            });\n          }\n        case NodeTypeName.OXYGEN_FLOW_DEVICE_NODE:\n          {\n            return new NodeItem(AutomaticDeviceNodeComponent, node, nodeMap, scope, {\n              meterTypeName: meterTypes.OXYGEN_FLOW.name,\n              nodeTypeName: nodeTypeName\n            });\n          }\n        case NodeTypeName.ECG_DEVICE_NODE:\n          {\n            return new NodeItem(EcgDeviceNodeComponent, node, nodeMap, scope, {});\n          }\n        // Unsupported automatic node types\n        case NodeTypeName.BLOOD_SUGAR_MGDL_DEVICE_NODE:\n        case NodeTypeName.FEMOM_DEVICE_NODE:\n        case NodeTypeName.PULSE_DEVICE_NODE:\n        case NodeTypeName.RESPIRATORY_RATE_DEVICE_NODE:\n        case NodeTypeName.TEMPERATURE_FAHRENHEIT_DEVICE_NODE:\n        case NodeTypeName.WEIGHT_POUND_DEVICE_NODE:\n          {\n            return new NodeItem(UnsupportedNodeComponent, node, nodeMap, scope, {\n              type: NodeType.AUTOMATIC,\n              nodeTypeName: nodeTypeName\n            });\n          }\n        // Manual measurements\n        case NodeTypeName.ACTIVITY_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(ActivityManualDeviceNodeComponent, node, nodeMap, scope, {});\n          }\n        case NodeTypeName.BLOOD_SUGAR_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(BloodSugarManualDeviceNodeComponent, node, nodeMap, scope, {});\n          }\n        case NodeTypeName.BLOOD_SUGAR_MGDL_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(BloodSugarMGDLManualDeviceNodeComponent, node, nodeMap, scope, {});\n          }\n        case NodeTypeName.BLOOD_PRESSURE_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(BloodPressureManualDeviceNodeComponent, node, nodeMap, scope, {});\n          }\n        case NodeTypeName.PEAK_FLOW_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(ManualDeviceNodeComponent, node, nodeMap, scope, {\n              parserTypeName: 'peakFlow'\n            });\n          }\n        case NodeTypeName.PULSE_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(ManualDeviceNodeComponent, node, nodeMap, scope, {\n              parserTypeName: 'pulse'\n            });\n          }\n        case NodeTypeName.RESPIRATORY_RATE_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(ManualDeviceNodeComponent, node, nodeMap, scope, {\n              parserTypeName: 'respiratoryRate'\n            });\n          }\n        case NodeTypeName.SIT_TO_STAND_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(ManualDeviceNodeComponent, node, nodeMap, scope, {\n              parserTypeName: 'sitToStand'\n            });\n          }\n        case NodeTypeName.TEMPERATURE_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(ManualDeviceNodeComponent, node, nodeMap, scope, {\n              parserTypeName: 'temperature'\n            });\n          }\n        case NodeTypeName.TEMPERATURE_FAHRENHEIT_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(ManualDeviceNodeComponent, node, nodeMap, scope, {\n              parserTypeName: 'temperatureFahrenheit'\n            });\n          }\n        case NodeTypeName.WEIGHT_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(ManualDeviceNodeComponent, node, nodeMap, scope, {\n              parserTypeName: 'weight'\n            });\n          }\n        case NodeTypeName.WEIGHT_POUND_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(ManualDeviceNodeComponent, node, nodeMap, scope, {\n              parserTypeName: 'weightPound'\n            });\n          }\n        case NodeTypeName.OXYGEN_FLOW_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(ManualDeviceNodeComponent, node, nodeMap, scope, {\n              parserTypeName: 'oxygenFlow'\n            });\n          }\n        case NodeTypeName.HEIGHT_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(ManualDeviceNodeComponent, node, nodeMap, scope, {\n              parserTypeName: 'height'\n            });\n          }\n        case NodeTypeName.BODY_CELL_MASS_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(ManualDeviceNodeComponent, node, nodeMap, scope, {\n              parserTypeName: 'bodyCellMass'\n            });\n          }\n        case NodeTypeName.FAT_MASS_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(ManualDeviceNodeComponent, node, nodeMap, scope, {\n              parserTypeName: 'fatMass'\n            });\n          }\n        case NodeTypeName.PHASE_ANGLE_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(ManualDeviceNodeComponent, node, nodeMap, scope, {\n              parserTypeName: 'phaseAngle'\n            });\n          }\n        case NodeTypeName.PAIN_SCALE_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(PainScaleManualDeviceNodeComponent, node, nodeMap, scope, {});\n          }\n        case NodeTypeName.CRP_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(CrpManualDeviceNodeComponent, node, nodeMap, scope, {});\n          }\n        case NodeTypeName.SATURATION_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(SaturationManualDeviceNodeComponent, node, nodeMap, scope, {});\n          }\n        case NodeTypeName.SATURATION_WITHOUT_PULSE_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(SaturationWithoutPulseManualDeviceNodeComponent, node, nodeMap, scope, {});\n          }\n        case NodeTypeName.SPIROMETER_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(SpirometerManualDeviceNodeComponent, node, nodeMap, scope, {});\n          }\n        case NodeTypeName.HEMOGLOBIN_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(ManualDeviceNodeComponent, node, nodeMap, scope, {\n              parserTypeName: 'hemoglobin'\n            });\n          }\n        // Enum nodes\n        case NodeTypeName.URINE_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(EnumDeviceNodeComponent, node, nodeMap, scope, {\n              parserTypeName: 'urine'\n            });\n          }\n        case NodeTypeName.GLUCOSE_URINE_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(EnumDeviceNodeComponent, node, nodeMap, scope, {\n              parserTypeName: 'glucoseUrine'\n            });\n          }\n        case NodeTypeName.BLOOD_URINE_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(EnumDeviceNodeComponent, node, nodeMap, scope, {\n              parserTypeName: 'bloodUrine'\n            });\n          }\n        case NodeTypeName.LEUKOCYTES_URINE_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(EnumDeviceNodeComponent, node, nodeMap, scope, {\n              parserTypeName: 'leukocytesUrine'\n            });\n          }\n        case NodeTypeName.NITRITE_URINE_MANUAL_DEVICE_NODE:\n          {\n            return new NodeItem(EnumDeviceNodeComponent, node, nodeMap, scope, {\n              parserTypeName: 'nitriteUrine'\n            });\n          }\n        // Multiple choice nodes\n        case NodeTypeName.MULTIPLE_CHOICE_NODE:\n          {\n            return new NodeItem(MultipleChoiceNodeComponent, node, nodeMap, scope, {});\n          }\n        case NodeTypeName.MULTIPLE_CHOICE_QUESTION_NODE:\n          {\n            return new NodeItem(MultipleChoiceQuestionNodeComponent, node, nodeMap, scope, {});\n          }\n        case NodeTypeName.MULTIPLE_CHOICE_SUMMATION_NODE:\n          {\n            return new NodeItem(MultipleChoiceSummationNodeComponent, node, nodeMap, scope, {});\n          }\n        // Other nodes\n        case NodeTypeName.DELAY_NODE:\n          {\n            return new NodeItem(DelayNodeComponent, node, nodeMap, scope, {});\n          }\n        case NodeTypeName.IO_NODE:\n          {\n            return new NodeItem(IONodeComponent, node, nodeMap, scope, {});\n          }\n        case NodeTypeName.ASSIGNMENT_NODE:\n          {\n            return new NodeItem(AssignmentNodeComponent, node, nodeMap, scope, {});\n          }\n        case NodeTypeName.DECISION_NODE:\n          {\n            return new NodeItem(DecisionNodeComponent, node, nodeMap, scope, {});\n          }\n        case NodeTypeName.END_NODE:\n          {\n            return new NodeItem(EndNodeComponent, node, nodeMap, scope, {});\n          }\n        default:\n          {\n            console.error(`Unable to get component of nodeType: ${nodeTypeName}`);\n            return new NodeItem(UnsupportedNodeComponent, node, nodeMap, scope, {\n              type: NodeType.UNKNOWN,\n              nodeTypeName: nodeTypeName\n            });\n          }\n      }\n    }\n    getNode(currentNodeId, nodeMap) {\n      const nodeToParse = nodeMap[currentNodeId];\n      const nodeTypeName = this.parserUtils.getNodeTypeName(nodeToParse);\n      if (!this.hasParser(nodeTypeName)) {\n        throw new TypeError(`Node of type ${nodeTypeName} not supported`);\n      }\n      return {\n        nodeToParse: nodeToParse,\n        nodeTypeName: nodeTypeName\n      };\n    }\n    hasParser(nodeTypeName) {\n      return Object.values(NodeTypeName).includes(nodeTypeName);\n    }\n  }\n  NodesParserService.ɵfac = function NodesParserService_Factory(t) {\n    return new (t || NodesParserService)(i0.ɵɵinject(i1.ParserUtilsService), i0.ɵɵinject(i2.NativeService));\n  };\n  NodesParserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NodesParserService,\n    factory: NodesParserService.ɵfac,\n    providedIn: 'root'\n  });\n  return NodesParserService;\n})();","map":null,"metadata":{},"sourceType":"module"}