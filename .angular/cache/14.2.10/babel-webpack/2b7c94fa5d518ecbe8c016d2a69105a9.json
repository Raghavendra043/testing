{"ast":null,"code":"import { HttpContextToken, HttpErrorResponse, HttpEvent, HttpHandler, HttpRequest } from \"@angular/common/http\";\nimport { catchError, finalize, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@services/state-services/state-passing.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@services/rest-api-services/http-notifications.service\";\nexport const ERROR_PASS_THROUGH = new HttpContextToken(() => false);\nexport const SILENT_REQUEST = new HttpContextToken(() => false);\nexport const ALLOW_TIMEOUT = new HttpContextToken(() => false);\nexport let Interceptor = /*#__PURE__*/(() => {\n  class Interceptor {\n    constructor(appContext, router, httpNotificationsProvider) {\n      this.appContext = appContext;\n      this.router = router;\n      this.httpNotificationsProvider = httpNotificationsProvider;\n      this.count = 0;\n      this.router.onSameUrlNavigation = \"reload\";\n    }\n    intercept(req, next) {\n      const options = {\n        silentRequest: req.context.get(SILENT_REQUEST),\n        errorPassThrough: req.context.get(ERROR_PASS_THROUGH),\n        allowTimeout: req.context.get(ALLOW_TIMEOUT)\n      };\n      if (!options.silentRequest && this.count === 0) {\n        this.httpNotificationsProvider.fireRequestStarted(req);\n        this.httpNotificationsProvider.setHttpProgressStatus(true);\n      }\n      this.count++;\n      return next.handle(req).pipe(tap(this.httpNotificationsProvider.fireRequestEnded), catchError(error => {\n        if (error instanceof HttpErrorResponse) {\n          this.responseError(error, options);\n        }\n        this.httpNotificationsProvider.fireRequestEnded(error);\n        console.error(`Interceptor, catchError: ${JSON.stringify(error)}`);\n        throw error;\n      }), finalize(() => {\n        this.count--;\n        if (this.count === 0) {\n          this.httpNotificationsProvider.setHttpProgressStatus(false);\n        }\n      }));\n    }\n    responseError(response, options) {\n      const status = response.status;\n      console.error(`HTTP request to: ${response.url}, failed with status code: ${status}`);\n      if (options.errorPassThrough) {\n        console.info(\"HTTP error pass through enabled, skipping error interceptor logic.\");\n      } else if (status === 401) {\n        localStorage.removeItem(\"authToken\");\n        this.sendToLoginPage();\n        this.appContext.requestParams.set(\"authenticationError\", \"LOGGED_OUT\");\n      } else if (!options.allowTimeout || status !== 0) {\n        this.appContext.requestParams.set(\"exception\", {\n          code: 0\n        });\n        void this.router.navigate([\"error\"]);\n      }\n      throw response;\n    }\n    sendToLoginPage() {\n      const customUrl = sessionStorage.getItem(\"loginUrl\");\n      if (customUrl !== null) {\n        void this.router.navigateByUrl(customUrl);\n      } else {\n        if (this.router.url === \"/login\") {\n          void this.router.navigateByUrl(\"/\", {\n            skipLocationChange: true\n          });\n        }\n        void this.router.navigate([\"login\"]);\n      }\n    }\n  }\n  Interceptor.ɵfac = function Interceptor_Factory(t) {\n    return new (t || Interceptor)(i0.ɵɵinject(i1.StatePassingService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.HttpNotificationsService));\n  };\n  Interceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Interceptor,\n    factory: Interceptor.ɵfac\n  });\n  return Interceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}