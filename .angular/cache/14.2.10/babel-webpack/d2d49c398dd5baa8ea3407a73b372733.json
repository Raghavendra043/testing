{"ast":null,"code":"import { MeasurementTypeName } from '@app/types/measurement-types.type';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/state-services/state-passing.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/services/rest-api-services/measurements.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../../header/header/header.component\";\nimport * as i6 from \"../../loading/loading-state/loading-state.component\";\nimport * as i7 from \"@ngx-translate/core\";\nfunction MyMeasurementsComponent_a_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"a\", 5);\n    i0.ɵɵlistener(\"click\", function MyMeasurementsComponent_a_4_Template_a_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const i_r2 = restoredCtx.index;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.showMeasurement(i_r2));\n    });\n    i0.ɵɵelementStart(1, \"span\", 6);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"i\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const measurementRef_r1 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"id\", measurementRef_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 5, measurementRef_r1.name));\n    i0.ɵɵadvance(2);\n    i0.ɵɵclassMapInterpolate1(\"icon \", measurementRef_r1.icon, \"\");\n  }\n}\nexport let MyMeasurementsComponent = /*#__PURE__*/(() => {\n  class MyMeasurementsComponent {\n    constructor(appContext, router, measurementsService) {\n      this.appContext = appContext;\n      this.router = router;\n      this.measurementsService = measurementsService;\n      this.model = {\n        measurementRefs: [],\n        state: 'Loading'\n      };\n      this.onSuccess = response => {\n        // Contains deprecated types due to backwards-compatibility\n        const ignoredMeasurementTypes = ['FEF25-75%', 'FEV1/FEV6', 'FEV1%', 'FEV6', 'FEV6%', 'ECG', 'CTG', 'LEAK_50%', 'LEAK_95%', 'RESPIRATORY_RATE_50%', 'RESPIRATORY_RATE_95%', 'SATURATION_50%', 'SATURATION_95%', 'TIDAL_VOLUME_50%', 'TIDAL_VOLUME_95%'];\n        let measurementRefs = [];\n        response.measurements.forEach(measurementType => {\n          if (ignoredMeasurementTypes.includes(measurementType.name.toUpperCase())) {\n            return;\n          }\n          const measurementRef = {\n            icon: this.typeToIcon(measurementType.name),\n            name: `MEASUREMENT_TYPE_${measurementType.name.toUpperCase()}`,\n            link: measurementType.links.measurements\n          };\n          if (measurementRef.name === 'MEASUREMENT_TYPE_FEV1') {\n            measurementRef.name = 'MEASUREMENT_TYPE_SPIROMETRY';\n            measurementRefs.push(measurementRef);\n          } else {\n            measurementRefs.push(measurementRef);\n          }\n        });\n        measurementRefs = measurementRefs.sort((m1, m2) => {\n          const nameM1 = m1.name.toUpperCase();\n          const nameM2 = m2.name.toUpperCase();\n          if (nameM1 < nameM2) {\n            return -1;\n          }\n          if (nameM1 > nameM2) {\n            return 1;\n          }\n          return 0;\n        });\n        this.model.measurementRefs = measurementRefs;\n        this.model.state = 'Loaded';\n        if (response.measurements.length === 1) {\n          this.showMeasurement(0);\n        }\n      };\n      this.onError = error => {\n        this.model.state = 'Failed';\n        console.error(`Failed to load measurements due to error: ${error}`);\n      };\n      this.user = this.appContext.getUser();\n    }\n    ngOnInit() {\n      this.measurementsService.listTypes(this.user).then(measurementTypes => this.onSuccess(measurementTypes)).catch(error => this.onError(error));\n    }\n    typeToIcon(measurementName) {\n      switch (measurementName) {\n        case MeasurementTypeName.BLOOD_PRESSURE:\n        case MeasurementTypeName.PULSE:\n          return 'fal fa-heartbeat';\n        case MeasurementTypeName.TEMPERATURE:\n        case MeasurementTypeName.TEMPERATURE_FAHRENHEIT:\n          return 'fal fa-thermometer-three-quarters';\n        case MeasurementTypeName.DAILY_STEPS:\n        case MeasurementTypeName.DAILY_STEPS_WEEKLY_AVERAGE:\n        case MeasurementTypeName.SIT_TO_STAND:\n          return 'fal fa-walking';\n        case MeasurementTypeName.FAT_MASS:\n        case MeasurementTypeName.WEIGHT:\n        case MeasurementTypeName.WEIGHT_POUND:\n          return 'fal fa-weight';\n        case MeasurementTypeName.SPIROMETRY:\n        case MeasurementTypeName.RESPIRATORY_RATE:\n        case MeasurementTypeName.PEAK_FLOW:\n        case MeasurementTypeName.FEV1:\n        case MeasurementTypeName.FEV6:\n        case MeasurementTypeName.FEF25_75:\n        case MeasurementTypeName.FEV1_FEV6_RATIO:\n        case MeasurementTypeName.FEV1_PERCENTAGE:\n        case MeasurementTypeName.FEV6_PERCENTAGE:\n        case MeasurementTypeName.OXYGEN_FLOW:\n        case MeasurementTypeName.SATURATION:\n          return 'fal fa-lungs';\n        case MeasurementTypeName.PROTEIN_IN_URINE:\n        case MeasurementTypeName.GLUCOSE_IN_URINE:\n        case MeasurementTypeName.URINE_BLOOD:\n        case MeasurementTypeName.URINE_NITRITE:\n        case MeasurementTypeName.URINE_LEUKOCYTES:\n        case MeasurementTypeName.CRP:\n          return 'fal fa-vial';\n        case MeasurementTypeName.DURATION:\n        case MeasurementTypeName.DURATION_HOURS:\n          return 'fal fa-bed';\n        case MeasurementTypeName.BLOOD_SUGAR:\n        case MeasurementTypeName.BLOOD_SUGAR_MG_DL:\n        case MeasurementTypeName.HEMOGLOBIN:\n          return 'fal fa-raindrops';\n        case MeasurementTypeName.HEIGHT:\n          return 'fal fa-ruler-vertical';\n        case MeasurementTypeName.PAIN_SCALE:\n        case MeasurementTypeName.BODY_CELL_MASS:\n        case MeasurementTypeName.PHASE_ANGLE:\n          return 'fal fa-male';\n      }\n      throw new Error(`Unknown measurement type: ${measurementName}`);\n    }\n    showMeasurement(selected) {\n      const measurementsList = this.model.measurementRefs;\n      const measurementRef = measurementsList[selected];\n      this.appContext.requestParams.set('selectedMeasurement', measurementRef);\n      this.appContext.requestParams.set('hasOtherMeasurements', measurementsList.length > 1);\n      const extras = measurementsList.length === 1 ? {\n        replaceUrl: true\n      } : {};\n      void this.router.navigate(['my_measurements', selected, 'measurement'], extras);\n    }\n  }\n  MyMeasurementsComponent.ɵfac = function MyMeasurementsComponent_Factory(t) {\n    return new (t || MyMeasurementsComponent)(i0.ɵɵdirectiveInject(i1.StatePassingService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.MeasurementsService));\n  };\n  MyMeasurementsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MyMeasurementsComponent,\n    selectors: [[\"app-my-measurements\"]],\n    decls: 5,\n    vars: 8,\n    consts: [[1, \"container\"], [3, \"title\", \"showBackBtn\"], [3, \"stateModel\", \"hasNoData\", \"noDataMessage\", \"loadingMessage\", \"failedMessage\"], [1, \"content\"], [\"class\", \"list_item normal_list_item\", 3, \"id\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"list_item\", \"normal_list_item\", 3, \"id\", \"click\"], [1, \"before-icon\"], [\"aria-hidden\", \"true\"]],\n    template: function MyMeasurementsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"header-menu\", 1)(2, \"loading-state\", 2);\n        i0.ɵɵelementStart(3, \"nav\", 3);\n        i0.ɵɵtemplate(4, MyMeasurementsComponent_a_4_Template, 5, 7, \"a\", 4);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"title\", \"MY_MEASUREMENTS_TITLE\")(\"showBackBtn\", true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"stateModel\", ctx.model.state)(\"hasNoData\", ctx.model.measurementRefs.length === 0)(\"noDataMessage\", \"MY_MEASUREMENTS_NO_MEASUREMENTS\")(\"loadingMessage\", \"MY_MEASUREMENTS_LOADING\")(\"failedMessage\", \"MY_MEASUREMENTS_FAILED\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.model.measurementRefs);\n      }\n    },\n    dependencies: [i4.NgForOf, i5.HeaderComponent, i6.LoadingStateComponent, i7.TranslatePipe]\n  });\n  return MyMeasurementsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}