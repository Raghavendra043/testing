{"ast":null,"code":"import { FormControl, NonNullableFormBuilder, Validators } from '@angular/forms';\nimport { ComponentParameters } from 'src/app/types/nodes.type';\nimport { RepresentationType } from 'src/app/types/parser.type';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/parser-services/parser-utils.service\";\nimport * as i3 from \"src/app/directives/focus-on-load.directive\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@ngx-translate/core\";\nexport let PainScaleManualDeviceNodeComponent = /*#__PURE__*/(() => {\n  class PainScaleManualDeviceNodeComponent {\n    constructor(formBuilder, parserUtils) {\n      this.formBuilder = formBuilder;\n      this.parserUtils = parserUtils;\n      this.defaultValue = 5;\n      this.nodeForm = this.formBuilder.group({\n        painScaleMeasurement: [this.defaultValue, Validators.required]\n      });\n    }\n    getRepresentation() {\n      const parseNode = (node, _nodeMap, _outputModel) => {\n        const nodeModel = {\n          nodeId: node.nodeName,\n          heading: node.text,\n          painScaleMeasurement: this.defaultValue\n        };\n        if ('comment' in node) {\n          nodeModel.comment = node.comment;\n        }\n        const leftButton = {\n          show: true,\n          text: 'SKIP',\n          nextNodeId: node.nextFail\n        };\n        const rightButton = {\n          show: true,\n          text: 'NEXT',\n          nextNodeId: node.next,\n          click: scope => {\n            const nodeName = node.painScale.name;\n            if ('painScaleMeasurement' in this.nodeForm.value) {\n              const formValue = this.nodeForm.getRawValue();\n              scope.outputModel[nodeName] = {\n                name: nodeName,\n                type: node.painScale.type,\n                value: formValue.painScaleMeasurement\n              };\n              this.parserUtils.addMeasurementCommentToOutput(scope.outputModel, nodeModel, node);\n            }\n          }\n        };\n        const representation = {\n          kind: RepresentationType.NODE,\n          nodeModel: nodeModel,\n          leftButton: leftButton,\n          rightButton: rightButton\n        };\n        this.parserUtils.addHelpMenu(node, representation);\n        return representation;\n      };\n      return parseNode(this.node, this.nodeMap, this.scope.outputModel);\n    }\n    onSubmit() {\n      console.log(this.nodeForm.value);\n    }\n    get painScaleMeasurement() {\n      return this.nodeForm.get('painScaleMeasurement');\n    }\n  }\n  PainScaleManualDeviceNodeComponent.ɵfac = function PainScaleManualDeviceNodeComponent_Factory(t) {\n    return new (t || PainScaleManualDeviceNodeComponent)(i0.ɵɵdirectiveInject(i1.NonNullableFormBuilder), i0.ɵɵdirectiveInject(i2.ParserUtilsService));\n  };\n  PainScaleManualDeviceNodeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PainScaleManualDeviceNodeComponent,\n    selectors: [[\"app-pain-scale-manual-device-node\"]],\n    inputs: {\n      node: \"node\",\n      nodeMap: \"nodeMap\",\n      scope: \"scope\",\n      parameters: \"parameters\"\n    },\n    decls: 13,\n    vars: 12,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"center-div\"], [1, \"line-wrap\", \"text-element\"], [\"src\", \"./assets/images/vas-score.png\", \"css\", \"info-image\", 3, \"alt\"], [\"id\", \"painScale\", \"name\", \"painScale\", \"type\", \"range\", \"min\", \"0\", \"max\", \"10\", \"step\", \"0.1\", \"focusOnLoad\", \"\", \"formControlName\", \"painScaleMeasurement\", \"required\", \"\"], [\"for\", \"painScale\"]],\n    template: function PainScaleManualDeviceNodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function PainScaleManualDeviceNodeComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"h2\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"fieldset\")(5, \"div\");\n        i0.ɵɵelement(6, \"img\", 3);\n        i0.ɵɵpipe(7, \"translate\");\n        i0.ɵɵelement(8, \"input\", 4);\n        i0.ɵɵelementStart(9, \"label\", 5);\n        i0.ɵɵtext(10);\n        i0.ɵɵpipe(11, \"translate\");\n        i0.ɵɵpipe(12, \"number\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.nodeForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.node.text);\n        i0.ɵɵadvance(3);\n        i0.ɵɵpropertyInterpolate(\"alt\", i0.ɵɵpipeBind1(7, 5, \"PAIN_SCALE_ARIA\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate2(\" \", i0.ɵɵpipeBind1(11, 7, \"PAIN_SCALE_CHOSEN_VALUE\"), \": \", i0.ɵɵpipeBind2(12, 9, ctx.nodeForm.value.painScaleMeasurement, \"1.1-1\"), \" \");\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.RangeValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i3.FocusOnLoadDirective, i4.DecimalPipe, i5.TranslatePipe]\n  });\n  return PainScaleManualDeviceNodeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}