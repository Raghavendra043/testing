{"ast":null,"code":"import { isSameDay, subWeeks } from 'date-fns';\nimport moment from 'moment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/state-services/state-passing.service\";\nimport * as i2 from \"src/app/services/util-services/util.service\";\nimport * as i3 from \"src/app/services/rest-api-services/questionnaires.service\";\nimport * as i4 from \"src/app/services/rest-api-services/questionnaire-schedules.service\";\nimport * as i5 from \"@ngx-translate/core\";\nimport * as i6 from \"@angular/router\";\nimport * as i7 from \"@services/rest-api-services/clinician.service\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"../../header/header/header.component\";\nimport * as i10 from \"../../loading/loading-state/loading-state.component\";\nfunction QuestionnairesComponent_a_4_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const questionnaireRef_r2 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", questionnaireRef_r2.scheduleWindow.end, \" \");\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    important_list_item: a0,\n    normal_list_item: a1\n  };\n};\nfunction QuestionnairesComponent_a_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"a\", 6);\n    i0.ɵɵlistener(\"click\", function QuestionnairesComponent_a_4_Template_a_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const i_r3 = restoredCtx.index;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.showQuestionnaire(i_r3));\n    });\n    i0.ɵɵelementStart(1, \"div\", 7)(2, \"span\", 8);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, QuestionnairesComponent_a_4_span_4_Template, 2, 1, \"span\", 9);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const questionnaireRef_r2 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate2(\"id\", \"\", questionnaireRef_r2.name, \" \", questionnaireRef_r2.version, \"\");\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(5, _c0, questionnaireRef_r2.scheduleWindow == null ? null : questionnaireRef_r2.scheduleWindow.open, !(questionnaireRef_r2.scheduleWindow == null ? null : questionnaireRef_r2.scheduleWindow.open)));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", questionnaireRef_r2.name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", questionnaireRef_r2.scheduleWindow);\n  }\n}\nfunction QuestionnairesComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 11)(1, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function QuestionnairesComponent_div_5_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.goOtherQuestionnaires());\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 1, \"OTHER_QUESTIONNAIRES\"), \" \");\n  }\n}\nexport let QuestionnairesComponent = /*#__PURE__*/(() => {\n  class QuestionnairesComponent {\n    constructor(appContext, utils, questionnaires, questionnaireSchedules, translate, router, clinician) {\n      this.appContext = appContext;\n      this.utils = utils;\n      this.questionnaires = questionnaires;\n      this.questionnaireSchedules = questionnaireSchedules;\n      this.translate = translate;\n      this.router = router;\n      this.clinician = clinician;\n      this.model = {\n        state: 'Loading',\n        questionnaires: []\n      };\n      this.isClinician = false;\n      this.receivedQuestionnaires = response => {\n        const questionnaires = response.results;\n        this.model.questionnaires = questionnaires.map(questionnaire => Object.assign(Object.assign({}, questionnaire), {\n          marked: false\n        }));\n        this.model.state = 'Loaded';\n        if (questionnaires.length === 1 && !this.isClinician) {\n          this.showQuestionnaire(0);\n        }\n        const receivedSchedules = schedules => {\n          const questionnaires = this.model.questionnaires;\n          this.model.questionnaires = questionnaires.map(questionnaire => {\n            const schedule = schedules.find(schedule => questionnaire.name === schedule.name);\n            if (!this.utils.exists(schedule) || !this.utils.exists(schedule.nextDeadline) || !this.utils.exists(schedule.scheduleWindowStart)) {\n              return questionnaire;\n            }\n            const nextDeadline = schedule.nextDeadline;\n            const scheduleWindowStart = schedule.scheduleWindowStart;\n            const weekBeforeDeadline = subWeeks(nextDeadline, 1);\n            const now = new Date();\n            // Only shown upcoming schedule window for questionnaires that have to\n            // be answered within the next week.\n            if (now < weekBeforeDeadline) {\n              return questionnaire;\n            }\n            // Formats to local time and replaces spaces with non-breaking spaces\n            // so lines don't break before AM/PM\n            const formatLocalTime = datetime => moment(datetime).format('LT');\n            if (isSameDay(scheduleWindowStart, nextDeadline)) {\n              if (isSameDay(now, nextDeadline)) {\n                const todayDeadline = this.translate.instant('TODAY') + ', ' + formatLocalTime(nextDeadline);\n                questionnaire.scheduleWindow = {\n                  end: todayDeadline,\n                  open: true\n                };\n                return questionnaire;\n                // If outside schedule window\n              } else {\n                questionnaire.scheduleWindow = {\n                  end: moment(nextDeadline).format('ddd'),\n                  open: false\n                };\n                return questionnaire;\n              }\n              // If schedule window spans more than one day\n            } else {\n              // If not yet in schedule window\n              if (now <= scheduleWindowStart) {\n                questionnaire.scheduleWindow = {\n                  end: moment(nextDeadline).format('ddd'),\n                  open: false\n                };\n                return questionnaire;\n              }\n              // If within schedule window and deadline is today\n              if (isSameDay(now, nextDeadline)) {\n                const todayDeadline = this.translate.instant('TODAY') + ', ' + formatLocalTime(nextDeadline);\n                questionnaire.scheduleWindow = {\n                  end: todayDeadline,\n                  open: true\n                };\n                return questionnaire;\n                // If within schedule window and deadline is a later date\n              } else {\n                questionnaire.scheduleWindow = {\n                  end: moment(nextDeadline).format('ddd, LT'),\n                  open: true\n                };\n                return questionnaire;\n              }\n            }\n          });\n        };\n        this.questionnaireSchedules.list(this.user, false).subscribe(receivedSchedules);\n      };\n      this.onError = data => {\n        this.model.state = 'Failed';\n        console.error(`Failed to load questionnaires due to error: ${data}`);\n      };\n      const user = this.appContext.getUser();\n      if (user === undefined) {\n        this.model.state = 'Failed';\n        throw new TypeError('No current user');\n      } else {\n        this.user = user;\n      }\n      this.isClinician = this.clinician.isClinician();\n    }\n    ngOnInit() {\n      this.questionnaires.list(this.user).then(result => this.receivedQuestionnaires(result)).catch(error => this.onError(error));\n    }\n    showQuestionnaire(selected) {\n      const questionnaireRef = this.model.questionnaires[selected];\n      questionnaireRef.marked = false;\n      this.appContext.requestParams.set('selectedQuestionnaire', questionnaireRef);\n      this.appContext.requestParams.set('questionnaireId', selected);\n      if (this.isClinician) {\n        void this.router.navigate(['questionnaires', selected, 'questionnaire']);\n      } else {\n        void this.router.navigate(['questionnaires', selected, 'questionnaire'], this.model.questionnaires.length === 1 ? {\n          replaceUrl: true\n        } : {});\n      }\n    }\n    goOtherQuestionnaires() {\n      this.router.navigate(['questionnaires/other_questionnaires']);\n    }\n  }\n  QuestionnairesComponent.ɵfac = function QuestionnairesComponent_Factory(t) {\n    return new (t || QuestionnairesComponent)(i0.ɵɵdirectiveInject(i1.StatePassingService), i0.ɵɵdirectiveInject(i2.Utils), i0.ɵɵdirectiveInject(i3.QuestionnairesService), i0.ɵɵdirectiveInject(i4.QuestionnaireSchedulesService), i0.ɵɵdirectiveInject(i5.TranslateService), i0.ɵɵdirectiveInject(i6.Router), i0.ɵɵdirectiveInject(i7.ClinicianService));\n  };\n  QuestionnairesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: QuestionnairesComponent,\n    selectors: [[\"app-questionnaires\"]],\n    decls: 6,\n    vars: 10,\n    consts: [[1, \"container\"], [3, \"showBackBtn\", \"isClinician\", \"title\"], [3, \"stateModel\", \"hasNoData\", \"noDataMessage\", \"loadingMessage\", \"failedMessage\"], [1, \"content\"], [\"class\", \"flex_list list_item\", 3, \"id\", \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"id\", \"footer\", \"class\", \"flex-column\", 4, \"ngIf\"], [1, \"flex_list\", \"list_item\", 3, \"id\", \"ngClass\", \"click\"], [1, \"questionnaire_list_item_container\"], [1, \"questionnaire_list_item\"], [\"class\", \"schedule_window_indicator\", 4, \"ngIf\"], [1, \"schedule_window_indicator\"], [\"id\", \"footer\", 1, \"flex-column\"], [\"id\", \"other-questionnaires\", 1, \"footer-button\", \"right-button\", 3, \"click\"]],\n    template: function QuestionnairesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"header-menu\", 1)(2, \"loading-state\", 2);\n        i0.ɵɵelementStart(3, \"nav\", 3);\n        i0.ɵɵtemplate(4, QuestionnairesComponent_a_4_Template, 5, 8, \"a\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, QuestionnairesComponent_div_5_Template, 4, 3, \"div\", 5);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"showBackBtn\", true)(\"isClinician\", ctx.isClinician)(\"title\", \"PERFORM_MEASUREMENTS\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"stateModel\", ctx.model.state)(\"hasNoData\", ctx.model.questionnaires.length === 0)(\"noDataMessage\", \"QUESTIONNAIRES_NO_QUESTIONNAIRES\")(\"loadingMessage\", \"QUESTIONNAIRES_LOADING\")(\"failedMessage\", \"QUESTIONNAIRES_FAILED\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.model.questionnaires);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isClinician);\n      }\n    },\n    dependencies: [i8.NgClass, i8.NgForOf, i8.NgIf, i9.HeaderComponent, i10.LoadingStateComponent, i5.TranslatePipe]\n  });\n  return QuestionnairesComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}