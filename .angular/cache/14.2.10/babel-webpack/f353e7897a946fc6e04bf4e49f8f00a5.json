{"ast":null,"code":"import _asyncToGenerator from \"D:/Users/raghavendra/Desktop/ODE/OPTH/New folder/testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpContext } from \"@angular/common/http\";\nimport { ERROR_PASS_THROUGH, SILENT_REQUEST } from \"@app/interceptors/interceptor\";\nimport { calcUrl } from \"@utils/environment-utils\";\nimport { lastValueFrom } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@services/state-services/config.service\";\nexport let QuestionnaireGroupsService = /*#__PURE__*/(() => {\n  class QuestionnaireGroupsService {\n    constructor(http, configService) {\n      this.http = http;\n      this.configService = configService;\n      this.appConfig = this.configService.getAppConfig();\n    }\n    list(params) {\n      const url = calcUrl(this.appConfig.baseUrl, \"questionnaires/questionnaire-groups\");\n      if (params) {\n        //@ts-ignore\n        return lastValueFrom(this.http.get(url, {\n          params: params,\n          context: new HttpContext().set(ERROR_PASS_THROUGH, true)\n        }));\n      } else {\n        return lastValueFrom(this.http.get(url));\n      }\n    }\n    getQuestionnaires(url, params) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        var _a;\n        const questionnaireUrls = [];\n        const questionnaires = [];\n        try {\n          const questionnaireGroup = yield lastValueFrom(_this.http.get(url, {\n            params: params,\n            context: new HttpContext().set(ERROR_PASS_THROUGH, true)\n          }));\n          for (const questionnaireDefUrl of questionnaireGroup.questionnaires) {\n            const questionnaireDef = yield lastValueFrom(_this.http.get(questionnaireDefUrl, {\n              params: params,\n              context: new HttpContext().set(ERROR_PASS_THROUGH, true).set(SILENT_REQUEST, true)\n            }));\n            if ((_a = questionnaireDef === null || questionnaireDef === void 0 ? void 0 : questionnaireDef.links) === null || _a === void 0 ? void 0 : _a.activeQuestionnaire) {\n              questionnaireUrls.push(questionnaireDef.links.activeQuestionnaire);\n            }\n          }\n          for (const url of questionnaireUrls) {\n            const questionnaire = yield lastValueFrom(_this.http.get(url, {\n              params: params,\n              context: new HttpContext().set(ERROR_PASS_THROUGH, true).set(SILENT_REQUEST, true)\n            }));\n            const newUrl = questionnaire.links.questionnaireResult.substring(0, questionnaire.links.questionnaireResult.lastIndexOf(\"/\"));\n            questionnaire.links[\"questionnaire\"] = newUrl; // Hack to make questionnaire url\n            questionnaires.push(questionnaire);\n          }\n          return questionnaires;\n        } catch (e) {\n          throw new Error(`Failed due to: ${e}`);\n        }\n      })();\n    }\n  }\n  QuestionnaireGroupsService.ɵfac = function QuestionnaireGroupsService_Factory(t) {\n    return new (t || QuestionnaireGroupsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ConfigService));\n  };\n  QuestionnaireGroupsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuestionnaireGroupsService,\n    factory: QuestionnaireGroupsService.ɵfac,\n    providedIn: \"root\"\n  });\n  return QuestionnaireGroupsService;\n})();","map":null,"metadata":{},"sourceType":"module"}