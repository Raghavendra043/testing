{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@services/state-services/config.service\";\nexport let FakeNativeLayerService = /*#__PURE__*/(() => {\n  class FakeNativeLayerService {\n    constructor(config) {\n      this.config = config;\n      this.setupFakeNativeLayer = () => {\n        globalThis.external = {\n          // @ts-ignore\n          notify: raw => {\n            const message = JSON.parse(raw);\n            setTimeout(() => {\n              switch (message.messageType) {\n                case \"clientLoggingEnabled\":\n                  this.sendLogMessagesToWebView();\n                  break;\n                case \"openUrlRequest\":\n                  this.openUrl(message.url);\n                  break;\n                case \"deviceMeasurementRequest\":\n                  this.addDeviceListener(message.meterType, message.parameters);\n                  break;\n                case \"deviceTokenRequest\":\n                  this.sendMessageToWebView({\n                    messageType: \"deviceTokenResponse\",\n                    deviceToken: \"my-device-token\",\n                    deviceOS: \"iOS\"\n                  });\n                  break;\n                case \"stopDeviceMeasurementRequest\":\n                  break;\n                case \"videoEnabledRequest\":\n                  this.sendMessageToWebView({\n                    messageType: \"videoEnabledResponse\",\n                    enabled: false // set 'enabled' to true to mock the video conference feature\n                  });\n\n                  break;\n                case \"startNotificationSoundRequest\":\n                  break;\n                case \"stopNotificationSoundRequest\":\n                  break;\n                case \"startVideoConferenceRequest\":\n                  this.joinConference(message);\n                  break;\n                case \"overdueQuestionnairesRequest\":\n                  this.sendMessageToWebView({\n                    messageType: \"overdueQuestionnairesResponse\",\n                    questionnaireNames: [\"Blodsukker (manuel)\"]\n                  });\n                  break;\n                case \"clearUnreadMessagesRequest\":\n                  console.info(\"Clear unread messages\");\n                  break;\n                case \"clearScheduledQuestionnaireRequest\":\n                  console.info(\"Questionnaire id to clear notification for: \" + message.questionnaireId);\n                  if (message.questionnaireId === null) {\n                    throw new Error(\"Questionnaire ID is null\");\n                  }\n                  break;\n                case \"updateScheduledQuestionnairesRequest\":\n                  console.info(\"Questionnaires to update notifications for: \" + JSON.stringify(message.scheduledQuestionnaires));\n                  break;\n                case \"showPopupDialogRequest\":\n                  console.info(\"Request for show popup dialog, returning ok\");\n                  this.sendMessageToWebView({\n                    messageType: \"showPopupDialogResponse\",\n                    result: true // The user clicked ok...\n                  });\n\n                  break;\n                default:\n                  console.warn(\"Fake native layer does not support message of type: \" + message.messageType);\n              }\n            }, 100);\n          }\n        };\n      };\n      this.weightEvents = [{\n        timestamp: \"2015-05-11T12:33:03.000+02:00\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"CONNECTING\"\n        }\n      }, {\n        timestamp: \"2015-05-11T12:33:05.000+02:00\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"CONNECTED\"\n        }\n      }, {\n        timestamp: \"2015-05-11T12:33:07.000+02:00\",\n        origin: {\n          device_measurement: {\n            connection_type: \"USB\",\n            manufacturer: \"ACME Inc\",\n            firmware_version: \"5-t\",\n            model: \"ABC-1234\",\n            primary_device_identifier: {\n              serial_number: \"1234-555\"\n            },\n            additional_device_identifiers: [{\n              other: {\n                description: \"eui_64\",\n                value: \"1234567890\"\n              }\n            }]\n          }\n        },\n        type: \"measurement\",\n        measurement: {\n          type: \"weight\",\n          unit: \"kg\",\n          value: 85.3\n        }\n      }, {\n        timestamp: \"2015-05-11T12:33:05.000+02:00\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"DISCONNECTED\"\n        }\n      }];\n      this.temperatureEvents = [{\n        timestamp: \"2015-05-11T12:33:03.000+02:00\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"CONNECTING\"\n        }\n      }, {\n        timestamp: \"2015-05-11T12:33:05.000+02:00\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"CONNECTED\"\n        }\n      }, {\n        timestamp: \"2015-05-11T12:33:07.000+02:00\",\n        origin: {\n          device_measurement: {\n            connection_type: \"USB\",\n            manufacturer: \"ACME Inc\",\n            firmware_version: \"5-t\",\n            model: \"ABC-1234\",\n            primary_device_identifier: {\n              serial_number: \"1234-555\"\n            },\n            additional_device_identifiers: [{\n              other: {\n                description: \"eui_64\",\n                value: \"1234567890\"\n              }\n            }]\n          }\n        },\n        type: \"measurement\",\n        measurement: {\n          type: \"temperature\",\n          unit: \"C\",\n          value: 37.3\n        }\n      }, {\n        timestamp: \"2015-05-11T12:33:09.000+02:00\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"DISCONNECTED\"\n        }\n      }];\n      this.bloodPressureEvents = [{\n        timestamp: \"2015-05-11T12:31:13.000+02:00\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"CONNECTING\"\n        }\n      }, {\n        timestamp: \"2015-05-11T12:31:15.000+02:00\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"CONNECTED\"\n        }\n      }, {\n        timestamp: \"2015-05-11T12:31:17.000+02:00\",\n        origin: {\n          device_measurement: {\n            connection_type: \"USB\",\n            manufacturer: \"ACME Inc\",\n            firmware_version: \"5-t\",\n            model: \"ABC-1234\",\n            primary_device_identifier: {\n              serial_number: \"1234-555\"\n            },\n            additional_device_identifiers: [{\n              other: {\n                description: \"eui_64\",\n                value: \"1234567890\"\n              }\n            }]\n          }\n        },\n        type: \"measurement\",\n        measurement: {\n          type: \"blood pressure\",\n          unit: \"mmHg\",\n          value: {\n            systolic: 122,\n            diastolic: 95,\n            meanArterialPressure: 108\n          }\n        }\n      }, {\n        timestamp: \"2015-05-11T12:31:17.000+02:00\",\n        origin: {\n          device_measurement: {\n            connection_type: \"USB\",\n            manufacturer: \"ACME Inc\",\n            firmware_version: \"5-t\",\n            model: \"ABC-1234\",\n            primary_device_identifier: {\n              serial_number: \"1234-555\"\n            },\n            additional_device_identifiers: [{\n              other: {\n                description: \"eui_64\",\n                value: \"1234567890\"\n              }\n            }]\n          }\n        },\n        type: \"measurement\",\n        measurement: {\n          type: \"pulse\",\n          unit: \"bpm\",\n          value: 80\n        }\n      }, {\n        timestamp: \"2015-05-11T12:31:19.000+02:00\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"DISCONNECTED\"\n        }\n      }];\n      this.saturationEvents = [{\n        timestamp: \"2015-06-09T13:43:13.000+02:00\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"SATURATION_CONNECTING\"\n        }\n      }, {\n        timestamp: \"2015-06-09T13:43:15.000+02:00\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"SATURATION_CONNECTED\"\n        }\n      }, {\n        timestamp: \"2015-06-09T13:43:17.000+02:00\",\n        origin: {\n          device_measurement: {\n            connection_type: \"USB\",\n            manufacturer: \"ACME Inc\",\n            firmware_version: \"5-t\",\n            model: \"ABC-1234\",\n            primary_device_identifier: {\n              serial_number: \"1234-555\"\n            },\n            additional_device_identifiers: [{\n              other: {\n                description: \"eui_64\",\n                value: \"1234567890\"\n              }\n            }]\n          }\n        },\n        type: \"measurement\",\n        measurement: {\n          type: \"saturation\",\n          unit: \"%\",\n          value: 98\n        }\n      }, {\n        timestamp: \"2015-06-09T13:43:17.000+02:00\",\n        origin: {\n          device_measurement: {\n            connection_type: \"USB\",\n            manufacturer: \"ACME Inc\",\n            firmware_version: \"5-t\",\n            model: \"ABC-1234\",\n            primary_device_identifier: {\n              serial_number: \"1234-555\"\n            },\n            additional_device_identifiers: [{\n              other: {\n                description: \"eui_64\",\n                value: \"1234567890\"\n              }\n            }]\n          }\n        },\n        type: \"measurement\",\n        measurement: {\n          type: \"pulse\",\n          unit: \"bpm\",\n          value: 80\n        }\n      }, {\n        timestamp: \"2015-06-09T13:43:19.000+02:00\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"SATURATION_DISCONNECTED\"\n        }\n      }];\n      this.spirometerEvents = [{\n        timestamp: \"2015-06-09T13:43:13.000+02:00\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"CONNECTING\"\n        }\n      }, {\n        timestamp: \"2015-06-09T13:43:15.000+02:00\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"CONNECTED\"\n        }\n      }, {\n        timestamp: \"2015-06-09T13:43:17.000+02:00\",\n        origin: {\n          device_measurement: {\n            connection_type: \"USB\",\n            manufacturer: \"ACME Inc\",\n            firmware_version: \"5-t\",\n            model: \"ABC-1234\",\n            primary_device_identifier: {\n              serial_number: \"1234-555\"\n            },\n            additional_device_identifiers: [{\n              other: {\n                description: \"eui_64\",\n                value: \"1234567890\"\n              }\n            }]\n          }\n        },\n        type: \"measurement\",\n        measurement: {\n          type: \"fev1\",\n          unit: \"L\",\n          value: 3.5\n        }\n      }, {\n        timestamp: \"2015-06-09T13:43:17.000+02:00\",\n        origin: {\n          device_measurement: {\n            connection_type: \"USB\",\n            manufacturer: \"ACME Inc\",\n            firmware_version: \"5-t\",\n            model: \"ABC-1234\",\n            primary_device_identifier: {\n              serial_number: \"1234-555\"\n            },\n            additional_device_identifiers: [{\n              other: {\n                description: \"eui_64\",\n                value: \"1234567890\"\n              }\n            }]\n          }\n        },\n        type: \"measurement\",\n        measurement: {\n          type: \"fev6\",\n          unit: \"L\",\n          value: 3.2\n        }\n      }, {\n        timestamp: \"2015-06-09T13:43:17.000+02:00\",\n        origin: {\n          device_measurement: {\n            connection_type: \"USB\",\n            manufacturer: \"ACME Inc\",\n            firmware_version: \"5-t\",\n            model: \"ABC-1234\",\n            primary_device_identifier: {\n              serial_number: \"1234-555\"\n            },\n            additional_device_identifiers: [{\n              other: {\n                description: \"eui_64\",\n                value: \"1234567890\"\n              }\n            }]\n          }\n        },\n        type: \"measurement\",\n        measurement: {\n          type: \"fev1/fev6\",\n          unit: \"%\",\n          value: 80.5\n        }\n      }, {\n        timestamp: \"2015-06-09T13:43:17.000+02:00\",\n        origin: {\n          device_measurement: {\n            connection_type: \"USB\",\n            manufacturer: \"ACME Inc\",\n            firmware_version: \"5-t\",\n            model: \"ABC-1234\",\n            primary_device_identifier: {\n              serial_number: \"1234-555\"\n            },\n            additional_device_identifiers: [{\n              other: {\n                description: \"eui_64\",\n                value: \"1234567890\"\n              }\n            }]\n          }\n        },\n        type: \"measurement\",\n        measurement: {\n          type: \"fef25-75%\",\n          unit: \"L/s\",\n          value: 4.4\n        }\n      }, {\n        timestamp: \"2015-06-09T13:43:19.000+02:00\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"DISCONNECTED\"\n        }\n      }];\n      this.activityEvents = [{\n        timestamp: \"2019-05-27T11:55:58+02:00\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"CONNECTING\"\n        }\n      }, {\n        timestamp: \"2019-05-27T11:55:58+02:00\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"CONNECTED\"\n        }\n      }, {\n        timestamp: \"2019-05-27T11:55:58+02:00\",\n        type: \"status\",\n        status: {\n          type: \"progress\",\n          progress: 20\n        }\n      }, {\n        timestamp: \"2019-05-27T11:55:58+02:00\",\n        type: \"status\",\n        status: {\n          type: \"progress\",\n          progress: 40\n        }\n      }, {\n        timestamp: \"2019-05-27T11:55:58+02:00\",\n        type: \"status\",\n        status: {\n          type: \"progress\",\n          progress: 60\n        }\n      }, {\n        timestamp: \"2019-05-27T11:55:58+02:00\",\n        type: \"status\",\n        status: {\n          type: \"progress\",\n          progress: 80\n        }\n      }, {\n        timestamp: \"2019-05-27T11:55:58+02:00\",\n        type: \"status\",\n        status: {\n          type: \"progress\",\n          progress: 100\n        }\n      }, {\n        timestamp: \"2019-05-27T11:55:58+02:00\",\n        origin: {\n          device_measurement: {\n            connection_type: \"USB\",\n            manufacturer: \"ACME Inc\",\n            firmware_version: \"5-t\",\n            model: \"ABC-1234\",\n            primary_device_identifier: {\n              serial_number: \"1234-555\"\n            },\n            additional_device_identifiers: [{\n              other: {\n                description: \"eui_64\",\n                value: \"1234567890\"\n              }\n            }]\n          }\n        },\n        type: \"measurement\",\n        measurement: {\n          type: \"dailySteps\",\n          unit: \"step count\",\n          value: 9654\n        }\n      }, {\n        timestamp: \"2019-05-27T11:55:58+02:00\",\n        origin: {\n          device_measurement: {\n            connection_type: \"USB\",\n            manufacturer: \"ACME Inc\",\n            firmware_version: \"5-t\",\n            model: \"ABC-1234\",\n            primary_device_identifier: {\n              serial_number: \"1234-555\"\n            },\n            additional_device_identifiers: [{\n              other: {\n                description: \"eui_64\",\n                value: \"1234567890\"\n              }\n            }]\n          }\n        },\n        type: \"measurement\",\n        measurement: {\n          type: \"dailyStepsWeeklyAverage\",\n          unit: \"step count\",\n          value: 5782\n        }\n      }, {\n        timestamp: \"2015-06-09T13:43:17.000+02:00\",\n        origin: {\n          device_measurement: {\n            connection_type: \"USB\",\n            manufacturer: \"ACME Inc\",\n            firmware_version: \"5-t\",\n            model: \"ABC-1234\",\n            primary_device_identifier: {\n              serial_number: \"1234-555\"\n            },\n            additional_device_identifiers: [{\n              other: {\n                description: \"eui_64\",\n                value: \"1234567890\"\n              }\n            }]\n          }\n        },\n        type: \"measurement\",\n        measurement: {\n          type: \"dailyStepsHistoricalMeasurements\",\n          unit: \"step count\",\n          value: [{\n            result: 4820,\n            timeOfMeasurement: \"2019-05-25T00:00:00Z\"\n          }, {\n            result: 9124,\n            timeOfMeasurement: \"2019-05-24T00:00:00Z\"\n          }, {\n            result: 12361,\n            timeOfMeasurement: \"2019-05-23T00:00:00Z\"\n          }, {\n            result: 7343,\n            timeOfMeasurement: \"2019-05-22T00:00:00Z\"\n          }, {\n            result: 2314,\n            timeOfMeasurement: \"2019-05-21T00:00:00Z\"\n          }, {\n            result: 10322,\n            timeOfMeasurement: \"2019-05-20T00:00:00Z\"\n          }]\n        }\n      }, {\n        timestamp: \"2019-05-20T00:00:00Z\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"DISCONNECTED\"\n        }\n      }];\n      this.bloodSugarEvents = [{\n        timestamp: \"Wed Mar 16 10:03:34 GMT+01:00 2016\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"CONNECTING_MYGLUCOHEALTH\"\n        }\n      }, {\n        timestamp: \"Wed Mar 16 10:03:38 GMT+01:00 2016\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"CONNECTED\"\n        }\n      }, {\n        timestamp: \"Wed Mar 16 10:03:40 GMT+01:00 2016\",\n        origin: {\n          device_measurement: {\n            connection_type: \"bluetooth_spp\",\n            manufacturer: \"Entra Health Systems / MyGlucohealth\",\n            model: \"myglucohealth\",\n            primary_device_identifier: {\n              serial_number: \"1080853849\"\n            },\n            additional_device_identifiers: [{\n              mac_address: \"00:13:7B:59:C4:8D\"\n            }]\n          }\n        },\n        type: \"measurement\",\n        measurement: {\n          type: \"blood sugar\",\n          unit: \"mmol/L\",\n          value: {\n            measurements: [{\n              result: 5.11,\n              timeOfMeasurement: \"2016-03-09T15:11:00Z\",\n              isAfterMeal: true,\n              isBeforeMeal: false\n            }, {\n              result: 4.94,\n              timeOfMeasurement: \"2016-03-09T15:09:00Z\",\n              isAfterMeal: false,\n              isBeforeMeal: true\n            }, {\n              result: 5.66,\n              timeOfMeasurement: \"2016-03-04T10:14:00Z\",\n              isAfterMeal: false,\n              isBeforeMeal: false\n            }, {\n              result: 5.49,\n              timeOfMeasurement: \"2016-03-04T10:14:00Z\",\n              isAfterMeal: false,\n              isBeforeMeal: false\n            }, {\n              result: null,\n              timeOfMeasurement: \"2016-03-04T10:13:00Z\",\n              isAfterMeal: true,\n              isBeforeMeal: false\n            }, {\n              result: 5.11,\n              timeOfMeasurement: \"2016-03-04T10:12:00Z\",\n              isAfterMeal: false,\n              isBeforeMeal: true\n            }, {\n              result: 4.5,\n              timeOfMeasurement: \"2016-03-01T13:11:00Z\",\n              isAfterMeal: true,\n              isBeforeMeal: false\n            }],\n            transferTime: \"2016-03-16T10:03:40Z\"\n          }\n        }\n      }, {\n        timestamp: \"Wed Mar 16 10:03:40 GMT+01:00 2016\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"DISCONNECTED\"\n        }\n      }];\n      this.ecgSampleTimeInMinutes = 0.5;\n      this.ecgEvents = [{\n        timestamp: \"Wed Mar 16 10:03:34 GMT+01:00 2016\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"CONNECTING\"\n        }\n      }, {\n        timestamp: \"Wed Mar 16 10:03:38 GMT+01:00 2016\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"CONNECTED\"\n        }\n      }, {\n        timestamp: \"2015-06-09T13:43:19.000+02:00\",\n        type: \"status\",\n        status: {\n          type: \"progress\",\n          progress: this.ecgSampleTimeInMinutes * 10\n        }\n      }, {\n        timestamp: \"2015-06-09T13:43:20.000+02:00\",\n        type: \"status\",\n        status: {\n          type: \"progress\",\n          progress: this.ecgSampleTimeInMinutes * 20\n        }\n      }, {\n        timestamp: \"2015-06-09T13:43:21.000+02:00\",\n        type: \"status\",\n        status: {\n          type: \"progress\",\n          progress: this.ecgSampleTimeInMinutes * 30\n        }\n      }, {\n        timestamp: \"2015-06-09T13:43:22.000+02:00\",\n        type: \"status\",\n        status: {\n          type: \"progress\",\n          progress: this.ecgSampleTimeInMinutes * 40\n        }\n      }, {\n        timestamp: \"2015-06-09T13:43:23.000+02:00\",\n        type: \"status\",\n        status: {\n          type: \"progress\",\n          progress: this.ecgSampleTimeInMinutes * 50\n        }\n      }, {\n        timestamp: \"2015-06-09T13:43:24.000+02:00\",\n        type: \"status\",\n        status: {\n          type: \"progress\",\n          progress: this.ecgSampleTimeInMinutes * 60\n        }\n      }, {\n        timestamp: \"2015-06-09T13:43:25.000+02:00\",\n        origin: {\n          deviceMeasurement: {\n            connectionType: \"bluetooth_spp\",\n            manufacturer: \"Faros\",\n            model: \"360\",\n            primaryDeviceIdentifier: {\n              macAddress: \"00:13:7B:59:C4:8D\"\n            },\n            additionalDeviceIdentifiers: [{\n              firmwareVersion: \"1.0.0.0\"\n            }]\n          }\n        },\n        type: \"measurement\",\n        measurement: {\n          type: \"ecg\",\n          unit: \"mV\",\n          value: {\n            startTime: \"2022-03-16T14:01:24.000+02:00\",\n            duration: {\n              unit: \"s\",\n              value: 30\n            },\n            frequency: {\n              unit: \"Hz\",\n              value: 500\n            },\n            rrIntervals: {\n              unit: \"ms\",\n              value: Array.from({\n                length: this.ecgSampleTimeInMinutes * 60\n              }, () => Math.round(Math.random() * 100))\n            },\n            samples: {\n              unit: \"mV\",\n              channels: [{\n                channel: 1,\n                data: Array.from({\n                  length: this.ecgSampleTimeInMinutes * 60 * 500\n                }, () => Math.round(Math.random() * 5000) / 1000 * (Math.random() > 0.5 ? -1 : 1))\n              }]\n            }\n          }\n        }\n      }, {\n        timestamp: \"Wed Mar 16 10:03:38 GMT+01:00 2016\",\n        type: \"status\",\n        status: {\n          type: \"info\",\n          message: \"DISCONNECTED\"\n        }\n      }];\n      // const openUrl = (url: string) => ($window.location.href = url);\n      this.openUrl = url => globalThis.location.href = url;\n      this.joinConference = _message => {\n        const events = [{\n          timestamp: \"2015-05-11T12:33:03.000+02:00\",\n          type: \"status\",\n          status: {\n            type: \"info\",\n            message: \"CONFERENCE_STARTED\"\n          }\n        }, {\n          timestamp: \"2015-05-11T12:33:13.000+02:00\",\n          type: \"status\",\n          status: {\n            type: \"info\",\n            message: \"CONFERENCE_ENDED\"\n          }\n        }];\n        setTimeout(() => {\n          const event = events[0];\n          this.sendMessageToWebView({\n            messageType: \"videoConferenceResponse\",\n            event: event\n          });\n        }, 1000);\n        setTimeout(() => {\n          const event = events[1];\n          this.sendMessageToWebView({\n            messageType: \"videoConferenceResponse\",\n            event: event\n          });\n        }, 30000);\n      };\n      this.addDeviceListener = (meterType, parameters) => {\n        let events = [];\n        switch (meterType) {\n          case \"weight scale\":\n            events = this.weightEvents;\n            break;\n          case \"activity tracker\":\n            events = this.activityEvents;\n            break;\n          case \"thermometer\":\n            events = this.temperatureEvents;\n            break;\n          case \"blood pressure monitor\":\n            events = this.bloodPressureEvents;\n            break;\n          case \"oximeter\":\n            events = this.saturationEvents;\n            break;\n          case \"spirometer\":\n            events = this.spirometerEvents;\n            break;\n          case \"glucometer\":\n            events = this.bloodSugarEvents;\n            break;\n          case \"ecg\":\n            events = this.ecgEvents;\n            break;\n          default:\n            console.debug(`Unknown meter type: ${meterType}`);\n            return;\n        }\n        let i = 0;\n        const eventInterval = setInterval(() => {\n          if (i >= events.length) {\n            clearInterval(eventInterval);\n            return;\n          }\n          const event = events[i];\n          i++;\n          console.log(\"FakeNative: Sending deviceMeasurementResponse()\");\n          this.sendMessageToWebView({\n            messageType: \"deviceMeasurementResponse\",\n            meterType: meterType,\n            event: event\n          });\n        }, 1000);\n      };\n      this.sendLogMessagesToWebView = () => {\n        setTimeout(() => {\n          this.sendMessageToWebView({\n            messageType: \"logMessagesReady\",\n            entries: [{\n              level: \"info\",\n              message: \"Info message from native layer\",\n              timetamp: new Date().toISOString()\n            }, {\n              level: \"warn\",\n              message: \"Warn message from native layer\",\n              timestamp: new Date().toISOString()\n            }]\n          });\n        }, 5000);\n      };\n      this.sendMessageToWebView = message =>\n      // @ts-ignore\n      globalThis.sendMessageToWebView(JSON.stringify(message));\n      const enabled = this.config.getAppConfig().fakeNativeEnabled;\n      if (enabled) {\n        console.debug(\"Fake native service enabled!\");\n        this.setupFakeNativeLayer();\n      } else {\n        console.debug(\"Fake native service disabled!\");\n      }\n    }\n  }\n  FakeNativeLayerService.ɵfac = function FakeNativeLayerService_Factory(t) {\n    return new (t || FakeNativeLayerService)(i0.ɵɵinject(i1.ConfigService));\n  };\n  FakeNativeLayerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeNativeLayerService,\n    factory: FakeNativeLayerService.ɵfac,\n    providedIn: \"root\"\n  });\n  return FakeNativeLayerService;\n})();","map":null,"metadata":{},"sourceType":"module"}