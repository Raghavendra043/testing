{"ast":null,"code":"import _asyncToGenerator from \"D:/Users/raghavendra/Desktop/ODE/OPTH/New folder/testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpClient, HttpContext } from '@angular/common/http';\nimport { ERROR_PASS_THROUGH, SILENT_REQUEST } from '@app/interceptors/interceptor';\nimport { calcUrl } from '@utils/environment-utils';\nimport { lastValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@services/state-services/config.service\";\nexport let ThresholdService = /*#__PURE__*/(() => {\n  class ThresholdService {\n    constructor(http, configService) {\n      this.http = http;\n      this.configService = configService;\n      this.appConfig = this.configService.getAppConfig();\n    }\n    getThresholdForPatientGroup(patientGroupUrl) {\n      const generalThresholdUrl = calcUrl(this.appConfig.baseUrl, 'thresholds/patient-group-thresholds');\n      const url = calcUrl(generalThresholdUrl, `?patientGroup=${patientGroupUrl}`);\n      const config = {\n        context: new HttpContext().set(ERROR_PASS_THROUGH, true).set(SILENT_REQUEST, true)\n      };\n      return lastValueFrom(this.http.get(url, config));\n    }\n    addThresholdToPatient(body) {\n      const url = calcUrl(this.appConfig.baseUrl, 'thresholds/patient-thresholds');\n      const config = {\n        context: new HttpContext().set(ERROR_PASS_THROUGH, true).set(SILENT_REQUEST, true)\n      };\n      return lastValueFrom(this.http.post(url, body, config));\n    }\n    addPatientGroupThresholdsToPatient(patientResponseBody, patientGroupUrls) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        var _a;\n        const patientUrl = patientResponseBody.links.self;\n        for (const patientGroupUrl of patientGroupUrls) {\n          const thresholds = yield _this.getThresholdForPatientGroup(patientGroupUrl);\n          if (thresholds.results.length > 0) {\n            for (const threshold of thresholds.results) {\n              if (threshold.links) {\n                delete threshold.links;\n              }\n              const body = Object.assign(Object.assign({}, threshold), {\n                links: {\n                  patient: patientUrl\n                }\n              });\n              try {\n                yield _this.addThresholdToPatient(body);\n              } catch (response) {\n                console.log('insde catch');\n                console.log(response);\n                if ((_a = response === null || response === void 0 ? void 0 : response.error) === null || _a === void 0 ? void 0 : _a.errors) {\n                  const error = response.error.errors.find(e => e.error === 'exists');\n                  error ? console.warn(`Patient already has threshold: '${threshold.measurementType}' so this threshold will be ignored ${JSON.stringify(threshold)}`) : console.warn(`Error occured when creating threshold for patient: ${JSON.stringify(response)}`);\n                }\n              }\n            }\n          } else {\n            console.debug(`Patient group: '${patientGroupUrl}' does not have any thresholds`);\n          }\n        }\n      })();\n    }\n  }\n  ThresholdService.ɵfac = function ThresholdService_Factory(t) {\n    return new (t || ThresholdService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ConfigService));\n  };\n  ThresholdService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ThresholdService,\n    factory: ThresholdService.ɵfac,\n    providedIn: 'root'\n  });\n  return ThresholdService;\n})();","map":null,"metadata":{},"sourceType":"module"}