{"ast":null,"code":"import _asyncToGenerator from \"D:/Users/raghavendra/Desktop/ODE/OPTH/New folder/testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { lastValueFrom } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/common/http\";\nexport let ConfigService = /*#__PURE__*/(() => {\n  class ConfigService {\n    constructor(locationStrategy, http) {\n      this.locationStrategy = locationStrategy;\n      this.http = http;\n      this.loaded = false;\n      // Sets placeholder configs\n      this.appConfig = {\n        appType: \"clinicianAndPatientApp\" /* AppType.CLINICIAN_AND_PATIENT */,\n        version: '',\n        fakeNativeEnabled: false,\n        idleTimeoutInSeconds: 600,\n        idleWarningCountdownInSeconds: 0.1,\n        showSeverity: false,\n        showReplies: false,\n        baseUrl: \"/\"\n      };\n      this.oidcConfig = {\n        authorizationEndpoint: \"https: //demo.identityserver.io/connect/authorize\",\n        endSessionEndpoint: \"https: //demo.identityserver.io/connect/endsession\",\n        clientId: \"implicit\",\n        redirectUri: \"http://localhost:8000/placeholder\",\n        postLogoutRedirectUri: \"http://localhost:8000/placeholder\",\n        invalidateSsoSession: false,\n        enabled: false\n      };\n    }\n    loadConfig() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const baseHref = _this.locationStrategy.getBaseHref();\n        const appConfigFile = `${baseHref}assets/config/app.config.json`;\n        const oidcConfigFile = `${baseHref}assets/config/oidc.config.json`;\n        let appConfig = _this.http.get(appConfigFile);\n        _this.appConfig = yield lastValueFrom(appConfig);\n        let oidcConfig = _this.http.get(oidcConfigFile);\n        _this.oidcConfig = yield lastValueFrom(oidcConfig);\n        _this.loaded = true;\n        return true;\n      })();\n    }\n    getAppConfig() {\n      if (this.loaded) {\n        return this.appConfig;\n      } else {\n        throw new Error('APP CONFIG NOT LOADED!');\n      }\n    }\n    getOIDCConfig() {\n      if (this.loaded) {\n        return this.oidcConfig;\n      } else {\n        throw new Error('APP CONFIG NOT LOADED!');\n      }\n    }\n  }\n  ConfigService.ɵfac = function ConfigService_Factory(t) {\n    return new (t || ConfigService)(i0.ɵɵinject(i1.LocationStrategy), i0.ɵɵinject(i2.HttpClient));\n  };\n  ConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConfigService,\n    factory: ConfigService.ɵfac,\n    providedIn: 'root'\n  });\n  return ConfigService;\n})();","map":null,"metadata":{},"sourceType":"module"}