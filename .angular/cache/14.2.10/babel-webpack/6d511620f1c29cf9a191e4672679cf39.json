{"ast":null,"code":"import { ComponentParameters } from 'src/app/types/nodes.type';\nimport { RepresentationType } from 'src/app/types/parser.type';\nimport * as i0 from \"@angular/core\";\nexport let MultipleChoiceSummationNodeComponent = /*#__PURE__*/(() => {\n  class MultipleChoiceSummationNodeComponent {\n    constructor() {\n      this.calculateSum = (outputNamesToInclude, outputs) => {\n        let sum = 0;\n        outputNamesToInclude.forEach(outputName => {\n          sum += outputs[outputName].value;\n        });\n        return sum;\n      };\n      this.branchOnSum = (intervals, sum) => {\n        for (const interval of intervals) {\n          if (sum >= interval.from && sum <= interval.to) {\n            return interval.next;\n          }\n        }\n        throw new Error('The sum does not fall within any of the specified branches. Error in questionnaire. Sum: ' + sum);\n      };\n      this.getNextNode = (node, sum) => {\n        if (node.branchOnSum === true) {\n          return this.branchOnSum(node.intervals, sum);\n        } else {\n          return node.next;\n        }\n      };\n      this.getRepresentation = () => {\n        const sum = this.calculateSum(this.node.questions, this.scope.outputModel);\n        const outputName = this.node.name;\n        const outputType = this.node.type;\n        this.scope.outputModel[outputName] = {\n          name: outputName,\n          type: outputType,\n          value: sum\n        };\n        const nextNode = this.getNextNode(this.node, sum);\n        return {\n          kind: RepresentationType.SKIP,\n          nodeModel: {\n            nodeId: this.node.nodeName\n          },\n          nextNodeId: nextNode\n        };\n      };\n    }\n  }\n  MultipleChoiceSummationNodeComponent.ɵfac = function MultipleChoiceSummationNodeComponent_Factory(t) {\n    return new (t || MultipleChoiceSummationNodeComponent)();\n  };\n  MultipleChoiceSummationNodeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MultipleChoiceSummationNodeComponent,\n    selectors: [[\"app-multiple-choice-summation-node\"]],\n    inputs: {\n      node: \"node\",\n      nodeMap: \"nodeMap\",\n      scope: \"scope\",\n      parameters: \"parameters\"\n    },\n    decls: 0,\n    vars: 0,\n    template: function MultipleChoiceSummationNodeComponent_Template(rf, ctx) {}\n  });\n  return MultipleChoiceSummationNodeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}