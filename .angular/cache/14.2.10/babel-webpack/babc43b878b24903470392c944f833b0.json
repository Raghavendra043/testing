{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { ComponentParameters } from 'src/app/types/nodes.type';\nimport { RepresentationType } from 'src/app/types/parser.type';\nimport { getAllFormFields, getAllFormValues } from '@components/questionnaire-nodes/node-form-utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/parser-services/parser-utils.service\";\nimport * as i3 from \"@services/util-services/util.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"src/app/directives/focus-on-load.directive\";\nimport * as i6 from \"@ngx-translate/core\";\nfunction BloodPressureManualDeviceNodeComponent_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, \"VALUE_INCORRECT_WARNING\"));\n  }\n}\nfunction BloodPressureManualDeviceNodeComponent_span_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, \"VALUE_INCORRECT_WARNING\"));\n  }\n}\nfunction BloodPressureManualDeviceNodeComponent_span_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, \"VALUE_INCORRECT_WARNING\"));\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    warning: a0\n  };\n};\nexport let BloodPressureManualDeviceNodeComponent = /*#__PURE__*/(() => {\n  class BloodPressureManualDeviceNodeComponent {\n    constructor(formBuilder, parserUtils, utils) {\n      this.formBuilder = formBuilder;\n      this.parserUtils = parserUtils;\n      this.utils = utils;\n      this.nodeForm = this.formBuilder.group({\n        systolic: ['', Validators.compose([Validators.required, Validators.min(0), Validators.max(999)])],\n        diastolic: ['', Validators.compose([Validators.required, Validators.min(0), Validators.max(999)])],\n        pulse: ['', Validators.compose([Validators.required, Validators.min(0), Validators.max(999)])]\n      });\n      this.getRepresentation = () => {\n        const nodeModel = Object.assign(Object.assign({\n          nodeId: this.node.nodeName,\n          heading: this.node.text\n        }, this.node.comment ? {\n          comment: this.node.comment\n        } : {}), {\n          info: 'CONNECTING',\n          rangeCheck: nodeModel => {\n            nodeModel = Object.assign({\n              nodeModel\n            }, getAllFormValues(this.nodeForm));\n            return this.parserUtils.checkInputRanges(getAllFormFields(this.nodeForm), this.node, nodeModel);\n          }\n        });\n        const validate = scope => {\n          return !this.nodeForm.invalid;\n        };\n        const clickAction = scope => {\n          const measurements = ['systolic', 'diastolic', 'pulse'];\n          const model = this.nodeForm.value;\n          if ('systolic' in model && 'diastolic' in model && 'pulse' in model) {\n            if (this.utils.exists(model.systolic)) nodeModel.systolic = Number(model.systolic);\n            if (this.utils.exists(model.diastolic)) nodeModel.diastolic = Number(model.diastolic);\n            if (this.utils.exists(model.pulse)) nodeModel.pulse = Number(model.pulse);\n            this.parserUtils.addMeasurementsToOutput(scope.outputModel, nodeModel, this.node, measurements);\n            this.parserUtils.addMeasurementCommentToOutput(scope.outputModel, nodeModel, this.node);\n            this.parserUtils.addManualMeasurementOriginToOutput(scope.outputModel, this.node);\n          }\n        };\n        const leftButton = {\n          show: true,\n          text: 'SKIP',\n          nextNodeId: this.node.nextFail\n        };\n        const rightButton = {\n          show: true,\n          text: 'NEXT',\n          nextNodeId: this.node.next,\n          validate: validate,\n          click: clickAction\n        };\n        const representation = {\n          kind: RepresentationType.NODE,\n          nodeModel: nodeModel,\n          leftButton: leftButton,\n          rightButton: rightButton\n        };\n        this.parserUtils.addHelpMenu(this.node, representation);\n        return representation;\n      };\n    }\n    isOffendingValue(valueName) {\n      return this.scope.hasOffendingValue(valueName);\n    }\n    onSubmit() {\n      console.log(this.nodeForm.value);\n    }\n    get systolic() {\n      return this.nodeForm.get('systolic');\n    }\n    get diastolic() {\n      return this.nodeForm.get('diastolic');\n    }\n    get pulse() {\n      return this.nodeForm.get('pulse');\n    }\n  }\n  BloodPressureManualDeviceNodeComponent.ɵfac = function BloodPressureManualDeviceNodeComponent_Factory(t) {\n    return new (t || BloodPressureManualDeviceNodeComponent)(i0.ɵɵdirectiveInject(i1.NonNullableFormBuilder), i0.ɵɵdirectiveInject(i2.ParserUtilsService), i0.ɵɵdirectiveInject(i3.Utils));\n  };\n  BloodPressureManualDeviceNodeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BloodPressureManualDeviceNodeComponent,\n    selectors: [[\"blood-pressure-manual-device-node\"]],\n    inputs: {\n      node: \"node\",\n      nodeMap: \"nodeMap\",\n      scope: \"scope\",\n      parameters: \"parameters\"\n    },\n    decls: 24,\n    vars: 25,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"center-div\"], [1, \"line-wrap\", \"text-element\"], [1, \"questionnaire-fields\"], [1, \"block\"], [\"for\", \"blood-pressure-systolic\"], [\"id\", \"blood-pressure-systolic\", \"type\", \"number\", \"name\", \"blood-pressure-systolic\", \"focusOnLoad\", \"\", \"formControlName\", \"systolic\", 3, \"ngClass\"], [\"id\", \"blood-pressure-systolic-warning\", \"class\", \"warning\", 4, \"ngIf\"], [\"for\", \"blood-pressure-diastolic\"], [\"id\", \"blood-pressure-diastolic\", \"type\", \"number\", \"name\", \"blood-pressure-diastolic\", \"formControlName\", \"diastolic\", 3, \"ngClass\"], [\"id\", \"blood-pressure-diastolic-warning\", \"class\", \"warning\", 4, \"ngIf\"], [\"for\", \"blood-pressure-pulse\"], [\"id\", \"blood-pressure-pulse\", \"type\", \"number\", \"name\", \"blood-pressure-pulse\", \"formControlName\", \"pulse\", 3, \"ngClass\"], [\"id\", \"blood-pressure-pulse-warning\", \"class\", \"warning\", 4, \"ngIf\"], [\"id\", \"blood-pressure-systolic-warning\", 1, \"warning\"], [\"id\", \"blood-pressure-diastolic-warning\", 1, \"warning\"], [\"id\", \"blood-pressure-pulse-warning\", 1, \"warning\"]],\n    template: function BloodPressureManualDeviceNodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function BloodPressureManualDeviceNodeComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"h2\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵpipe(4, \"translate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(5, \"fieldset\", 3)(6, \"div\", 4)(7, \"label\", 5);\n        i0.ɵɵtext(8);\n        i0.ɵɵpipe(9, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 6);\n        i0.ɵɵtemplate(11, BloodPressureManualDeviceNodeComponent_span_11_Template, 3, 3, \"span\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 4)(13, \"label\", 8);\n        i0.ɵɵtext(14);\n        i0.ɵɵpipe(15, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"input\", 9);\n        i0.ɵɵtemplate(17, BloodPressureManualDeviceNodeComponent_span_17_Template, 3, 3, \"span\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 4)(19, \"label\", 11);\n        i0.ɵɵtext(20);\n        i0.ɵɵpipe(21, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(22, \"input\", 12);\n        i0.ɵɵtemplate(23, BloodPressureManualDeviceNodeComponent_span_23_Template, 3, 3, \"span\", 13);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.nodeForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 11, ctx.node.text));\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(9, 13, \"BLOOD_PRESSURE_SYSTOLIC\"), \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(19, _c0, ctx.isOffendingValue(\"systolic\")));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isOffendingValue(\"systolic\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(15, 15, \"BLOOD_PRESSURE_DIASTOLIC\"), \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(21, _c0, ctx.isOffendingValue(\"diastolic\")));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isOffendingValue(\"diastolic\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(21, 17, \"BLOOD_PRESSURE_PULSE\"), \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(23, _c0, ctx.isOffendingValue(\"pulse\")));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isOffendingValue(\"pulse\"));\n      }\n    },\n    dependencies: [i4.NgClass, i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i5.FocusOnLoadDirective, i6.TranslatePipe]\n  });\n  return BloodPressureManualDeviceNodeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}