{"ast":null,"code":"import { PINCODE_SET } from \"@utils/globals\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/state-services/state-passing.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/services/native-services/native.service\";\nimport * as i4 from \"src/app/services/state-services/user-session.service\";\nimport * as i5 from \"@ngx-translate/core\";\nimport * as i6 from \"src/app/services/rest-api-services/authentication.service\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/forms\";\nimport * as i9 from \"../../../header/header/header.component\";\nfunction PinCodeLoginComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵelement(1, \"i\", 17);\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 1, ctx_r0.model.error));\n  }\n}\nfunction PinCodeLoginComponent_i_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 18);\n  }\n}\nexport let PinCodeLoginComponent = /*#__PURE__*/(() => {\n  class PinCodeLoginComponent {\n    constructor(appContext, router, native, userSession, translate, authentication) {\n      this.appContext = appContext;\n      this.router = router;\n      this.native = native;\n      this.userSession = userSession;\n      this.translate = translate;\n      this.authentication = authentication;\n      this.model = {\n        state: \"Initial\"\n      };\n      this.loaded = () => {\n        return this.root ? true : false;\n      };\n      this.userSession.init().then(root => this.root = root).catch(() => this.model.error = \"OPENTELE_UNAVAILABLE_TEXT\");\n    }\n    forgotPinCode() {\n      const confirmText = this.translate.instant(\"LOGOUT_CONFIRM_RESET_PINCODE_MSG\");\n      const okButtonText = this.translate.instant(\"OK\");\n      const cancelButtonText = this.translate.instant(\"Cancel\");\n      this.native.showConfirmDialog(confirmText, okButtonText, cancelButtonText, okClicked => {\n        if (!okClicked) {\n          return;\n        }\n        const currentUser = this.appContext.currentUser.get();\n        this.authentication.logout(currentUser).subscribe(() => {\n          PINCODE_SET.set(false);\n          this.router.navigate([\"/reset_login\"]);\n        });\n      });\n    }\n    login() {\n      this.model.state = \"Loading\";\n      const authUrl = this.root.links.auth;\n      this.authentication.pinCodeLogin(authUrl, this.model.pinCode).then(data => {\n        if (\"claims\" in data) {\n          this.onSuccess(data);\n          this.model.state = \"Loaded\";\n        } else {\n          throw data;\n        }\n      }).catch(error => this.onError(error));\n    }\n    onSuccess({\n      claims,\n      canChangePassword,\n      logoutUrl,\n      organizations\n    }) {\n      this.userSession.completeLogin(this.root, claims, canChangePassword, logoutUrl, organizations);\n    }\n    onError(response) {\n      this.model.state = \"Failed\";\n      const status = response.status;\n      const data = response.data;\n      console.error(\"PIN-code login failed: \" + JSON.stringify(status, null, 4) + \"\\n\" + JSON.stringify(data, null, 4));\n      switch (status) {\n        case -1:\n          this.router.navigate([\"/login\"]);\n          break;\n        case 401:\n          if (data.code === \"BAD_MFA_CREDENTIALS\") {\n            this.model.error = \"PINCODE_BAD_CREDENTIALS\";\n          } else {\n            this.model.error = \"ACCOUNT_LOCKED\";\n          }\n          break;\n      }\n    }\n  }\n  PinCodeLoginComponent.ɵfac = function PinCodeLoginComponent_Factory(t) {\n    return new (t || PinCodeLoginComponent)(i0.ɵɵdirectiveInject(i1.StatePassingService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.NativeService), i0.ɵɵdirectiveInject(i4.UserSessionService), i0.ɵɵdirectiveInject(i5.TranslateService), i0.ɵɵdirectiveInject(i6.AuthenticationService));\n  };\n  PinCodeLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PinCodeLoginComponent,\n    selectors: [[\"app-pin-code-login\"]],\n    decls: 21,\n    vars: 14,\n    consts: [[1, \"container\"], [3, \"showLogo\"], [1, \"content\", \"space_between\"], [\"class\", \"notification error\", 4, \"ngIf\"], [1, \"fill\"], [\"id\", \"pin-code-form\", \"autocomplete\", \"off\", \"autocorrect\", \"off\", \"autocapitalize\", \"off\", 1, \"login_form\", 3, \"ngSubmit\"], [\"pinCodeForm\", \"ngForm\"], [\"id\", \"input-container\"], [1, \"login_input\"], [1, \"fal\", \"fa-lock-alt\"], [\"id\", \"pincode\", \"required\", \"\", \"type\", \"text\", \"inputmode\", \"numeric\", \"step\", \"1\", \"size\", \"13\", \"autocomplete\", \"off\", \"autocorrect\", \"off\", \"autocapitalize\", \"off\", \"name\", \"pinCode\", 1, \"pincode\", 3, \"placeholder\", \"ngModel\", \"ngModelChange\"], [1, \"button_container\"], [\"type\", \"submit\", 3, \"disabled\"], [\"class\", \"fa fa-spinner fa-spin\", 4, \"ngIf\"], [\"id\", \"forgot-pincode-container\"], [\"id\", \"forgot-pincode\", 1, \"link\", 3, \"click\"], [1, \"notification\", \"error\"], [1, \"notification_icon\", \"fas\", \"fa-exclamation-triangle\"], [1, \"fa\", \"fa-spinner\", \"fa-spin\"]],\n    template: function PinCodeLoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"header-menu\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtemplate(3, PinCodeLoginComponent_div_3_Template, 5, 3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4)(5, \"form\", 5, 6);\n        i0.ɵɵlistener(\"ngSubmit\", function PinCodeLoginComponent_Template_form_ngSubmit_5_listener() {\n          return ctx.login();\n        });\n        i0.ɵɵelementStart(7, \"div\", 7)(8, \"div\", 8);\n        i0.ɵɵelement(9, \"i\", 9);\n        i0.ɵɵelementStart(10, \"input\", 10);\n        i0.ɵɵlistener(\"ngModelChange\", function PinCodeLoginComponent_Template_input_ngModelChange_10_listener($event) {\n          return ctx.model.pinCode = $event;\n        });\n        i0.ɵɵpipe(11, \"translate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\", 11)(13, \"button\", 12);\n        i0.ɵɵtext(14);\n        i0.ɵɵpipe(15, \"translate\");\n        i0.ɵɵtemplate(16, PinCodeLoginComponent_i_16_Template, 1, 0, \"i\", 13);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(17, \"div\", 14)(18, \"a\", 15);\n        i0.ɵɵlistener(\"click\", function PinCodeLoginComponent_Template_a_click_18_listener() {\n          return ctx.forgotPinCode();\n        });\n        i0.ɵɵtext(19);\n        i0.ɵɵpipe(20, \"translate\");\n        i0.ɵɵelementEnd()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"showLogo\", true);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.model.error);\n        i0.ɵɵadvance(7);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(11, 8, \"LOGIN_MFA_PINCODE\"));\n        i0.ɵɵproperty(\"ngModel\", ctx.model.pinCode);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", !ctx.loaded() || ctx.model.state === \"Loading\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.model.state !== \"Loading\" ? i0.ɵɵpipeBind1(15, 10, \"LOGIN_LOGIN_BUTTON\") : \"\", \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.model.state === \"Loading\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(20, 12, \"LOGIN_FORGOT_PINCODE\"), \" \");\n      }\n    },\n    dependencies: [i7.NgIf, i8.ɵNgNoValidate, i8.DefaultValueAccessor, i8.NgControlStatus, i8.NgControlStatusGroup, i8.RequiredValidator, i8.NgModel, i8.NgForm, i9.HeaderComponent, i5.TranslatePipe]\n  });\n  return PinCodeLoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}