{"ast":null,"code":"// @ts-nocheck\nimport { ApplicationRef } from '@angular/core';\nimport { meterTypes } from '@app/types/meter.type';\nimport { exists } from '@components/questionnaire-nodes/node-form-utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@services/parser-services/parser-utils.service\";\nimport * as i2 from \"@ng-idle/core\";\nimport * as i3 from \"@services/native-services/native.service\";\nimport * as i4 from \"@services/device-listener-services/device-listener.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../../../notifications/notifications/notifications.component\";\nimport * as i7 from \"@ngx-translate/core\";\nfunction EcgDeviceNodeComponent_div_5_label_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"number\");\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", i0.ɵɵpipeBind2(2, 2, ctx_r1.nodeModel.remaining / 60, \"1.0-0\"), \" \", i0.ɵɵpipeBind1(3, 5, \"ECG_MINUTES_LEFT\"), \" \");\n  }\n}\nfunction EcgDeviceNodeComponent_div_5_label_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", ctx_r2.nodeModel.remaining, \" \", i0.ɵɵpipeBind1(2, 2, \"ECG_SECONDS_LEFT\"), \" \");\n  }\n}\nfunction EcgDeviceNodeComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵelement(1, \"i\", 5);\n    i0.ɵɵelementStart(2, \"div\", 6);\n    i0.ɵɵtemplate(3, EcgDeviceNodeComponent_div_5_label_3_Template, 4, 7, \"label\", 7);\n    i0.ɵɵtemplate(4, EcgDeviceNodeComponent_div_5_label_4_Template, 3, 4, \"label\", 7);\n    i0.ɵɵelement(5, \"progress\", 8);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.nodeModel.remaining > 60);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.nodeModel.remaining <= 60);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"value\", ctx_r0.nodeModel.progress);\n  }\n}\nexport let EcgDeviceNodeComponent = /*#__PURE__*/(() => {\n  class EcgDeviceNodeComponent {\n    constructor(parserUtils, idle, native, deviceListener, applicationRef) {\n      this.parserUtils = parserUtils;\n      this.idle = idle;\n      this.native = native;\n      this.deviceListener = deviceListener;\n      this.applicationRef = applicationRef;\n      this.node = undefined;\n      this.nodeMap = undefined;\n      this.outputModel = undefined;\n      //Form\n      this.nodeModel = undefined;\n      this.generateRepresentation = (node, nodeModel) => {\n        const leftButton = {\n          text: 'SKIP',\n          nextNodeId: node.nextFail\n        };\n        const createRightButton = () => {\n          const validateRightButton = scope => {\n            if ('samples' in this.nodeModel) {\n              const nodeModel = this.nodeModel;\n              return exists(nodeModel.startTime) && exists(nodeModel.duration) && exists(nodeModel.frequency) && exists(nodeModel.rrIntervals) && exists(nodeModel.samples);\n            } else {\n              return false;\n            }\n          };\n          const clickActionRightButton = scope => {\n            const measurements = ['startTime', 'duration', 'frequency', 'rrIntervals', 'samples', 'origin'];\n            this.startIdleWatcher();\n            this.parserUtils.addMeasurementsToOutput(scope.outputModel, nodeModel, node, measurements);\n            this.parserUtils.addMeasurementCommentToOutput(scope.outputModel, nodeModel, node);\n          };\n          return {\n            text: 'NEXT',\n            nextNodeId: node.next,\n            validate: validateRightButton,\n            click: clickActionRightButton\n          };\n        };\n        const rightButton = createRightButton();\n        const representation = {\n          nodeModel: nodeModel,\n          leftButton: leftButton,\n          rightButton: rightButton\n        };\n        return representation;\n      };\n    }\n    getRepresentation() {\n      const sampleTimeInSeconds = this.node.sampleTimeInSeconds;\n      this.nodeModel = {\n        heading: this.node.text,\n        comment: this.node.comment,\n        info: 'CONNECTING',\n        sampleTime: sampleTimeInSeconds,\n        remaining: sampleTimeInSeconds,\n        progress: 0\n      };\n      this.nodeModel.setValue = (key, value) => {\n        // Bit of a hack we have to use in order to trigger the re-rendering and\n        // re-validation of the questionnaire form upon receiving a\n        // status/measurement from the native layer.\n        if (this.nodeModel !== undefined) {\n          this.nodeModel[key] = value;\n          this.applicationRef.tick();\n        }\n      };\n      const meterType = meterTypes.ECG;\n      const parameters = Object.freeze({\n        sampleTimeInSeconds: sampleTimeInSeconds\n      });\n      const eventListener = this.deviceListener.create(this.nodeModel, meterType);\n      const nativeEventCallback = message => {\n        if (message.meterType !== meterType.name) {\n          return;\n        } else if (message.event !== undefined) {\n          eventListener(message.event);\n        }\n      };\n      const listenerAdded = this.native.addDeviceListener(meterType.name, parameters);\n      if (!listenerAdded) {\n        const error = new Error(`Could not add device listener for ${meterType.name}`);\n        throw error;\n      }\n      this.native.subscribeToMultipleMessages('deviceMeasurementResponse', nativeEventCallback);\n      this.idle.stop();\n      const representation = this.generateRepresentation(this.node, this.nodeModel);\n      this.parserUtils.addHelpMenu(this.node, representation);\n      return representation;\n    }\n    startIdleWatcher() {\n      if (this.idle.isRunning()) {\n        return;\n      }\n      this.idle.watch();\n    }\n  }\n  EcgDeviceNodeComponent.ɵfac = function EcgDeviceNodeComponent_Factory(t) {\n    return new (t || EcgDeviceNodeComponent)(i0.ɵɵdirectiveInject(i1.ParserUtilsService), i0.ɵɵdirectiveInject(i2.Idle), i0.ɵɵdirectiveInject(i3.NativeService), i0.ɵɵdirectiveInject(i4.DeviceListenerService), i0.ɵɵdirectiveInject(i0.ApplicationRef));\n  };\n  EcgDeviceNodeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EcgDeviceNodeComponent,\n    selectors: [[\"app-ecg-device-node\"]],\n    inputs: {\n      node: \"node\",\n      nodeMap: \"nodeMap\",\n      outputModel: \"outputModel\"\n    },\n    decls: 6,\n    vars: 6,\n    consts: [[1, \"center-div\"], [1, \"line-wrap\", \"text-element\"], [3, \"info\", \"error\"], [\"class\", \"notification progress\", 4, \"ngIf\"], [1, \"notification\", \"progress\"], [1, \"notification_icon\", \"fas\", \"fa-play-circle\"], [\"id\", \"progress-container\"], [\"id\", \"progress-label\", 4, \"ngIf\"], [\"id\", \"progress-bar\", \"max\", \"100\", 3, \"value\"], [\"id\", \"progress-label\"]],\n    template: function EcgDeviceNodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵpipe(3, \"translate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(4, \"notifications\", 2);\n        i0.ɵɵtemplate(5, EcgDeviceNodeComponent_div_5_Template, 6, 3, \"div\", 3);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, ctx.nodeModel.heading), \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"info\", ctx.nodeModel.info)(\"error\", ctx.nodeModel.error);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.nodeModel == null ? null : ctx.nodeModel.error) === undefined);\n      }\n    },\n    dependencies: [i5.NgIf, i6.NotificationsComponent, i5.DecimalPipe, i7.TranslatePipe]\n  });\n  return EcgDeviceNodeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}