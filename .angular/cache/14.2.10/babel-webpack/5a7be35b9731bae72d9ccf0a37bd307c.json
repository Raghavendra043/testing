{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let Utils = /*#__PURE__*/(() => {\n  class Utils {\n    constructor() {\n      this.urlToId = url => Number(url.match(/\\d+$/g)[0]);\n    }\n    exists(obj) {\n      return typeof obj !== 'undefined' && obj !== null;\n    }\n    /**\r\n     * @deprecated Use {@link exists} with optional chaining instead\r\n     * @example\r\n     * exists(obj?.prop1?.prop2)\r\n     */\n    hasNestedProperty(obj, propertyPath) {\n      const reducer = (acc, part) => {\n        if (acc instanceof Object && part in acc) {\n          return acc[part];\n        } else {\n          return undefined;\n        }\n      };\n      const result = propertyPath.split('.').reduce(reducer, obj);\n      return this.exists(result);\n    }\n    groupBy(arr, discriminator) {\n      return arr.reduce((map, t) => {\n        var _a;\n        const key = discriminator(t);\n        const group = (_a = map.get(key)) !== null && _a !== void 0 ? _a : [];\n        group.push(t);\n        return map.set(key, group);\n      }, new Map());\n    }\n    compareBy(getter) {\n      return (t1, t2) => {\n        const a = getter(t1);\n        const b = getter(t2);\n        return a < b ? -1 : b < a ? 1 : 0;\n      };\n    }\n    sortBy(arr, getter) {\n      return arr.sort(this.compareBy(getter));\n    }\n  }\n  Utils.ɵfac = function Utils_Factory(t) {\n    return new (t || Utils)();\n  };\n  Utils.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Utils,\n    factory: Utils.ɵfac,\n    providedIn: 'root'\n  });\n  return Utils;\n})();","map":null,"metadata":{},"sourceType":"module"}