{"ast":null,"code":"import { HttpEvent, HttpHandler, HttpRequest } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@services/state-services/state-passing.service\";\nimport * as i2 from \"@services/util-services/util.service\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(appContext, utils) {\n      this.appContext = appContext;\n      this.utils = utils;\n    }\n    intercept(request, next) {\n      const useDefaultAuth = this.appContext.requestParams.get('useDefaultAuth');\n      const authorization = this.appContext.requestParams.get(\"authorizationHeader\");\n      const patientAuthorization = this.appContext.requestParams.get('patientAuthorizationHeader');\n      let clone;\n      if (useDefaultAuth && this.utils.exists(authorization)) {\n        clone = request.clone({\n          setHeaders: {\n            Authorization: authorization\n          }\n        });\n        return next.handle(clone);\n      } else {\n        if (this.utils.exists(authorization) && !this.alreadyHasAuthHeaders(request)) {\n          if (this.utils.exists(patientAuthorization)) {\n            clone = request.clone({\n              setHeaders: {\n                Authorization: patientAuthorization\n              }\n            });\n          } else {\n            clone = request.clone({\n              setHeaders: {\n                Authorization: authorization\n              }\n            });\n          }\n          return next.handle(clone);\n        } else {\n          return next.handle(request);\n        }\n      }\n    }\n    alreadyHasAuthHeaders(request) {\n      return request.headers.has(\"authorization\");\n    }\n  }\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.StatePassingService), i0.ɵɵinject(i2.Utils));\n  };\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}