{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { Validators } from \"@angular/forms\";\nimport { ComponentParameters } from \"src/app/types/nodes.type\";\nimport { RepresentationType } from \"src/app/types/parser.type\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nfunction MultipleChoiceNodeComponent_li_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 6);\n    i0.ɵɵelement(1, \"input\", 7);\n    i0.ɵɵelementStart(2, \"label\", 8);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const choice_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"radio-\", i_r2, \"\");\n    i0.ɵɵproperty(\"value\", i_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"for\", \"radio-\", i_r2, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(choice_r1.text);\n  }\n}\nexport let MultipleChoiceNodeComponent = /*#__PURE__*/(() => {\n  class MultipleChoiceNodeComponent {\n    constructor(formBuilder) {\n      this.formBuilder = formBuilder;\n      this.choices = [];\n      this.nodeForm = this.formBuilder.group({\n        selectedIndex: [-1, Validators.compose([Validators.required, Validators.min(0)])]\n      });\n    }\n    getRepresentation() {\n      const parseNode = (node, _nodeMap, _outputModel) => {\n        const nodeModel = {\n          nodeId: node.nodeName,\n          heading: node.question,\n          choices: node.answer.choices\n        };\n        for (const choice of nodeModel.choices) {\n          const {\n              next\n            } = choice,\n            element = __rest(choice, [\"next\"]);\n          this.choices.push(element);\n        }\n        const getSelectedIndex = () => {\n          var _a;\n          return (_a = this.nodeForm.value.selectedIndex) !== null && _a !== void 0 ? _a : -1;\n        };\n        const getSelectedNode = function () {\n          const index = getSelectedIndex();\n          return nodeModel.choices[index];\n        };\n        const getNextNodeId = () => {\n          if (node.branchOnChoices) {\n            const nextNode = getSelectedNode();\n            return nextNode.next;\n          } else {\n            return node.next;\n          }\n        };\n        const nodeName = node.nodeName;\n        const clickAction = scope => {\n          const answerName = node.answer.name;\n          const answerType = node.answer.type;\n          const nextNodeId = getNextNodeId();\n          const selectedNode = getSelectedNode();\n          scope.model.centerButton.nextNodeId = nextNodeId;\n          //@ts-ignore\n          scope.outputModel[nodeName] = {\n            name: answerName,\n            type: answerType,\n            value: selectedNode.value\n          };\n        };\n        const centerButton = {\n          show: true,\n          text: \"NEXT\",\n          click: clickAction,\n          validate: () => !this.nodeForm.invalid\n        };\n        //@ts-ignore\n        const representation = Object.assign({\n          kind: RepresentationType.NODE,\n          nodeModel: nodeModel,\n          centerButton: centerButton\n        }, this.nodeForm.value);\n        return representation;\n      };\n      return parseNode(this.node, this.nodeMap, this.scope.outputModel);\n    }\n    onSubmit() {\n      console.log(this.nodeForm.value);\n    }\n    get selectedIndex() {\n      const selectedIndex = this.nodeForm.get(\"selectedIndex\");\n      if (selectedIndex === null) {\n        throw new Error(\"No form control for selectedIndex\");\n      }\n      return selectedIndex;\n    }\n  }\n  MultipleChoiceNodeComponent.ɵfac = function MultipleChoiceNodeComponent_Factory(t) {\n    return new (t || MultipleChoiceNodeComponent)(i0.ɵɵdirectiveInject(i1.NonNullableFormBuilder));\n  };\n  MultipleChoiceNodeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MultipleChoiceNodeComponent,\n    selectors: [[\"app-multiple-choice-node\"]],\n    inputs: {\n      node: \"node\",\n      nodeMap: \"nodeMap\",\n      scope: \"scope\",\n      parameters: \"parameters\"\n    },\n    decls: 8,\n    vars: 3,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"center-div\"], [1, \"line-wrap\", \"text-element\"], [1, \"questionnaire-fields\"], [1, \"radio-list\"], [\"class\", \"narrow-row list-unstyled\", 4, \"ngFor\", \"ngForOf\"], [1, \"narrow-row\", \"list-unstyled\"], [\"name\", \"selectedIndex\", \"type\", \"radio\", \"formControlName\", \"selectedIndex\", 3, \"id\", \"value\"], [1, \"radio-label\", 3, \"for\"]],\n    template: function MultipleChoiceNodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function MultipleChoiceNodeComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"h2\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"fieldset\", 3)(5, \"div\")(6, \"ul\", 4);\n        i0.ɵɵtemplate(7, MultipleChoiceNodeComponent_li_7_Template, 4, 4, \"li\", 5);\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.nodeForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.node.question);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.choices);\n      }\n    },\n    dependencies: [i2.NgForOf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.RadioControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName]\n  });\n  return MultipleChoiceNodeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}