{"ast":null,"code":"import _asyncToGenerator from \"D:/Users/raghavendra/Desktop/ODE/OPTH/New folder/testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ElementRef } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@services/state-services/state-passing.service\";\nimport * as i3 from \"@services/rest-api-services/patient.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@ngx-translate/core\";\nimport * as i6 from \"@services/util-services/util.service\";\nimport * as i7 from \"@services/rest-api-services/authentication.service\";\nimport * as i8 from \"@services/state-services/user-session.service\";\nimport * as i9 from \"@services/rest-api-services/idp2.service\";\nimport * as i10 from \"@services/rest-api-services/threshold.service\";\nimport * as i11 from \"@angular/common\";\nimport * as i12 from \"../../header/header/header.component\";\nimport * as i13 from \"ng-multiselect-dropdown\";\nfunction CreatePatientComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 45);\n    i0.ɵɵelement(1, \"i\", 46);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 1, \"CLINICIAN_PERMISSION_WARNING\"), \" \");\n  }\n}\nfunction CreatePatientComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 47);\n    i0.ɵɵelement(1, \"i\", 28);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 1, \"CREATE_PATIENT_CREATED\"), \" \");\n  }\n}\nfunction CreatePatientComponent_div_4_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const error_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(error_r6);\n  }\n}\nfunction CreatePatientComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 48)(1, \"div\", 49)(2, \"span\", 50);\n    i0.ɵɵelement(3, \"i\", 46);\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, CreatePatientComponent_div_4_li_6_Template, 2, 1, \"li\", 51);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 2, \"CREATE_PATIENT_FAILED\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.model.errors);\n  }\n}\nfunction CreatePatientComponent_i_94_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 52);\n  }\n}\nfunction CreatePatientComponent_i_95_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 53);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    warning: a0\n  };\n};\nconst _c1 = function (a0, a1) {\n  return {\n    placeholder: a0,\n    warning: a1\n  };\n};\nexport let CreatePatientComponent = /*#__PURE__*/(() => {\n  class CreatePatientComponent {\n    constructor(formBuilder, appContext, patientService, router, translate, utils, authentication, userSession, idp2Service, thresholdService, elementRef) {\n      this.formBuilder = formBuilder;\n      this.appContext = appContext;\n      this.patientService = patientService;\n      this.router = router;\n      this.translate = translate;\n      this.utils = utils;\n      this.authentication = authentication;\n      this.userSession = userSession;\n      this.idp2Service = idp2Service;\n      this.thresholdService = thresholdService;\n      this.elementRef = elementRef;\n      this.hasPermissions = false;\n      this.sexList = [{\n        name: this.translate.instant('CREATE_PATIENT_SEX_UNKNOWN'),\n        value: 'unknown'\n      }, {\n        name: this.translate.instant('CREATE_PATIENT_SEX_MALE'),\n        value: 'male'\n      }, {\n        name: this.translate.instant('CREATE_PATIENT_SEX_FEMALE'),\n        value: 'female'\n      }];\n      this.sexModel = [this.sexList[0]]; // Required to preselect sex\n      this.numberRegex = new RegExp('(?=.*[0-9])');\n      this.characterRegex = new RegExp('(?=.*[a-zA-Z])');\n      this.createPatientForm = this.formBuilder.group({\n        uniqueId: ['', Validators.required],\n        firstName: ['', Validators.required],\n        lastName: ['', Validators.required],\n        sex: [this.sexList[0], Validators.required],\n        username: ['', Validators.required],\n        temporaryPassword: ['', Validators.compose([Validators.required, Validators.minLength(8), Validators.pattern(new RegExp('(?=.*[0-9])')), Validators.pattern(new RegExp('(?=.*[a-zA-Z])'))])],\n        patientGroups: ['', Validators.required],\n        // Contact Info\n        address: ['', Validators.required],\n        postalCode: ['', Validators.required],\n        city: ['', Validators.required],\n        phone: [''],\n        email: [''],\n        dateOfBirth: ['', Validators.required]\n      });\n      this.model = {\n        state: 'Initial',\n        errors: undefined\n      };\n      this.patientGroupList = [];\n      this.multiselectSettings = {\n        singleSelection: false,\n        idField: 'link',\n        textField: 'name',\n        searchPlaceholderText: this.translate.instant('SEARCH'),\n        noDataAvailablePlaceholderText: this.translate.instant('NO_DATA_AVAILABLE'),\n        enableCheckAll: false,\n        allowSearchFilter: true\n      };\n      this.selectSettings = {\n        singleSelection: true,\n        idField: 'value',\n        textField: 'name',\n        searchPlaceholderText: this.translate.instant('SEARCH'),\n        noDataAvailablePlaceholderText: this.translate.instant('NO_DATA_AVAILABLE'),\n        enableCheckAll: false,\n        allowSearchFilter: false,\n        closeDropDownOnSelection: true\n      };\n      this.handleError = rejection => {\n        this.model.errors = [];\n        const message = rejection.message;\n        const errors = rejection.error.errors;\n        if (this.utils.exists(message) && this.utils.exists(errors)) {\n          for (const error of errors) {\n            const code = error.code;\n            const fieldName = error.field;\n            // Ugly code hack due to backend respond with error in both password and cleartextPassword\n            if (fieldName !== 'password') {\n              if (code === 'invalid') {\n                let field = '';\n                switch (fieldName) {\n                  case 'cleartextPassword':\n                    field = this.translate.instant('CREATE_PATIENT_TEMP_PASSWORD');\n                    break;\n                  case 'uniqueId':\n                    field = this.translate.instant('CREATE_PATIENT_UNIQUE_ID');\n                    break;\n                  case 'username':\n                    field = this.translate.instant('LOGIN_FORM_USERNAME');\n                    break;\n                  default:\n                    field = this.translate.instant('UNKNOWN') + ` (${fieldName})`;\n                    console.error(`Unknown field: ${fieldName}`);\n                    break;\n                }\n                const invalidFieldMessage = this.translate.instant('CREATE_PATIENT_INVALID_FIELD');\n                this.model.errors.push(`${invalidFieldMessage} ${field}`);\n              }\n            }\n          }\n        }\n      };\n      this.user = this.appContext.currentUser.get();\n      this.hasPermissions = this.idp2Service.clinicianHasPermissions();\n      if (this.user.patientGroups) {\n        this.renderPatientGroups(this.user.patientGroups);\n      }\n      this.temporaryPassword.setValue(this.makeTempPassword());\n    }\n    makeTempPassword() {\n      let pw = '';\n      const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      const length = 8;\n      for (let i = 0; i < length; i++) {\n        pw += possible.charAt(Math.floor(Math.random() * possible.length));\n      }\n      if (this.numberRegex.test(pw) && this.characterRegex.test(pw) && pw.length === length) {\n        return pw;\n      } else {\n        return this.makeTempPassword();\n      }\n    }\n    renderPatientGroups(patientGroupList) {\n      var _a;\n      this.patientGroupList = [];\n      if (patientGroupList) {\n        for (const patientGroup of patientGroupList) {\n          (_a = this.patientGroupList) === null || _a === void 0 ? void 0 : _a.push({\n            name: patientGroup.name,\n            link: patientGroup.links.patientGroup\n          });\n        }\n      }\n    }\n    makeRequestBody(form) {\n      const requestObj = form;\n      if (requestObj.sex) {\n        const sex = requestObj.sex[0].value;\n        requestObj.sex = sex;\n      }\n      if (requestObj.patientGroups) {\n        const patientGroups = requestObj.patientGroups;\n        delete requestObj['patientGroups'];\n        requestObj['links'] = {\n          patientGroups: []\n        };\n        if (patientGroups) {\n          for (const group of patientGroups) {\n            if (requestObj.links.patientGroups) {\n              requestObj.links.patientGroups.push(group.link);\n            }\n          }\n        }\n      }\n      // Remove falsy entries and return\n      Object.keys(requestObj).forEach(k => !requestObj[k] && delete requestObj[k]);\n      return requestObj;\n    }\n    createPatient() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.model.state = 'Loading';\n        _this.model.errors = undefined;\n        const body = _this.makeRequestBody(_this.createPatientForm.value);\n        try {\n          const response = yield _this.patientService.create(_this.user, body);\n          yield _this.thresholdService.addPatientGroupThresholdsToPatient(response, body.links.patientGroups);\n          _this.model.state = 'Loaded';\n          console.debug(`Patient created with temp password: '${response.temporaryPassword}'`);\n          let patient = undefined;\n          const tokenObj = yield _this.idp2Service.getToken(response.links.self);\n          _this.authentication.patientAuthHeader(tokenObj.type + ' ' + tokenObj.token);\n          const patientObj = yield _this.patientService.getSelf(response);\n          patient = _this.userSession.setPatientUser(patientObj, tokenObj);\n          if (patient) {\n            _this.appContext.requestParams.set('selectedPatient', patient);\n            _this.router.navigate(['/menu']);\n          }\n        } catch (e) {\n          _this.model.state = 'Failed';\n          console.error(`Failed to fetch patients due to error: ${e}`);\n          console.error(JSON.stringify(e));\n          _this.handleError(e);\n        }\n      })();\n    }\n    closeMultiselect() {\n      this.elementRef.nativeElement.querySelector('#patient-groups-label').click();\n    }\n    // Form controls\n    get uniqueId() {\n      return this.createPatientForm.get('uniqueId');\n    }\n    get firstName() {\n      return this.createPatientForm.get('firstName');\n    }\n    get lastName() {\n      return this.createPatientForm.get('firstName');\n    }\n    get sex() {\n      return this.createPatientForm.get('sex');\n    }\n    get dateOfBirth() {\n      return this.createPatientForm.get('dateOfBirth');\n    }\n    get username() {\n      return this.createPatientForm.get('username');\n    }\n    get temporaryPassword() {\n      return this.createPatientForm.get('temporaryPassword');\n    }\n    get patientGroups() {\n      return this.createPatientForm.get('patientGroups');\n    }\n    get address() {\n      return this.createPatientForm.get('address');\n    }\n    get postalCode() {\n      return this.createPatientForm.get('postalCode');\n    }\n    get city() {\n      return this.createPatientForm.get('city');\n    }\n    get phone() {\n      return this.createPatientForm.get('phone');\n    }\n    get email() {\n      return this.createPatientForm.get('email');\n    }\n  }\n  CreatePatientComponent.ɵfac = function CreatePatientComponent_Factory(t) {\n    return new (t || CreatePatientComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.StatePassingService), i0.ɵɵdirectiveInject(i3.PatientService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i5.TranslateService), i0.ɵɵdirectiveInject(i6.Utils), i0.ɵɵdirectiveInject(i7.AuthenticationService), i0.ɵɵdirectiveInject(i8.UserSessionService), i0.ɵɵdirectiveInject(i9.Idp2Service), i0.ɵɵdirectiveInject(i10.ThresholdService), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  CreatePatientComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreatePatientComponent,\n    selectors: [[\"app-create-patient\"]],\n    decls: 96,\n    vars: 113,\n    consts: [[1, \"container\"], [3, \"title\", \"showChangePasswordBtn\", \"showBackBtn\", \"showLogoutBtn\"], [\"id\", \"notification-permission-warning\", \"class\", \"notification warning\", 4, \"ngIf\"], [\"id\", \"notification-patient-created\", \"class\", \"notification info\", 4, \"ngIf\"], [\"id\", \"notification-patient-error\", \"class\", \"notification error\", 4, \"ngIf\"], [1, \"content\"], [3, \"formGroup\", \"ngSubmit\"], [\"id\", \"basic-data\", 1, \"card\"], [1, \"header\"], [\"aria-hidden\", \"true\", 1, \"icon\", \"fas\", \"fa-user\"], [1, \"form-group\"], [\"for\", \"unique-id\", 1, \"required\"], [\"id\", \"unique-id\", \"name\", \"unique-id\", \"focusOnLoad\", \"\", \"type\", \"text\", \"autocomplete\", \"off\", \"autocorrect\", \"off\", \"autocapitalize\", \"off\", \"formControlName\", \"uniqueId\", 3, \"ngClass\"], [\"for\", \"first-name\", 1, \"required\"], [\"id\", \"first-name\", \"name\", \"first-name\", \"type\", \"text\", \"autocomplete\", \"off\", \"autocorrect\", \"off\", \"autocapitalize\", \"off\", \"formControlName\", \"firstName\", 3, \"ngClass\"], [\"for\", \"last-name\", 1, \"required\"], [\"id\", \"last-name\", \"name\", \"last-name\", \"type\", \"text\", \"autocomplete\", \"off\", \"autocorrect\", \"off\", \"autocapitalize\", \"off\", \"formControlName\", \"lastName\", 3, \"ngClass\"], [\"for\", \"sex\", \"id\", \"sex-label\", 1, \"required\"], [\"id\", \"sex\", \"formControlName\", \"sex\", 3, \"placeholder\", \"settings\", \"ngModel\", \"data\", \"ngClass\", \"ngModelChange\"], [\"for\", \"data-of-birth\", 1, \"required\"], [\"type\", \"date\", \"id\", \"date-of-birth\", \"formControlName\", \"dateOfBirth\", 3, \"ngClass\"], [\"for\", \"username\", 1, \"required\"], [\"id\", \"username\", \"name\", \"username\", \"type\", \"text\", \"autocomplete\", \"off\", \"autocorrect\", \"off\", \"autocapitalize\", \"off\", \"formControlName\", \"username\", 3, \"ngClass\"], [\"for\", \"temporary-password\", 1, \"required\"], [\"id\", \"temporary-password\", \"name\", \"temporary-password\", \"type\", \"text\", \"autocomplete\", \"off\", \"autocorrect\", \"off\", \"autocapitalize\", \"off\", \"formControlName\", \"temporaryPassword\", 3, \"ngClass\"], [\"for\", \"patient-groups\", \"id\", \"patient-groups-label\", 1, \"required\"], [\"id\", \"patient-groups\", \"formControlName\", \"patientGroups\", 3, \"placeholder\", \"settings\", \"data\", \"ngClass\", \"onSelect\", \"onSelectAll\", \"onDeSelect\"], [\"id\", \"patient-group-threshold-info\", 1, \"notification\", \"info\"], [1, \"notification_icon\", \"fas\", \"fa-info-circle\"], [\"id\", \"contact-information\", 1, \"card\"], [\"aria-hidden\", \"true\", 1, \"icon\", \"fas\", \"fa-home\"], [\"for\", \"address\", 1, \"required\"], [\"id\", \"address\", \"name\", \"address\", \"type\", \"text\", \"autocomplete\", \"off\", \"autocorrect\", \"off\", \"autocapitalize\", \"off\", \"formControlName\", \"address\", 3, \"ngClass\"], [\"for\", \"postal-code\", 1, \"required\"], [\"id\", \"postal-code\", \"name\", \"postal-code\", \"type\", \"text\", \"autocomplete\", \"off\", \"autocorrect\", \"off\", \"autocapitalize\", \"off\", \"formControlName\", \"postalCode\", 3, \"ngClass\"], [\"for\", \"city\", 1, \"required\"], [\"id\", \"city\", \"name\", \"city\", \"type\", \"text\", \"autocomplete\", \"off\", \"autocorrect\", \"off\", \"autocapitalize\", \"off\", \"formControlName\", \"city\", 3, \"ngClass\"], [\"for\", \"phone\"], [\"id\", \"phone\", \"name\", \"phone\", \"type\", \"text\", \"autocomplete\", \"off\", \"autocorrect\", \"off\", \"autocapitalize\", \"off\", \"formControlName\", \"phone\", 3, \"ngClass\"], [\"for\", \"email\"], [\"id\", \"email\", \"name\", \"email\", \"type\", \"text\", \"autocomplete\", \"off\", \"autocorrect\", \"off\", \"autocapitalize\", \"off\", \"formControlName\", \"email\", 3, \"ngClass\"], [1, \"button-container\"], [\"id\", \"create\", \"type\", \"submit\", 1, \"contained-create-btn\", 3, \"disabled\"], [\"class\", \"fa fa-user-plus\", 4, \"ngIf\"], [\"class\", \"fa fa-spinner fa-spin\", 4, \"ngIf\"], [\"id\", \"notification-permission-warning\", 1, \"notification\", \"warning\"], [1, \"notification_icon\", \"fas\", \"fa-exclamation-triangle\"], [\"id\", \"notification-patient-created\", 1, \"notification\", \"info\"], [\"id\", \"notification-patient-error\", 1, \"notification\", \"error\"], [1, \"notification-list\"], [\"id\", \"notification-error\"], [4, \"ngFor\", \"ngForOf\"], [1, \"fa\", \"fa-user-plus\"], [1, \"fa\", \"fa-spinner\", \"fa-spin\"]],\n    template: function CreatePatientComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"header-menu\", 1);\n        i0.ɵɵtemplate(2, CreatePatientComponent_div_2_Template, 4, 3, \"div\", 2);\n        i0.ɵɵtemplate(3, CreatePatientComponent_div_3_Template, 4, 3, \"div\", 3);\n        i0.ɵɵtemplate(4, CreatePatientComponent_div_4_Template, 7, 4, \"div\", 4);\n        i0.ɵɵelementStart(5, \"nav\", 5)(6, \"form\", 6);\n        i0.ɵɵlistener(\"ngSubmit\", function CreatePatientComponent_Template_form_ngSubmit_6_listener() {\n          return ctx.createPatient();\n        });\n        i0.ɵɵelementStart(7, \"div\", 7)(8, \"div\", 8)(9, \"h2\");\n        i0.ɵɵelement(10, \"i\", 9);\n        i0.ɵɵtext(11);\n        i0.ɵɵpipe(12, \"translate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"div\", 10)(14, \"label\", 11);\n        i0.ɵɵtext(15);\n        i0.ɵɵpipe(16, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"input\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 10)(19, \"label\", 13);\n        i0.ɵɵtext(20);\n        i0.ɵɵpipe(21, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(22, \"input\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"div\", 10)(24, \"label\", 15);\n        i0.ɵɵtext(25);\n        i0.ɵɵpipe(26, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(27, \"input\", 16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"div\", 10)(29, \"label\", 17);\n        i0.ɵɵtext(30);\n        i0.ɵɵpipe(31, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"ng-multiselect-dropdown\", 18);\n        i0.ɵɵlistener(\"ngModelChange\", function CreatePatientComponent_Template_ng_multiselect_dropdown_ngModelChange_32_listener($event) {\n          return ctx.sexModel = $event;\n        });\n        i0.ɵɵpipe(33, \"translate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(34, \"div\", 10)(35, \"label\", 19);\n        i0.ɵɵtext(36);\n        i0.ɵɵpipe(37, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(38, \"input\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(39, \"div\", 10)(40, \"label\", 21);\n        i0.ɵɵtext(41);\n        i0.ɵɵpipe(42, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(43, \"input\", 22);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(44, \"div\", 10)(45, \"label\", 23);\n        i0.ɵɵtext(46);\n        i0.ɵɵpipe(47, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(48, \"input\", 24);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(49, \"div\", 10)(50, \"label\", 25);\n        i0.ɵɵtext(51);\n        i0.ɵɵpipe(52, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(53, \"ng-multiselect-dropdown\", 26);\n        i0.ɵɵlistener(\"onSelect\", function CreatePatientComponent_Template_ng_multiselect_dropdown_onSelect_53_listener() {\n          return ctx.closeMultiselect();\n        })(\"onSelectAll\", function CreatePatientComponent_Template_ng_multiselect_dropdown_onSelectAll_53_listener() {\n          return ctx.closeMultiselect();\n        })(\"onDeSelect\", function CreatePatientComponent_Template_ng_multiselect_dropdown_onDeSelect_53_listener() {\n          return ctx.closeMultiselect();\n        });\n        i0.ɵɵpipe(54, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(55, \"div\", 27);\n        i0.ɵɵelement(56, \"i\", 28);\n        i0.ɵɵtext(57);\n        i0.ɵɵpipe(58, \"translate\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(59, \"div\", 29)(60, \"div\", 8)(61, \"h2\");\n        i0.ɵɵelement(62, \"i\", 30);\n        i0.ɵɵtext(63);\n        i0.ɵɵpipe(64, \"translate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(65, \"div\", 10)(66, \"label\", 31);\n        i0.ɵɵtext(67);\n        i0.ɵɵpipe(68, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(69, \"input\", 32);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(70, \"div\", 10)(71, \"label\", 33);\n        i0.ɵɵtext(72);\n        i0.ɵɵpipe(73, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(74, \"input\", 34);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(75, \"div\", 10)(76, \"label\", 35);\n        i0.ɵɵtext(77);\n        i0.ɵɵpipe(78, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(79, \"input\", 36);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(80, \"div\", 10)(81, \"label\", 37);\n        i0.ɵɵtext(82);\n        i0.ɵɵpipe(83, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(84, \"input\", 38);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(85, \"div\", 10)(86, \"label\", 39);\n        i0.ɵɵtext(87);\n        i0.ɵɵpipe(88, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(89, \"input\", 40);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(90, \"div\", 41)(91, \"button\", 42);\n        i0.ɵɵtext(92);\n        i0.ɵɵpipe(93, \"translate\");\n        i0.ɵɵtemplate(94, CreatePatientComponent_i_94_Template, 1, 0, \"i\", 43);\n        i0.ɵɵtemplate(95, CreatePatientComponent_i_95_Template, 1, 0, \"i\", 44);\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"title\", \"CREATE_PATIENT\")(\"showChangePasswordBtn\", false)(\"showBackBtn\", true)(\"showLogoutBtn\", false);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.hasPermissions);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.model.state === \"Loaded\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.model.state === \"Failed\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.createPatientForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(12, 48, \"CREATE_PATIENT_BASIC_DATA\"), \" \");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(16, 50, \"CREATE_PATIENT_UNIQUE_ID\"), \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(86, _c0, !ctx.uniqueId.valid && !ctx.uniqueId.pristine));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(21, 52, \"CREATE_PATIENT_FIRST_NAME\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(88, _c0, !ctx.firstName.valid && !ctx.firstName.pristine));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(26, 54, \"CREATE_PATIENT_LAST_NAME\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(90, _c0, !ctx.lastName.valid && !ctx.lastName.pristine));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(31, 56, \"CREATE_PATIENT_SEX\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"placeholder\", i0.ɵɵpipeBind1(33, 58, \"CREATE_PATIENT_SEX\"))(\"settings\", ctx.selectSettings)(\"ngModel\", ctx.sexModel)(\"data\", ctx.sexList)(\"ngClass\", i0.ɵɵpureFunction1(92, _c0, !ctx.sex.valid && !ctx.sex.pristine));\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(37, 60, \"CREATE_PATIENT_DATE_OF_BIRTH\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(94, _c1, !ctx.dateOfBirth.valid, !ctx.dateOfBirth.valid && !ctx.dateOfBirth.pristine));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(42, 62, \"LOGIN_FORM_USERNAME\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(97, _c0, !ctx.username.valid && !ctx.username.pristine));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(47, 64, \"CREATE_PATIENT_TEMP_PASSWORD\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(99, _c0, !ctx.temporaryPassword.valid && !ctx.temporaryPassword.pristine));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(52, 66, \"CREATE_PATIENT_PATIENT_GROUPS\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"placeholder\", i0.ɵɵpipeBind1(54, 68, \"CREATE_PATIENT_SELECT_PATIENT_GROUP\"))(\"settings\", ctx.multiselectSettings)(\"data\", ctx.patientGroupList)(\"ngClass\", i0.ɵɵpureFunction1(101, _c0, !ctx.patientGroups.valid && !ctx.patientGroups.pristine));\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(58, 70, \"CREATE_PATIENT_THRESHOLD_INFO\"), \" \");\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(64, 72, \"CREATE_PATIENT_CONTACT_INFO\"), \" \");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(68, 74, \"CREATE_PATIENT_ADDRESS\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(103, _c0, !ctx.address.valid && !ctx.address.pristine));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(73, 76, \"CREATE_PATIENT_POSTAL_CODE\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(105, _c0, !ctx.postalCode.valid && !ctx.postalCode.pristine));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(78, 78, \"CREATE_PATIENT_CITY\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(107, _c0, !ctx.city.valid && !ctx.city.pristine));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(83, 80, \"CREATE_PATIENT_PHONE\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(109, _c0, !ctx.phone.valid && !ctx.phone.pristine));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(88, 82, \"CREATE_PATIENT_EMAIL\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(111, _c0, !ctx.email.valid && !ctx.email.pristine));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", !ctx.createPatientForm.valid || ctx.model.state === \"Loading\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \\u00A0 \", ctx.model.state !== \"Loading\" ? i0.ɵɵpipeBind1(93, 84, \"CREATE_PATIENT\") : \"\", \" \\u00A0 \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.model.state !== \"Loading\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.model.state === \"Loading\");\n      }\n    },\n    dependencies: [i11.NgClass, i11.NgForOf, i11.NgIf, i12.HeaderComponent, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i13.MultiSelectComponent, i5.TranslatePipe]\n  });\n  return CreatePatientComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}