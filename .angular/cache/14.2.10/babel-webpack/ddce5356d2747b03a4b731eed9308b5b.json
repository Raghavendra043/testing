{"ast":null,"code":"import { isSameDay, startOfToday, subMinutes } from 'date-fns';\nimport { HttpContext } from '@angular/common/http';\nimport { ERROR_PASS_THROUGH, SILENT_REQUEST } from '@app/interceptors/interceptor';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@services/util-services/util.service\";\nimport * as i2 from \"@angular/common/http\";\nexport let QuestionnaireSchedulesService = /*#__PURE__*/(() => {\n  class QuestionnaireSchedulesService {\n    constructor(utils, http) {\n      this.utils = utils;\n      this.http = http;\n      this.toScheduleSummaries = result => {\n        const questionnaireSchedules = result.questionnaireSchedules;\n        const onlyShowOnAnsweringDay = result.onlyShowOnAnsweringDay;\n        const today = startOfToday();\n        return questionnaireSchedules.filter(schedule => {\n          const isOnDeadline = this.utils.exists(schedule.nextDeadline) && isSameDay(today, new Date(schedule.nextDeadline));\n          return !onlyShowOnAnsweringDay || schedule.type === 'UNSCHEDULED' || isOnDeadline;\n        }).map(this.toSummary);\n      };\n      this.toSummary = schedule => {\n        const nextDeadline = this.utils.exists(schedule.nextDeadline) ? new Date(schedule.nextDeadline) : undefined;\n        let scheduleWindowStart;\n        if (this.utils.exists(nextDeadline) && this.utils.exists(schedule.scheduleWindowMinutes)) {\n          scheduleWindowStart = subMinutes(nextDeadline, schedule.scheduleWindowMinutes);\n        }\n        const [questionnaireId] = schedule.links.questionnaire.split('/').reverse().map(Number).filter(id => !Number.isNaN(id));\n        let reminderStartMinutes;\n        if (this.utils.exists(schedule.scheduledTime)) {\n          reminderStartMinutes = schedule.scheduledTime.reminderStartMinutes;\n        }\n        return Object.assign(Object.assign(Object.assign({\n          name: schedule.questionnaireName,\n          questionnaireId\n        }, scheduleWindowStart ? {\n          scheduleWindowStart\n        } : {}), reminderStartMinutes ? {\n          reminderStartMinutes\n        } : {}), nextDeadline ? {\n          nextDeadline\n        } : {});\n      };\n      this.list = (user, errorPassThrough) => {\n        if (!this.utils.exists(user.links.questionnaireSchedules)) {\n          throw new TypeError('User object does not contain a link relation to questionnaireSchedules');\n        }\n        const context = new HttpContext().set(SILENT_REQUEST, true).set(ERROR_PASS_THROUGH, errorPassThrough);\n        return this.http.get(user.links.questionnaireSchedules, {\n          context\n        }).pipe(map(this.toScheduleSummaries));\n      };\n    }\n  }\n  QuestionnaireSchedulesService.ɵfac = function QuestionnaireSchedulesService_Factory(t) {\n    return new (t || QuestionnaireSchedulesService)(i0.ɵɵinject(i1.Utils), i0.ɵɵinject(i2.HttpClient));\n  };\n  QuestionnaireSchedulesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuestionnaireSchedulesService,\n    factory: QuestionnaireSchedulesService.ɵfac,\n    providedIn: 'root'\n  });\n  return QuestionnaireSchedulesService;\n})();","map":null,"metadata":{},"sourceType":"module"}