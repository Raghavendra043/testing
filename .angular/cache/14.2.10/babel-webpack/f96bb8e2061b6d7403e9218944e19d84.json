{"ast":null,"code":"import { EventType, StatusType } from \"@app/types/listener.type\";\nimport { exists } from \"@components/questionnaire-nodes/node-form-utils\";\nimport * as i0 from \"@angular/core\";\nexport let DeviceListenerService = /*#__PURE__*/(() => {\n  class DeviceListenerService {\n    constructor() {\n      this.statusEventHandlers = new Map([[StatusType.INFO, (nodeModel, status) => {\n        if (status.type == StatusType.INFO) {\n          this.setNodeModelValue(nodeModel, \"info\", status.message);\n        }\n      }], [StatusType.ERROR, (nodeModel, status) => {\n        if (status.type == StatusType.ERROR) {\n          this.setNodeModelValue(nodeModel, \"error\", status.message);\n        }\n      }], [StatusType.PROGRESS, (nodeModel, status) => {\n        if (status.type == StatusType.PROGRESS) {\n          this.setNodeModelValue(nodeModel, \"progress\", status.progress);\n        }\n      }]]);\n      this.handleStatusEvent = (nodeModel, event) => {\n        const typeName = event.type;\n        const statusHandler = this.statusEventHandlers.get(typeName);\n        if (statusHandler !== undefined) {\n          statusHandler(nodeModel, event);\n        } else {\n          console.warn(`Could not find any status handler for '${typeName}'`);\n        }\n      };\n      this.createMeasurementHandler = meterType => {\n        const measurementTypes = meterType.measurementTypes;\n        const funs = measurementTypes.map(measurementType => {\n          const measurementTypeName = measurementType.name;\n          switch (measurementType.kind) {\n            case \"single\":\n              {\n                const value = measurementType.value;\n                const handleSingleValueMeasurement = (nodeModel, measurement) => {\n                  if (measurement.type === measurementTypeName) {\n                    this.setNodeModelValue(nodeModel, value, measurement.value);\n                    return true;\n                  } else {\n                    return false;\n                  }\n                };\n                return handleSingleValueMeasurement;\n              }\n            case \"multiple\":\n              {\n                const values = measurementType.values;\n                const handleMultipleValueMeasurement = (nodeModel, measurement) => {\n                  if (measurement.type === measurementTypeName) {\n                    values.forEach(value => {\n                      this.setNodeModelValue(nodeModel, value, measurement.value[value]);\n                    });\n                    return true;\n                  } else {\n                    return false;\n                  }\n                };\n                return handleMultipleValueMeasurement;\n              }\n          }\n        });\n        return (nodeModel, measurement) => {\n          const handledEvent = funs.some(handler => handler(nodeModel, measurement));\n          if (!handledEvent) {\n            console.warn(`MeasurementHandler: could not find handler for event: ${JSON.stringify(measurement)}`);\n          }\n        };\n      };\n      this.overrideStatusEventHandler = (eventType, handler) => {\n        this.statusEventHandlers.set(eventType, handler);\n      };\n      this.create = (nodeModel, meterType) => {\n        if (exists(meterType.statusHandlers)) {\n          const customStatusHandlers = meterType.statusHandlers;\n          if (customStatusHandlers[StatusType.INFO]) {\n            this.overrideStatusEventHandler(StatusType.INFO, customStatusHandlers[StatusType.INFO]);\n          }\n          if (customStatusHandlers[StatusType.ERROR]) {\n            this.overrideStatusEventHandler(StatusType.ERROR, customStatusHandlers[StatusType.ERROR]);\n          }\n          if (customStatusHandlers[StatusType.PROGRESS]) {\n            this.overrideStatusEventHandler(StatusType.PROGRESS, customStatusHandlers[StatusType.PROGRESS]);\n          }\n        }\n        const handleMeasurementEvent = this.createMeasurementHandler(meterType);\n        return event => {\n          console.debug(`Event: ${JSON.stringify(event)}`);\n          switch (event.type) {\n            case EventType.MEASUREMENT:\n              const measurement = event.measurement;\n              this.setNodeModelValue(nodeModel, \"origin\", event.origin);\n              handleMeasurementEvent(nodeModel, measurement);\n              break;\n            case EventType.STATUS:\n              const status = event.status;\n              this.handleStatusEvent(nodeModel, status);\n              break;\n          }\n        };\n      };\n      this.setNodeModelValue = (nodeModel, key, value) => {\n        if (nodeModel.setValue !== undefined) {\n          nodeModel.setValue(key, value);\n        }\n      };\n    }\n  }\n  DeviceListenerService.ɵfac = function DeviceListenerService_Factory(t) {\n    return new (t || DeviceListenerService)();\n  };\n  DeviceListenerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DeviceListenerService,\n    factory: DeviceListenerService.ɵfac,\n    providedIn: \"root\"\n  });\n  return DeviceListenerService;\n})();","map":null,"metadata":{},"sourceType":"module"}