{"ast":null,"code":"import _asyncToGenerator from \"D:/Users/raghavendra/Desktop/ODE/OPTH/New folder/testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { OIDC_CONTINUE_WITH_ID, ROOT_RESOURCE } from \"@utils/globals\";\nimport { lastValueFrom } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/state-services/user-session.service\";\nimport * as i2 from \"src/app/services/state-services/state-passing.service\";\nimport * as i3 from \"src/app/services/rest-api-services/authentication.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"angular-auth-oidc-client\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"../../../header/header/header.component\";\nimport * as i8 from \"@ngx-translate/core\";\nfunction OidcLoginSuccessComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵelement(1, \"i\", 8);\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 1, ctx_r0.errorMessage));\n  }\n}\nfunction OidcLoginSuccessComponent_input_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 9);\n    i0.ɵɵlistener(\"click\", function OidcLoginSuccessComponent_input_6_Template_input_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.goBackToLogin());\n    });\n    i0.ɵɵpipe(1, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵpropertyInterpolate(\"value\", i0.ɵɵpipeBind1(1, 1, \"OIDC_LOGIN_FAILED_BUTTON_TEXT\"));\n  }\n}\nexport let OidcLoginSuccessComponent = /*#__PURE__*/(() => {\n  class OidcLoginSuccessComponent {\n    constructor(userSession, appContext, authentication, router, oidcSecurityService) {\n      this.userSession = userSession;\n      this.appContext = appContext;\n      this.authentication = authentication;\n      this.router = router;\n      this.oidcSecurityService = oidcSecurityService;\n      this.errorMessage = \"\";\n      this.enableCreatePinCode = false;\n      this.root = undefined;\n    }\n    goBackToLogin() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        yield _this.router.navigate([\"/login\"]);\n      })();\n    }\n    loginCompleted({\n      claims,\n      canChangePassword,\n      logoutUrl,\n      organizations\n    }) {\n      const root = ROOT_RESOURCE.get();\n      this.appContext.requestParams.set(\"completeLogin\", () => {\n        this.userSession.completeLogin(root, claims, canChangePassword, logoutUrl, organizations);\n      });\n      this.appContext.requestParams.set(\"root\", root);\n      this.router.navigate([\"/pincode\"], {\n        replaceUrl: true\n      });\n    }\n    setInitialState() {\n      this.enableCreatePinCode = false;\n      this.errorMessage = \"\";\n    }\n    ngOnInit() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        console.debug(\"OidcSuccessComponent\");\n        _this2.setInitialState();\n        _this2.appContext.requestParams.set(\"softLogout\", true);\n        let idTokenToVerify;\n        //When Invalidate SSO we need to use the stored token\n        if (OIDC_CONTINUE_WITH_ID.get()) {\n          idTokenToVerify = OIDC_CONTINUE_WITH_ID.get();\n          OIDC_CONTINUE_WITH_ID.delete();\n        } else {\n          idTokenToVerify = yield lastValueFrom(_this2.oidcSecurityService.getIdToken());\n        }\n        if (!idTokenToVerify) {\n          _this2.errorMessage = \"OIDC_EXCHANGE_TOKEN_FAILED\";\n          throw Error(\"Unable to get ID Token\");\n        }\n        const root = ROOT_RESOURCE.get();\n        if (root !== null) {\n          _this2.root = root;\n          const authUrl = _this2.root.links.oidcAuth;\n          try {\n            const jwt = yield lastValueFrom(_this2.authentication.oidcLogin(authUrl, idTokenToVerify));\n            _this2.loginCompleted(jwt);\n          } catch (e) {\n            _this2.errorMessage = \"OIDC_EXCHANGE_TOKEN_FAILED\";\n            console.error(e);\n          }\n        } else {\n          throw Error(\"Unable to get root\");\n        }\n      })();\n    }\n  }\n  OidcLoginSuccessComponent.ɵfac = function OidcLoginSuccessComponent_Factory(t) {\n    return new (t || OidcLoginSuccessComponent)(i0.ɵɵdirectiveInject(i1.UserSessionService), i0.ɵɵdirectiveInject(i2.StatePassingService), i0.ɵɵdirectiveInject(i3.AuthenticationService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i5.OidcSecurityService));\n  };\n  OidcLoginSuccessComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: OidcLoginSuccessComponent,\n    selectors: [[\"app-oidc-login-success\"]],\n    decls: 7,\n    vars: 3,\n    consts: [[1, \"container\"], [3, \"showLogo\"], [1, \"content\", \"space_between\"], [\"class\", \"notification error\", 4, \"ngIf\"], [1, \"fill\"], [\"id\", \"input-container\"], [\"id\", \"oidc-retry\", \"type\", \"submit\", \"class\", \"list_item confirm-btn\", 3, \"value\", \"click\", 4, \"ngIf\"], [1, \"notification\", \"error\"], [1, \"notification_icon\", \"fas\", \"fa-exclamation-triangle\"], [\"id\", \"oidc-retry\", \"type\", \"submit\", 1, \"list_item\", \"confirm-btn\", 3, \"value\", \"click\"]],\n    template: function OidcLoginSuccessComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"header-menu\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtemplate(3, OidcLoginSuccessComponent_div_3_Template, 5, 3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4)(5, \"div\", 5);\n        i0.ɵɵtemplate(6, OidcLoginSuccessComponent_input_6_Template, 2, 3, \"input\", 6);\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"showLogo\", true);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n      }\n    },\n    dependencies: [i6.NgIf, i7.HeaderComponent, i8.TranslatePipe]\n  });\n  return OidcLoginSuccessComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}